// Generated by Cap'n Proto compiler, DO NOT EDIT
// source: ue_core.capnp

#include "ue_core.capnp.h"

namespace capnp {
namespace schemas {
static const ::capnp::_::AlignedData<215> b_8e1737faadc1c8be = {
  {   0,   0,   0,   0,   5,   0,   6,   0,
    190, 200, 193, 173, 250,  55,  23, 142,
     14,   0,   0,   0,   3,   0,   0,   0,
     46, 251,  15, 131, 217,   2,  63, 164,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     21,   0,   0,   0, 202,   0,   0,   0,
     33,   0,   0,   0, 119,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
    133,   0,   0,   0, 199,   3,   0,   0,
     45,   3,   0,   0,   7,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
    117, 101,  95,  99, 111, 114, 101,  46,
     99,  97, 112, 110, 112,  58,  85, 110,
    114, 101,  97, 108,  67, 111, 114, 101,
      0,   0,   0,   0,   0,   0,   0,   0,
     28,   0,   0,   0,   1,   0,   1,   0,
    118,  97, 113,   4, 177, 154, 189, 187,
     49,   0,   0,   0,  58,   0,   0,   0,
    189, 192, 116, 130,  96,   6, 166, 189,
     45,   0,   0,   0,  50,   0,   0,   0,
    230, 193, 195, 135, 232,  92,  60, 165,
     41,   0,   0,   0,  74,   0,   0,   0,
    198,  43, 181,  32, 209,   0, 255, 205,
     41,   0,   0,   0,  74,   0,   0,   0,
     54, 231, 165,  52, 216, 119,  45, 143,
     41,   0,   0,   0,  58,   0,   0,   0,
    151, 226, 117, 205,  18, 158, 110, 164,
     37,   0,   0,   0, 122,   0,   0,   0,
    255, 207,  40,  47, 243, 127, 123, 158,
     37,   0,   0,   0, 138,   0,   0,   0,
     79,  98, 106, 101,  99, 116,   0,   0,
     67, 108,  97, 115, 115,   0,   0,   0,
     65, 114, 103, 117, 109, 101, 110, 116,
      0,   0,   0,   0,   0,   0,   0,   0,
     80, 114, 111, 112, 101, 114, 116, 121,
      0,   0,   0,   0,   0,   0,   0,   0,
     77, 101, 116, 104, 111, 100,   0,   0,
     77, 101, 116, 104, 111, 100,  67,  97,
    108, 108,  97,  98, 108, 101,   0,   0,
     68, 101, 108, 101, 103,  97, 116, 101,
     67,  97, 108, 108,  98,  97,  99, 107,
      0,   0,   0,   0,   0,   0,   0,   0,
     60,   0,   0,   0,   3,   0,   5,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
    135, 140, 225, 156, 144,  40,  48, 233,
    144,  21,  81,  96,  37, 115, 174, 232,
    209,   1,   0,   0,  82,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
    201,   1,   0,   0,   7,   0,   0,   0,
      1,   0,   0,   0,   0,   0,   0,   0,
     69,  26, 239,  22,  23,  99,  63, 216,
    144,  81,  96, 209, 212, 141,  54, 155,
    189,   1,   0,   0, 114,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
    181,   1,   0,   0,   7,   0,   0,   0,
      2,   0,   0,   0,   0,   0,   0,   0,
    136, 130, 123, 175, 219, 142, 135, 251,
    134, 126, 122, 191, 203, 105, 226, 193,
    169,   1,   0,   0, 106,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
    161,   1,   0,   0,   7,   0,   0,   0,
      3,   0,   0,   0,   0,   0,   0,   0,
    144, 176, 252, 206, 228,  16, 132, 215,
    169,  66,   3,  76, 147, 215, 116, 232,
    149,   1,   0,   0, 154,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
    145,   1,   0,   0,   7,   0,   0,   0,
      4,   0,   0,   0,   0,   0,   0,   0,
     15, 239, 178,  82,  89, 116,  26, 237,
    242, 107,  23,  87, 132,  28, 228, 229,
    133,   1,   0,   0,  82,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
    125,   1,   0,   0,   7,   0,   0,   0,
      5,   0,   0,   0,   0,   0,   0,   0,
    125, 163, 252,  13,  11, 175, 192, 243,
    221, 189,  43, 220, 252, 121, 191, 154,
    113,   1,   0,   0,  82,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
    105,   1,   0,   0,   7,   0,   0,   0,
      6,   0,   0,   0,   0,   0,   0,   0,
    242,  88, 215,  12, 225, 109,  42, 183,
     79, 211,  74, 145, 188, 197, 243, 204,
     93,   1,   0,   0,  98,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     85,   1,   0,   0,   7,   0,   0,   0,
      7,   0,   0,   0,   0,   0,   0,   0,
    191, 166, 155, 158,  38,  38, 255, 239,
     64, 198, 169, 190, 129, 140,  73, 223,
     73,   1,   0,   0, 106,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     65,   1,   0,   0,   7,   0,   0,   0,
      8,   0,   0,   0,   0,   0,   0,   0,
    239,  84,  56,  20, 158, 127, 185, 147,
     65,  11, 104, 101,  85, 166, 176, 232,
     53,   1,   0,   0, 122,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     45,   1,   0,   0,   7,   0,   0,   0,
      9,   0,   0,   0,   0,   0,   0,   0,
    222,  30, 116, 115,  95, 130, 161, 240,
    110, 125, 138, 169, 171, 134,  40, 187,
     33,   1,   0,   0, 138,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     29,   1,   0,   0,   7,   0,   0,   0,
     10,   0,   0,   0,   0,   0,   0,   0,
    150,   8, 167, 183,  60,  87, 150, 229,
     83, 102, 194,  47, 170, 184,  36, 245,
     17,   1,   0,   0, 162,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     13,   1,   0,   0,   7,   0,   0,   0,
     11,   0,   0,   0,   0,   0,   0,   0,
     37,  94,  69, 198, 227, 212, 169, 225,
     71,  46,  10,   1, 237,  54, 248, 216,
      1,   1,   0,   0, 178,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
    253,   0,   0,   0,   7,   0,   0,   0,
     12,   0,   0,   0,   0,   0,   0,   0,
     87, 124, 203, 132, 140, 110,  79, 216,
    250,  83, 212,  86, 255,  16, 145, 177,
    241,   0,   0,   0, 194,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
    237,   0,   0,   0,   7,   0,   0,   0,
     13,   0,   0,   0,   0,   0,   0,   0,
    130, 130,   9, 137,   1, 136, 141, 185,
     91, 167, 165, 223,  66,  88, 226, 167,
    225,   0,   0,   0,  98,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
    217,   0,   0,   0,   7,   0,   0,   0,
     14,   0,   0,   0,   0,   0,   0,   0,
     75, 134,  48, 157, 107, 236, 231, 227,
    174, 255,  36, 237, 112,  74,  73, 255,
    205,   0,   0,   0,  98,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
    197,   0,   0,   0,   7,   0,   0,   0,
    110, 101, 119,  79,  98, 106, 101,  99,
    116,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   1,   0,
    100, 101, 115, 116, 114, 111, 121,  79,
     98, 106, 101,  99, 116,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   1,   0,
     99,  97, 108, 108,  70, 117, 110,  99,
    116, 105, 111, 110,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   1,   0,
     99,  97, 108, 108,  83, 116,  97, 116,
    105,  99,  70, 117, 110,  99, 116, 105,
    111, 110,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   1,   0,
    102, 105, 110, 100,  67, 108,  97, 115,
    115,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   1,   0,
    108, 111,  97, 100,  67, 108,  97, 115,
    115,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   1,   0,
    115, 116,  97, 116, 105,  99,  67, 108,
     97, 115, 115,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   1,   0,
     98, 105, 110, 100,  68, 101, 108, 101,
    103,  97, 116, 101,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   1,   0,
    117, 110,  98, 105, 110, 100,  68, 101,
    108, 101, 103,  97, 116, 101,   0,   0,
      0,   0,   0,   0,   0,   0,   1,   0,
     97, 100, 100,  77, 117, 108, 116, 105,
     68, 101, 108, 101, 103,  97, 116, 101,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   1,   0,
    114, 101, 109, 111, 118, 101,  77, 117,
    108, 116, 105,  68, 101, 108, 101, 103,
     97, 116, 101,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   1,   0,
    114, 101, 103, 105, 115, 116, 101, 114,
     79, 118, 101, 114, 114, 105, 100, 101,
     67, 108,  97, 115, 115,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   1,   0,
    117, 110, 114, 101, 103, 105, 115, 116,
    101, 114,  79, 118, 101, 114, 114, 105,
    100, 101,  67, 108,  97, 115, 115,   0,
      0,   0,   0,   0,   0,   0,   1,   0,
    115, 101, 116,  80, 114, 111, 112, 101,
    114, 116, 121,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   1,   0,
    103, 101, 116,  80, 114, 111, 112, 101,
    114, 116, 121,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   1,   0,
      0,   0,   0,   0,   1,   0,   1,   0, }
};
::capnp::word const* const bp_8e1737faadc1c8be = b_8e1737faadc1c8be.words;
#if !CAPNP_LITE
static const ::capnp::_::RawSchema* const d_8e1737faadc1c8be[] = {
  &s_93b97f9e143854ef,
  &s_9abf79fcdc2bbddd,
  &s_9b368dd4d1605190,
  &s_a7e25842dfa5a75b,
  &s_b19110ff56d453fa,
  &s_b72a6de10cd758f2,
  &s_b98d880189098282,
  &s_bb2886aba98a7d6e,
  &s_c1e269cbbf7a7e86,
  &s_ccf3c5bc914ad34f,
  &s_d78410e4cefcb090,
  &s_d83f631716ef1a45,
  &s_d84f6e8c84cb7c57,
  &s_d8f836ed010a2e47,
  &s_df498c81bea9c640,
  &s_e1a9d4e3c6455e25,
  &s_e3e7ec6b9d30864b,
  &s_e596573cb7a70896,
  &s_e5e41c8457176bf2,
  &s_e874d7934c0342a9,
  &s_e8ae732560511590,
  &s_e8b0a65565680b41,
  &s_e93028909ce18c87,
  &s_ed1a745952b2ef0f,
  &s_efff26269e9ba6bf,
  &s_f0a1825f73741ede,
  &s_f3c0af0b0dfca37d,
  &s_f524b8aa2fc26653,
  &s_fb878edbaf7b8288,
  &s_ff494a70ed24ffae,
};
static const uint16_t m_8e1737faadc1c8be[] = {9, 7, 2, 3, 1, 4, 14, 5, 0, 11, 10, 13, 6, 8, 12};
const ::capnp::_::RawSchema s_8e1737faadc1c8be = {
  0x8e1737faadc1c8be, b_8e1737faadc1c8be.words, 215, d_8e1737faadc1c8be, m_8e1737faadc1c8be,
  30, 15, nullptr, nullptr, nullptr, { &s_8e1737faadc1c8be, nullptr, nullptr, 0, 0, nullptr }, false
};
#endif  // !CAPNP_LITE
static const ::capnp::_::AlignedData<48> b_bbbd9ab104716176 = {
  {   0,   0,   0,   0,   5,   0,   6,   0,
    118,  97, 113,   4, 177, 154, 189, 187,
     25,   0,   0,   0,   1,   0,   1,   0,
    190, 200, 193, 173, 250,  55,  23, 142,
      1,   0,   7,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     21,   0,   0,   0,   2,   1,   0,   0,
     33,   0,   0,   0,   7,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     29,   0,   0,   0, 119,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
    117, 101,  95,  99, 111, 114, 101,  46,
     99,  97, 112, 110, 112,  58,  85, 110,
    114, 101,  97, 108,  67, 111, 114, 101,
     46,  79,  98, 106, 101,  99, 116,   0,
      0,   0,   0,   0,   1,   0,   1,   0,
      8,   0,   0,   0,   3,   0,   4,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   1,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     41,   0,   0,   0,  42,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     36,   0,   0,   0,   3,   0,   1,   0,
     48,   0,   0,   0,   2,   0,   1,   0,
      1,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   1,   0,   1,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     45,   0,   0,   0,  66,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     40,   0,   0,   0,   3,   0,   1,   0,
     52,   0,   0,   0,   2,   0,   1,   0,
    110,  97, 109, 101,   0,   0,   0,   0,
     12,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     12,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     97, 100, 100, 114, 101, 115, 115,   0,
      9,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      9,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0, }
};
::capnp::word const* const bp_bbbd9ab104716176 = b_bbbd9ab104716176.words;
#if !CAPNP_LITE
static const uint16_t m_bbbd9ab104716176[] = {1, 0};
static const uint16_t i_bbbd9ab104716176[] = {0, 1};
const ::capnp::_::RawSchema s_bbbd9ab104716176 = {
  0xbbbd9ab104716176, b_bbbd9ab104716176.words, 48, nullptr, m_bbbd9ab104716176,
  0, 2, i_bbbd9ab104716176, nullptr, nullptr, { &s_bbbd9ab104716176, nullptr, nullptr, 0, 0, nullptr }, false
};
#endif  // !CAPNP_LITE
static const ::capnp::_::AlignedData<34> b_bda606608274c0bd = {
  {   0,   0,   0,   0,   5,   0,   6,   0,
    189, 192, 116, 130,  96,   6, 166, 189,
     25,   0,   0,   0,   1,   0,   0,   0,
    190, 200, 193, 173, 250,  55,  23, 142,
      1,   0,   7,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     21,   0,   0,   0, 250,   0,   0,   0,
     33,   0,   0,   0,   7,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     29,   0,   0,   0,  63,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
    117, 101,  95,  99, 111, 114, 101,  46,
     99,  97, 112, 110, 112,  58,  85, 110,
    114, 101,  97, 108,  67, 111, 114, 101,
     46,  67, 108,  97, 115, 115,   0,   0,
      0,   0,   0,   0,   1,   0,   1,   0,
      4,   0,   0,   0,   3,   0,   4,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   1,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     13,   0,   0,   0,  74,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     12,   0,   0,   0,   3,   0,   1,   0,
     24,   0,   0,   0,   2,   0,   1,   0,
    116, 121, 112, 101,  78,  97, 109, 101,
      0,   0,   0,   0,   0,   0,   0,   0,
     12,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     12,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0, }
};
::capnp::word const* const bp_bda606608274c0bd = b_bda606608274c0bd.words;
#if !CAPNP_LITE
static const uint16_t m_bda606608274c0bd[] = {0};
static const uint16_t i_bda606608274c0bd[] = {0};
const ::capnp::_::RawSchema s_bda606608274c0bd = {
  0xbda606608274c0bd, b_bda606608274c0bd.words, 34, nullptr, m_bda606608274c0bd,
  0, 1, i_bda606608274c0bd, nullptr, nullptr, { &s_bda606608274c0bd, nullptr, nullptr, 0, 0, nullptr }, false
};
#endif  // !CAPNP_LITE
static const ::capnp::_::AlignedData<160> b_a53c5ce887c3c1e6 = {
  {   0,   0,   0,   0,   5,   0,   6,   0,
    230, 193, 195, 135, 232,  92,  60, 165,
     25,   0,   0,   0,   1,   0,   2,   0,
    190, 200, 193, 173, 250,  55,  23, 142,
      3,   0,   7,   0,   0,   0,   7,   0,
      1,   0,   0,   0,   0,   0,   0,   0,
     21,   0,   0,   0,  18,   1,   0,   0,
     37,   0,   0,   0,   7,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     33,   0,   0,   0, 255,   1,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
    117, 101,  95,  99, 111, 114, 101,  46,
     99,  97, 112, 110, 112,  58,  85, 110,
    114, 101,  97, 108,  67, 111, 114, 101,
     46,  65, 114, 103, 117, 109, 101, 110,
    116,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   1,   0,   1,   0,
     36,   0,   0,   0,   3,   0,   4,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   1,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
    237,   0,   0,   0,  50,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
    232,   0,   0,   0,   3,   0,   1,   0,
    244,   0,   0,   0,   2,   0,   1,   0,
      1,   0,   0,   0,   1,   0,   0,   0,
      0,   0,   1,   0,   1,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
    241,   0,   0,   0,  42,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
    236,   0,   0,   0,   3,   0,   1,   0,
    248,   0,   0,   0,   2,   0,   1,   0,
      2,   0, 255, 255,   0,   0,   0,   0,
      0,   0,   1,   0,   2,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
    245,   0,   0,   0,  82,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
    244,   0,   0,   0,   3,   0,   1,   0,
      0,   1,   0,   0,   2,   0,   1,   0,
      3,   0, 254, 255,   1,   0,   0,   0,
      0,   0,   1,   0,   3,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
    253,   0,   0,   0,  82,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
    252,   0,   0,   0,   3,   0,   1,   0,
      8,   1,   0,   0,   2,   0,   1,   0,
      4,   0, 253, 255,   1,   0,   0,   0,
      0,   0,   1,   0,   4,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      5,   1,   0,   0,  74,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      4,   1,   0,   0,   3,   0,   1,   0,
     16,   1,   0,   0,   2,   0,   1,   0,
      5,   0, 252, 255,   2,   0,   0,   0,
      0,   0,   1,   0,   5,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     13,   1,   0,   0,  74,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     12,   1,   0,   0,   3,   0,   1,   0,
     24,   1,   0,   0,   2,   0,   1,   0,
      6,   0, 251, 255,   1,   0,   0,   0,
      0,   0,   1,   0,   6,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     21,   1,   0,   0,  90,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     20,   1,   0,   0,   3,   0,   1,   0,
     32,   1,   0,   0,   2,   0,   1,   0,
      7,   0, 250, 255,   2,   0,   0,   0,
      0,   0,   1,   0,   7,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     29,   1,   0,   0,  58,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     24,   1,   0,   0,   3,   0,   1,   0,
     36,   1,   0,   0,   2,   0,   1,   0,
      8,   0, 249, 255,   1,   0,   0,   0,
      0,   0,   1,   0,   8,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     33,   1,   0,   0,  82,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     32,   1,   0,   0,   3,   0,   1,   0,
     44,   1,   0,   0,   2,   0,   1,   0,
     99, 108,  97, 115, 115,   0,   0,   0,
     16,   0,   0,   0,   0,   0,   0,   0,
    189, 192, 116, 130,  96,   6, 166, 189,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     16,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
    110,  97, 109, 101,   0,   0,   0,   0,
     12,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     12,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     98, 111, 111, 108,  86,  97, 108, 117,
    101,   0,   0,   0,   0,   0,   0,   0,
      1,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      1,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
    117, 105, 110, 116,  86,  97, 108, 117,
    101,   0,   0,   0,   0,   0,   0,   0,
      9,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      9,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
    105, 110, 116,  86,  97, 108, 117, 101,
      0,   0,   0,   0,   0,   0,   0,   0,
      5,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      5,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
    115, 116, 114,  86,  97, 108, 117, 101,
      0,   0,   0,   0,   0,   0,   0,   0,
     12,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     12,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
    102, 108, 111,  97, 116,  86,  97, 108,
    117, 101,   0,   0,   0,   0,   0,   0,
     11,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     11,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
    111,  98, 106, 101,  99, 116,   0,   0,
     16,   0,   0,   0,   0,   0,   0,   0,
    118,  97, 113,   4, 177, 154, 189, 187,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     16,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
    101, 110, 117, 109,  86,  97, 108, 117,
    101,   0,   0,   0,   0,   0,   0,   0,
      5,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      5,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0, }
};
::capnp::word const* const bp_a53c5ce887c3c1e6 = b_a53c5ce887c3c1e6.words;
#if !CAPNP_LITE
static const ::capnp::_::RawSchema* const d_a53c5ce887c3c1e6[] = {
  &s_bbbd9ab104716176,
  &s_bda606608274c0bd,
};
static const uint16_t m_a53c5ce887c3c1e6[] = {2, 0, 8, 6, 4, 1, 7, 5, 3};
static const uint16_t i_a53c5ce887c3c1e6[] = {2, 3, 4, 5, 6, 7, 8, 0, 1};
const ::capnp::_::RawSchema s_a53c5ce887c3c1e6 = {
  0xa53c5ce887c3c1e6, b_a53c5ce887c3c1e6.words, 160, d_a53c5ce887c3c1e6, m_a53c5ce887c3c1e6,
  2, 9, i_a53c5ce887c3c1e6, nullptr, nullptr, { &s_a53c5ce887c3c1e6, nullptr, nullptr, 0, 0, nullptr }, false
};
#endif  // !CAPNP_LITE
static const ::capnp::_::AlignedData<160> b_cdff00d120b52bc6 = {
  {   0,   0,   0,   0,   5,   0,   6,   0,
    198,  43, 181,  32, 209,   0, 255, 205,
     25,   0,   0,   0,   1,   0,   2,   0,
    190, 200, 193, 173, 250,  55,  23, 142,
      3,   0,   7,   0,   0,   0,   7,   0,
      1,   0,   0,   0,   0,   0,   0,   0,
     21,   0,   0,   0,  18,   1,   0,   0,
     37,   0,   0,   0,   7,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     33,   0,   0,   0, 255,   1,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
    117, 101,  95,  99, 111, 114, 101,  46,
     99,  97, 112, 110, 112,  58,  85, 110,
    114, 101,  97, 108,  67, 111, 114, 101,
     46,  80, 114, 111, 112, 101, 114, 116,
    121,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   1,   0,   1,   0,
     36,   0,   0,   0,   3,   0,   4,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   1,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
    237,   0,   0,   0,  50,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
    232,   0,   0,   0,   3,   0,   1,   0,
    244,   0,   0,   0,   2,   0,   1,   0,
      1,   0,   0,   0,   1,   0,   0,   0,
      0,   0,   1,   0,   1,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
    241,   0,   0,   0,  42,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
    236,   0,   0,   0,   3,   0,   1,   0,
    248,   0,   0,   0,   2,   0,   1,   0,
      2,   0, 255, 255,   0,   0,   0,   0,
      0,   0,   1,   0,   2,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
    245,   0,   0,   0,  82,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
    244,   0,   0,   0,   3,   0,   1,   0,
      0,   1,   0,   0,   2,   0,   1,   0,
      3,   0, 254, 255,   1,   0,   0,   0,
      0,   0,   1,   0,   3,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
    253,   0,   0,   0,  82,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
    252,   0,   0,   0,   3,   0,   1,   0,
      8,   1,   0,   0,   2,   0,   1,   0,
      4,   0, 253, 255,   1,   0,   0,   0,
      0,   0,   1,   0,   4,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      5,   1,   0,   0,  74,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      4,   1,   0,   0,   3,   0,   1,   0,
     16,   1,   0,   0,   2,   0,   1,   0,
      5,   0, 252, 255,   2,   0,   0,   0,
      0,   0,   1,   0,   5,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     13,   1,   0,   0,  74,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     12,   1,   0,   0,   3,   0,   1,   0,
     24,   1,   0,   0,   2,   0,   1,   0,
      6,   0, 251, 255,   1,   0,   0,   0,
      0,   0,   1,   0,   6,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     21,   1,   0,   0,  90,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     20,   1,   0,   0,   3,   0,   1,   0,
     32,   1,   0,   0,   2,   0,   1,   0,
      7,   0, 250, 255,   2,   0,   0,   0,
      0,   0,   1,   0,   7,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     29,   1,   0,   0,  58,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     24,   1,   0,   0,   3,   0,   1,   0,
     36,   1,   0,   0,   2,   0,   1,   0,
      8,   0, 249, 255,   1,   0,   0,   0,
      0,   0,   1,   0,   8,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     33,   1,   0,   0,  82,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     32,   1,   0,   0,   3,   0,   1,   0,
     44,   1,   0,   0,   2,   0,   1,   0,
     99, 108,  97, 115, 115,   0,   0,   0,
     16,   0,   0,   0,   0,   0,   0,   0,
    189, 192, 116, 130,  96,   6, 166, 189,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     16,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
    110,  97, 109, 101,   0,   0,   0,   0,
     12,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     12,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     98, 111, 111, 108,  86,  97, 108, 117,
    101,   0,   0,   0,   0,   0,   0,   0,
      1,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      1,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
    117, 105, 110, 116,  86,  97, 108, 117,
    101,   0,   0,   0,   0,   0,   0,   0,
      9,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      9,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
    105, 110, 116,  86,  97, 108, 117, 101,
      0,   0,   0,   0,   0,   0,   0,   0,
      5,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      5,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
    115, 116, 114,  86,  97, 108, 117, 101,
      0,   0,   0,   0,   0,   0,   0,   0,
     12,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     12,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
    102, 108, 111,  97, 116,  86,  97, 108,
    117, 101,   0,   0,   0,   0,   0,   0,
     11,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     11,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
    111,  98, 106, 101,  99, 116,   0,   0,
     16,   0,   0,   0,   0,   0,   0,   0,
    118,  97, 113,   4, 177, 154, 189, 187,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     16,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
    101, 110, 117, 109,  86,  97, 108, 117,
    101,   0,   0,   0,   0,   0,   0,   0,
      5,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      5,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0, }
};
::capnp::word const* const bp_cdff00d120b52bc6 = b_cdff00d120b52bc6.words;
#if !CAPNP_LITE
static const ::capnp::_::RawSchema* const d_cdff00d120b52bc6[] = {
  &s_bbbd9ab104716176,
  &s_bda606608274c0bd,
};
static const uint16_t m_cdff00d120b52bc6[] = {2, 0, 8, 6, 4, 1, 7, 5, 3};
static const uint16_t i_cdff00d120b52bc6[] = {2, 3, 4, 5, 6, 7, 8, 0, 1};
const ::capnp::_::RawSchema s_cdff00d120b52bc6 = {
  0xcdff00d120b52bc6, b_cdff00d120b52bc6.words, 160, d_cdff00d120b52bc6, m_cdff00d120b52bc6,
  2, 9, i_cdff00d120b52bc6, nullptr, nullptr, { &s_cdff00d120b52bc6, nullptr, nullptr, 0, 0, nullptr }, false
};
#endif  // !CAPNP_LITE
static const ::capnp::_::AlignedData<33> b_8f2d77d834a5e736 = {
  {   0,   0,   0,   0,   5,   0,   6,   0,
     54, 231, 165,  52, 216, 119,  45, 143,
     25,   0,   0,   0,   1,   0,   0,   0,
    190, 200, 193, 173, 250,  55,  23, 142,
      1,   0,   7,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     21,   0,   0,   0,   2,   1,   0,   0,
     33,   0,   0,   0,   7,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     29,   0,   0,   0,  63,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
    117, 101,  95,  99, 111, 114, 101,  46,
     99,  97, 112, 110, 112,  58,  85, 110,
    114, 101,  97, 108,  67, 111, 114, 101,
     46,  77, 101, 116, 104, 111, 100,   0,
      0,   0,   0,   0,   1,   0,   1,   0,
      4,   0,   0,   0,   3,   0,   4,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   1,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     13,   0,   0,   0,  42,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      8,   0,   0,   0,   3,   0,   1,   0,
     20,   0,   0,   0,   2,   0,   1,   0,
    110,  97, 109, 101,   0,   0,   0,   0,
     12,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     12,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0, }
};
::capnp::word const* const bp_8f2d77d834a5e736 = b_8f2d77d834a5e736.words;
#if !CAPNP_LITE
static const uint16_t m_8f2d77d834a5e736[] = {0};
static const uint16_t i_8f2d77d834a5e736[] = {0};
const ::capnp::_::RawSchema s_8f2d77d834a5e736 = {
  0x8f2d77d834a5e736, b_8f2d77d834a5e736.words, 33, nullptr, m_8f2d77d834a5e736,
  0, 1, i_8f2d77d834a5e736, nullptr, nullptr, { &s_8f2d77d834a5e736, nullptr, nullptr, 0, 0, nullptr }, false
};
#endif  // !CAPNP_LITE
static const ::capnp::_::AlignedData<30> b_a46e9e12cd75e297 = {
  {   0,   0,   0,   0,   5,   0,   6,   0,
    151, 226, 117, 205,  18, 158, 110, 164,
     25,   0,   0,   0,   3,   0,   0,   0,
    190, 200, 193, 173, 250,  55,  23, 142,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     21,   0,   0,   0,  66,   1,   0,   0,
     37,   0,   0,   0,   7,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     33,   0,   0,   0,  71,   0,   0,   0,
     73,   0,   0,   0,   7,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
    117, 101,  95,  99, 111, 114, 101,  46,
     99,  97, 112, 110, 112,  58,  85, 110,
    114, 101,  97, 108,  67, 111, 114, 101,
     46,  77, 101, 116, 104, 111, 100,  67,
     97, 108, 108,  97,  98, 108, 101,   0,
      0,   0,   0,   0,   1,   0,   1,   0,
      4,   0,   0,   0,   3,   0,   5,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
    111, 163,  28,  39, 195, 204,  83, 136,
    109, 223,  57, 101,  28, 220,  54, 168,
     17,   0,   0,   0,  58,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      5,   0,   0,   0,   7,   0,   0,   0,
    105, 110, 118, 111, 107, 101,   0,   0,
      0,   0,   0,   0,   0,   0,   1,   0,
      0,   0,   0,   0,   1,   0,   1,   0, }
};
::capnp::word const* const bp_a46e9e12cd75e297 = b_a46e9e12cd75e297.words;
#if !CAPNP_LITE
static const ::capnp::_::RawSchema* const d_a46e9e12cd75e297[] = {
  &s_8853ccc3271ca36f,
  &s_a836dc1c6539df6d,
};
static const uint16_t m_a46e9e12cd75e297[] = {0};
const ::capnp::_::RawSchema s_a46e9e12cd75e297 = {
  0xa46e9e12cd75e297, b_a46e9e12cd75e297.words, 30, d_a46e9e12cd75e297, m_a46e9e12cd75e297,
  2, 1, nullptr, nullptr, nullptr, { &s_a46e9e12cd75e297, nullptr, nullptr, 0, 0, nullptr }, false
};
#endif  // !CAPNP_LITE
static const ::capnp::_::AlignedData<35> b_8853ccc3271ca36f = {
  {   0,   0,   0,   0,   5,   0,   6,   0,
    111, 163,  28,  39, 195, 204,  83, 136,
     40,   0,   0,   0,   1,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      1,   0,   7,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     21,   0,   0,   0, 178,   1,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     37,   0,   0,   0,  63,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
    117, 101,  95,  99, 111, 114, 101,  46,
     99,  97, 112, 110, 112,  58,  85, 110,
    114, 101,  97, 108,  67, 111, 114, 101,
     46,  77, 101, 116, 104, 111, 100,  67,
     97, 108, 108,  97,  98, 108, 101,  46,
    105, 110, 118, 111, 107, 101,  36,  80,
     97, 114,  97, 109, 115,   0,   0,   0,
      4,   0,   0,   0,   3,   0,   4,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   1,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     13,   0,   0,   0,  58,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      8,   0,   0,   0,   3,   0,   1,   0,
     20,   0,   0,   0,   2,   0,   1,   0,
    109, 101, 116, 104, 111, 100,   0,   0,
     16,   0,   0,   0,   0,   0,   0,   0,
     54, 231, 165,  52, 216, 119,  45, 143,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     16,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0, }
};
::capnp::word const* const bp_8853ccc3271ca36f = b_8853ccc3271ca36f.words;
#if !CAPNP_LITE
static const ::capnp::_::RawSchema* const d_8853ccc3271ca36f[] = {
  &s_8f2d77d834a5e736,
};
static const uint16_t m_8853ccc3271ca36f[] = {0};
static const uint16_t i_8853ccc3271ca36f[] = {0};
const ::capnp::_::RawSchema s_8853ccc3271ca36f = {
  0x8853ccc3271ca36f, b_8853ccc3271ca36f.words, 35, d_8853ccc3271ca36f, m_8853ccc3271ca36f,
  1, 1, i_8853ccc3271ca36f, nullptr, nullptr, { &s_8853ccc3271ca36f, nullptr, nullptr, 0, 0, nullptr }, false
};
#endif  // !CAPNP_LITE
static const ::capnp::_::AlignedData<19> b_a836dc1c6539df6d = {
  {   0,   0,   0,   0,   5,   0,   6,   0,
    109, 223,  57, 101,  28, 220,  54, 168,
     40,   0,   0,   0,   1,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   7,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     21,   0,   0,   0, 186,   1,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
    117, 101,  95,  99, 111, 114, 101,  46,
     99,  97, 112, 110, 112,  58,  85, 110,
    114, 101,  97, 108,  67, 111, 114, 101,
     46,  77, 101, 116, 104, 111, 100,  67,
     97, 108, 108,  97,  98, 108, 101,  46,
    105, 110, 118, 111, 107, 101,  36,  82,
    101, 115, 117, 108, 116, 115,   0,   0, }
};
::capnp::word const* const bp_a836dc1c6539df6d = b_a836dc1c6539df6d.words;
#if !CAPNP_LITE
const ::capnp::_::RawSchema s_a836dc1c6539df6d = {
  0xa836dc1c6539df6d, b_a836dc1c6539df6d.words, 19, nullptr, nullptr,
  0, 0, nullptr, nullptr, nullptr, { &s_a836dc1c6539df6d, nullptr, nullptr, 0, 0, nullptr }, false
};
#endif  // !CAPNP_LITE
static const ::capnp::_::AlignedData<31> b_9e7b7ff32f28cfff = {
  {   0,   0,   0,   0,   5,   0,   6,   0,
    255, 207,  40,  47, 243, 127, 123, 158,
     25,   0,   0,   0,   3,   0,   0,   0,
    190, 200, 193, 173, 250,  55,  23, 142,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     21,   0,   0,   0,  82,   1,   0,   0,
     41,   0,   0,   0,   7,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     37,   0,   0,   0,  71,   0,   0,   0,
     77,   0,   0,   0,   7,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
    117, 101,  95,  99, 111, 114, 101,  46,
     99,  97, 112, 110, 112,  58,  85, 110,
    114, 101,  97, 108,  67, 111, 114, 101,
     46,  68, 101, 108, 101, 103,  97, 116,
    101,  67,  97, 108, 108,  98,  97,  99,
    107,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   1,   0,   1,   0,
      4,   0,   0,   0,   3,   0,   5,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
    207,  77,  11, 227, 165,  45, 175, 133,
     35,  64, 249, 178, 116,  39,   4, 132,
     17,   0,   0,   0,  58,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      5,   0,   0,   0,   7,   0,   0,   0,
    111, 110,  67,  97, 108, 108,   0,   0,
      0,   0,   0,   0,   0,   0,   1,   0,
      0,   0,   0,   0,   1,   0,   1,   0, }
};
::capnp::word const* const bp_9e7b7ff32f28cfff = b_9e7b7ff32f28cfff.words;
#if !CAPNP_LITE
static const ::capnp::_::RawSchema* const d_9e7b7ff32f28cfff[] = {
  &s_84042774b2f94023,
  &s_85af2da5e30b4dcf,
};
static const uint16_t m_9e7b7ff32f28cfff[] = {0};
const ::capnp::_::RawSchema s_9e7b7ff32f28cfff = {
  0x9e7b7ff32f28cfff, b_9e7b7ff32f28cfff.words, 31, d_9e7b7ff32f28cfff, m_9e7b7ff32f28cfff,
  2, 1, nullptr, nullptr, nullptr, { &s_9e7b7ff32f28cfff, nullptr, nullptr, 0, 0, nullptr }, false
};
#endif  // !CAPNP_LITE
static const ::capnp::_::AlignedData<54> b_85af2da5e30b4dcf = {
  {   0,   0,   0,   0,   5,   0,   6,   0,
    207,  77,  11, 227, 165,  45, 175, 133,
     42,   0,   0,   0,   1,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      2,   0,   7,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     21,   0,   0,   0, 194,   1,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     37,   0,   0,   0, 119,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
    117, 101,  95,  99, 111, 114, 101,  46,
     99,  97, 112, 110, 112,  58,  85, 110,
    114, 101,  97, 108,  67, 111, 114, 101,
     46,  68, 101, 108, 101, 103,  97, 116,
    101,  67,  97, 108, 108,  98,  97,  99,
    107,  46, 111, 110,  67,  97, 108, 108,
     36,  80,  97, 114,  97, 109, 115,   0,
      8,   0,   0,   0,   3,   0,   4,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   1,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     41,   0,   0,   0,  58,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     36,   0,   0,   0,   3,   0,   1,   0,
     48,   0,   0,   0,   2,   0,   1,   0,
      1,   0,   0,   0,   1,   0,   0,   0,
      0,   0,   1,   0,   1,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     45,   0,   0,   0,  58,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     40,   0,   0,   0,   3,   0,   1,   0,
     68,   0,   0,   0,   2,   0,   1,   0,
    111,  98, 106, 101,  99, 116,   0,   0,
     16,   0,   0,   0,   0,   0,   0,   0,
    118,  97, 113,   4, 177, 154, 189, 187,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     16,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
    112,  97, 114,  97, 109, 115,   0,   0,
     14,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   3,   0,   1,   0,
     16,   0,   0,   0,   0,   0,   0,   0,
    230, 193, 195, 135, 232,  92,  60, 165,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     14,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0, }
};
::capnp::word const* const bp_85af2da5e30b4dcf = b_85af2da5e30b4dcf.words;
#if !CAPNP_LITE
static const ::capnp::_::RawSchema* const d_85af2da5e30b4dcf[] = {
  &s_a53c5ce887c3c1e6,
  &s_bbbd9ab104716176,
};
static const uint16_t m_85af2da5e30b4dcf[] = {0, 1};
static const uint16_t i_85af2da5e30b4dcf[] = {0, 1};
const ::capnp::_::RawSchema s_85af2da5e30b4dcf = {
  0x85af2da5e30b4dcf, b_85af2da5e30b4dcf.words, 54, d_85af2da5e30b4dcf, m_85af2da5e30b4dcf,
  2, 2, i_85af2da5e30b4dcf, nullptr, nullptr, { &s_85af2da5e30b4dcf, nullptr, nullptr, 0, 0, nullptr }, false
};
#endif  // !CAPNP_LITE
static const ::capnp::_::AlignedData<20> b_84042774b2f94023 = {
  {   0,   0,   0,   0,   5,   0,   6,   0,
     35,  64, 249, 178, 116,  39,   4, 132,
     42,   0,   0,   0,   1,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   7,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     21,   0,   0,   0, 202,   1,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
    117, 101,  95,  99, 111, 114, 101,  46,
     99,  97, 112, 110, 112,  58,  85, 110,
    114, 101,  97, 108,  67, 111, 114, 101,
     46,  68, 101, 108, 101, 103,  97, 116,
    101,  67,  97, 108, 108,  98,  97,  99,
    107,  46, 111, 110,  67,  97, 108, 108,
     36,  82, 101, 115, 117, 108, 116, 115,
      0,   0,   0,   0,   0,   0,   0,   0, }
};
::capnp::word const* const bp_84042774b2f94023 = b_84042774b2f94023.words;
#if !CAPNP_LITE
const ::capnp::_::RawSchema s_84042774b2f94023 = {
  0x84042774b2f94023, b_84042774b2f94023.words, 20, nullptr, nullptr,
  0, 0, nullptr, nullptr, nullptr, { &s_84042774b2f94023, nullptr, nullptr, 0, 0, nullptr }, false
};
#endif  // !CAPNP_LITE
static const ::capnp::_::AlignedData<99> b_e93028909ce18c87 = {
  {   0,   0,   0,   0,   5,   0,   6,   0,
    135, 140, 225, 156, 144,  40,  48, 233,
     25,   0,   0,   0,   1,   0,   1,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      4,   0,   7,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     21,   0,   0,   0,  82,   1,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     33,   0,   0,   0,  31,   1,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
    117, 101,  95,  99, 111, 114, 101,  46,
     99,  97, 112, 110, 112,  58,  85, 110,
    114, 101,  97, 108,  67, 111, 114, 101,
     46, 110, 101, 119,  79,  98, 106, 101,
     99, 116,  36,  80,  97, 114,  97, 109,
    115,   0,   0,   0,   0,   0,   0,   0,
     20,   0,   0,   0,   3,   0,   4,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   1,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
    125,   0,   0,   0,  50,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
    120,   0,   0,   0,   3,   0,   1,   0,
    132,   0,   0,   0,   2,   0,   1,   0,
      1,   0,   0,   0,   1,   0,   0,   0,
      0,   0,   1,   0,   1,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
    129,   0,   0,   0,  50,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
    124,   0,   0,   0,   3,   0,   1,   0,
    136,   0,   0,   0,   2,   0,   1,   0,
      2,   0,   0,   0,   2,   0,   0,   0,
      0,   0,   1,   0,   2,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
    133,   0,   0,   0,  66,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
    128,   0,   0,   0,   3,   0,   1,   0,
    140,   0,   0,   0,   2,   0,   1,   0,
      3,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   1,   0,   3,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
    137,   0,   0,   0,  50,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
    132,   0,   0,   0,   3,   0,   1,   0,
    144,   0,   0,   0,   2,   0,   1,   0,
      4,   0,   0,   0,   3,   0,   0,   0,
      0,   0,   1,   0,   4,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
    141,   0,   0,   0, 114,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
    140,   0,   0,   0,   3,   0,   1,   0,
    168,   0,   0,   0,   2,   0,   1,   0,
    111, 117, 116, 101, 114,   0,   0,   0,
     16,   0,   0,   0,   0,   0,   0,   0,
    118,  97, 113,   4, 177, 154, 189, 187,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     16,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     99, 108,  97, 115, 115,   0,   0,   0,
     16,   0,   0,   0,   0,   0,   0,   0,
    189, 192, 116, 130,  96,   6, 166, 189,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     16,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
    111,  98, 106,  78,  97, 109, 101,   0,
     12,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     12,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
    102, 108,  97, 103, 115,   0,   0,   0,
      9,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      9,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     99, 111, 110, 115, 116, 114, 117,  99,
    116,  65, 114, 103, 115,   0,   0,   0,
     14,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   3,   0,   1,   0,
     16,   0,   0,   0,   0,   0,   0,   0,
    230, 193, 195, 135, 232,  92,  60, 165,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     14,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0, }
};
::capnp::word const* const bp_e93028909ce18c87 = b_e93028909ce18c87.words;
#if !CAPNP_LITE
static const ::capnp::_::RawSchema* const d_e93028909ce18c87[] = {
  &s_a53c5ce887c3c1e6,
  &s_bbbd9ab104716176,
  &s_bda606608274c0bd,
};
static const uint16_t m_e93028909ce18c87[] = {1, 4, 3, 2, 0};
static const uint16_t i_e93028909ce18c87[] = {0, 1, 2, 3, 4};
const ::capnp::_::RawSchema s_e93028909ce18c87 = {
  0xe93028909ce18c87, b_e93028909ce18c87.words, 99, d_e93028909ce18c87, m_e93028909ce18c87,
  3, 5, i_e93028909ce18c87, nullptr, nullptr, { &s_e93028909ce18c87, nullptr, nullptr, 0, 0, nullptr }, false
};
#endif  // !CAPNP_LITE
static const ::capnp::_::AlignedData<34> b_e8ae732560511590 = {
  {   0,   0,   0,   0,   5,   0,   6,   0,
    144,  21,  81,  96,  37, 115, 174, 232,
     25,   0,   0,   0,   1,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      1,   0,   7,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     21,   0,   0,   0,  90,   1,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     33,   0,   0,   0,  63,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
    117, 101,  95,  99, 111, 114, 101,  46,
     99,  97, 112, 110, 112,  58,  85, 110,
    114, 101,  97, 108,  67, 111, 114, 101,
     46, 110, 101, 119,  79,  98, 106, 101,
     99, 116,  36,  82, 101, 115, 117, 108,
    116, 115,   0,   0,   0,   0,   0,   0,
      4,   0,   0,   0,   3,   0,   4,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   1,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     13,   0,   0,   0,  58,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      8,   0,   0,   0,   3,   0,   1,   0,
     20,   0,   0,   0,   2,   0,   1,   0,
    111,  98, 106, 101,  99, 116,   0,   0,
     16,   0,   0,   0,   0,   0,   0,   0,
    118,  97, 113,   4, 177, 154, 189, 187,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     16,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0, }
};
::capnp::word const* const bp_e8ae732560511590 = b_e8ae732560511590.words;
#if !CAPNP_LITE
static const ::capnp::_::RawSchema* const d_e8ae732560511590[] = {
  &s_bbbd9ab104716176,
};
static const uint16_t m_e8ae732560511590[] = {0};
static const uint16_t i_e8ae732560511590[] = {0};
const ::capnp::_::RawSchema s_e8ae732560511590 = {
  0xe8ae732560511590, b_e8ae732560511590.words, 34, d_e8ae732560511590, m_e8ae732560511590,
  1, 1, i_e8ae732560511590, nullptr, nullptr, { &s_e8ae732560511590, nullptr, nullptr, 0, 0, nullptr }, false
};
#endif  // !CAPNP_LITE
static const ::capnp::_::AlignedData<34> b_d83f631716ef1a45 = {
  {   0,   0,   0,   0,   5,   0,   6,   0,
     69,  26, 239,  22,  23,  99,  63, 216,
     25,   0,   0,   0,   1,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      1,   0,   7,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     21,   0,   0,   0, 114,   1,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     33,   0,   0,   0,  63,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
    117, 101,  95,  99, 111, 114, 101,  46,
     99,  97, 112, 110, 112,  58,  85, 110,
    114, 101,  97, 108,  67, 111, 114, 101,
     46, 100, 101, 115, 116, 114, 111, 121,
     79,  98, 106, 101,  99, 116,  36,  80,
     97, 114,  97, 109, 115,   0,   0,   0,
      4,   0,   0,   0,   3,   0,   4,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   1,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     13,   0,   0,   0,  50,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      8,   0,   0,   0,   3,   0,   1,   0,
     20,   0,   0,   0,   2,   0,   1,   0,
    111, 117, 116, 101, 114,   0,   0,   0,
     16,   0,   0,   0,   0,   0,   0,   0,
    118,  97, 113,   4, 177, 154, 189, 187,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     16,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0, }
};
::capnp::word const* const bp_d83f631716ef1a45 = b_d83f631716ef1a45.words;
#if !CAPNP_LITE
static const ::capnp::_::RawSchema* const d_d83f631716ef1a45[] = {
  &s_bbbd9ab104716176,
};
static const uint16_t m_d83f631716ef1a45[] = {0};
static const uint16_t i_d83f631716ef1a45[] = {0};
const ::capnp::_::RawSchema s_d83f631716ef1a45 = {
  0xd83f631716ef1a45, b_d83f631716ef1a45.words, 34, d_d83f631716ef1a45, m_d83f631716ef1a45,
  1, 1, i_d83f631716ef1a45, nullptr, nullptr, { &s_d83f631716ef1a45, nullptr, nullptr, 0, 0, nullptr }, false
};
#endif  // !CAPNP_LITE
static const ::capnp::_::AlignedData<34> b_9b368dd4d1605190 = {
  {   0,   0,   0,   0,   5,   0,   6,   0,
    144,  81,  96, 209, 212, 141,  54, 155,
     25,   0,   0,   0,   1,   0,   1,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   7,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     21,   0,   0,   0, 122,   1,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     33,   0,   0,   0,  63,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
    117, 101,  95,  99, 111, 114, 101,  46,
     99,  97, 112, 110, 112,  58,  85, 110,
    114, 101,  97, 108,  67, 111, 114, 101,
     46, 100, 101, 115, 116, 114, 111, 121,
     79,  98, 106, 101,  99, 116,  36,  82,
    101, 115, 117, 108, 116, 115,   0,   0,
      4,   0,   0,   0,   3,   0,   4,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   1,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     13,   0,   0,   0,  58,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      8,   0,   0,   0,   3,   0,   1,   0,
     20,   0,   0,   0,   2,   0,   1,   0,
    114, 101, 115, 117, 108, 116,   0,   0,
      1,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      1,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0, }
};
::capnp::word const* const bp_9b368dd4d1605190 = b_9b368dd4d1605190.words;
#if !CAPNP_LITE
static const uint16_t m_9b368dd4d1605190[] = {0};
static const uint16_t i_9b368dd4d1605190[] = {0};
const ::capnp::_::RawSchema s_9b368dd4d1605190 = {
  0x9b368dd4d1605190, b_9b368dd4d1605190.words, 34, nullptr, m_9b368dd4d1605190,
  0, 1, i_9b368dd4d1605190, nullptr, nullptr, { &s_9b368dd4d1605190, nullptr, nullptr, 0, 0, nullptr }, false
};
#endif  // !CAPNP_LITE
static const ::capnp::_::AlignedData<100> b_fb878edbaf7b8288 = {
  {   0,   0,   0,   0,   5,   0,   6,   0,
    136, 130, 123, 175, 219, 142, 135, 251,
     25,   0,   0,   0,   1,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      5,   0,   7,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     21,   0,   0,   0, 106,   1,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     33,   0,   0,   0,  31,   1,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
    117, 101,  95,  99, 111, 114, 101,  46,
     99,  97, 112, 110, 112,  58,  85, 110,
    114, 101,  97, 108,  67, 111, 114, 101,
     46,  99,  97, 108, 108,  70, 117, 110,
     99, 116, 105, 111, 110,  36,  80,  97,
    114,  97, 109, 115,   0,   0,   0,   0,
     20,   0,   0,   0,   3,   0,   4,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   1,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
    125,   0,   0,   0,  50,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
    120,   0,   0,   0,   3,   0,   1,   0,
    132,   0,   0,   0,   2,   0,   1,   0,
      1,   0,   0,   0,   1,   0,   0,   0,
      0,   0,   1,   0,   1,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
    129,   0,   0,   0,  90,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
    128,   0,   0,   0,   3,   0,   1,   0,
    140,   0,   0,   0,   2,   0,   1,   0,
      2,   0,   0,   0,   2,   0,   0,   0,
      0,   0,   1,   0,   2,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
    137,   0,   0,   0,  50,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
    132,   0,   0,   0,   3,   0,   1,   0,
    144,   0,   0,   0,   2,   0,   1,   0,
      3,   0,   0,   0,   3,   0,   0,   0,
      0,   0,   1,   0,   3,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
    141,   0,   0,   0,  74,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
    140,   0,   0,   0,   3,   0,   1,   0,
    152,   0,   0,   0,   2,   0,   1,   0,
      4,   0,   0,   0,   4,   0,   0,   0,
      0,   0,   1,   0,   4,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
    149,   0,   0,   0,  58,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
    144,   0,   0,   0,   3,   0,   1,   0,
    172,   0,   0,   0,   2,   0,   1,   0,
    111, 117, 116, 101, 114,   0,   0,   0,
     16,   0,   0,   0,   0,   0,   0,   0,
    118,  97, 113,   4, 177, 154, 189, 187,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     16,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     99,  97, 108, 108,  79,  98, 106, 101,
     99, 116,   0,   0,   0,   0,   0,   0,
     16,   0,   0,   0,   0,   0,   0,   0,
    118,  97, 113,   4, 177, 154, 189, 187,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     16,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     99, 108,  97, 115, 115,   0,   0,   0,
     16,   0,   0,   0,   0,   0,   0,   0,
    189, 192, 116, 130,  96,   6, 166, 189,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     16,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
    102, 117, 110,  99,  78,  97, 109, 101,
      0,   0,   0,   0,   0,   0,   0,   0,
     12,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     12,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
    112,  97, 114,  97, 109, 115,   0,   0,
     14,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   3,   0,   1,   0,
     16,   0,   0,   0,   0,   0,   0,   0,
    230, 193, 195, 135, 232,  92,  60, 165,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     14,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0, }
};
::capnp::word const* const bp_fb878edbaf7b8288 = b_fb878edbaf7b8288.words;
#if !CAPNP_LITE
static const ::capnp::_::RawSchema* const d_fb878edbaf7b8288[] = {
  &s_a53c5ce887c3c1e6,
  &s_bbbd9ab104716176,
  &s_bda606608274c0bd,
};
static const uint16_t m_fb878edbaf7b8288[] = {1, 2, 3, 0, 4};
static const uint16_t i_fb878edbaf7b8288[] = {0, 1, 2, 3, 4};
const ::capnp::_::RawSchema s_fb878edbaf7b8288 = {
  0xfb878edbaf7b8288, b_fb878edbaf7b8288.words, 100, d_fb878edbaf7b8288, m_fb878edbaf7b8288,
  3, 5, i_fb878edbaf7b8288, nullptr, nullptr, { &s_fb878edbaf7b8288, nullptr, nullptr, 0, 0, nullptr }, false
};
#endif  // !CAPNP_LITE
static const ::capnp::_::AlignedData<54> b_c1e269cbbf7a7e86 = {
  {   0,   0,   0,   0,   5,   0,   6,   0,
    134, 126, 122, 191, 203, 105, 226, 193,
     25,   0,   0,   0,   1,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      2,   0,   7,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     21,   0,   0,   0, 114,   1,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     33,   0,   0,   0, 119,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
    117, 101,  95,  99, 111, 114, 101,  46,
     99,  97, 112, 110, 112,  58,  85, 110,
    114, 101,  97, 108,  67, 111, 114, 101,
     46,  99,  97, 108, 108,  70, 117, 110,
     99, 116, 105, 111, 110,  36,  82, 101,
    115, 117, 108, 116, 115,   0,   0,   0,
      8,   0,   0,   0,   3,   0,   4,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   1,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     41,   0,   0,   0,  58,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     36,   0,   0,   0,   3,   0,   1,   0,
     48,   0,   0,   0,   2,   0,   1,   0,
      1,   0,   0,   0,   1,   0,   0,   0,
      0,   0,   1,   0,   1,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     45,   0,   0,   0,  82,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     44,   0,   0,   0,   3,   0,   1,   0,
     72,   0,   0,   0,   2,   0,   1,   0,
    114, 101, 116, 117, 114, 110,   0,   0,
     16,   0,   0,   0,   0,   0,   0,   0,
    230, 193, 195, 135, 232,  92,  60, 165,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     16,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
    111, 117, 116,  80,  97, 114,  97, 109,
    115,   0,   0,   0,   0,   0,   0,   0,
     14,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   3,   0,   1,   0,
     16,   0,   0,   0,   0,   0,   0,   0,
    230, 193, 195, 135, 232,  92,  60, 165,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     14,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0, }
};
::capnp::word const* const bp_c1e269cbbf7a7e86 = b_c1e269cbbf7a7e86.words;
#if !CAPNP_LITE
static const ::capnp::_::RawSchema* const d_c1e269cbbf7a7e86[] = {
  &s_a53c5ce887c3c1e6,
};
static const uint16_t m_c1e269cbbf7a7e86[] = {1, 0};
static const uint16_t i_c1e269cbbf7a7e86[] = {0, 1};
const ::capnp::_::RawSchema s_c1e269cbbf7a7e86 = {
  0xc1e269cbbf7a7e86, b_c1e269cbbf7a7e86.words, 54, d_c1e269cbbf7a7e86, m_c1e269cbbf7a7e86,
  1, 2, i_c1e269cbbf7a7e86, nullptr, nullptr, { &s_c1e269cbbf7a7e86, nullptr, nullptr, 0, 0, nullptr }, false
};
#endif  // !CAPNP_LITE
static const ::capnp::_::AlignedData<70> b_d78410e4cefcb090 = {
  {   0,   0,   0,   0,   5,   0,   6,   0,
    144, 176, 252, 206, 228,  16, 132, 215,
     25,   0,   0,   0,   1,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      3,   0,   7,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     21,   0,   0,   0, 154,   1,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     37,   0,   0,   0, 175,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
    117, 101,  95,  99, 111, 114, 101,  46,
     99,  97, 112, 110, 112,  58,  85, 110,
    114, 101,  97, 108,  67, 111, 114, 101,
     46,  99,  97, 108, 108,  83, 116,  97,
    116, 105,  99,  70, 117, 110,  99, 116,
    105, 111, 110,  36,  80,  97, 114,  97,
    109, 115,   0,   0,   0,   0,   0,   0,
     12,   0,   0,   0,   3,   0,   4,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   1,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     69,   0,   0,   0,  50,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     64,   0,   0,   0,   3,   0,   1,   0,
     76,   0,   0,   0,   2,   0,   1,   0,
      1,   0,   0,   0,   1,   0,   0,   0,
      0,   0,   1,   0,   1,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     73,   0,   0,   0,  74,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     72,   0,   0,   0,   3,   0,   1,   0,
     84,   0,   0,   0,   2,   0,   1,   0,
      2,   0,   0,   0,   2,   0,   0,   0,
      0,   0,   1,   0,   2,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     81,   0,   0,   0,  58,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     76,   0,   0,   0,   3,   0,   1,   0,
    104,   0,   0,   0,   2,   0,   1,   0,
     99, 108,  97, 115, 115,   0,   0,   0,
     16,   0,   0,   0,   0,   0,   0,   0,
    189, 192, 116, 130,  96,   6, 166, 189,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     16,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
    102, 117, 110,  99,  78,  97, 109, 101,
      0,   0,   0,   0,   0,   0,   0,   0,
     12,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     12,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
    112,  97, 114,  97, 109, 115,   0,   0,
     14,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   3,   0,   1,   0,
     16,   0,   0,   0,   0,   0,   0,   0,
    230, 193, 195, 135, 232,  92,  60, 165,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     14,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0, }
};
::capnp::word const* const bp_d78410e4cefcb090 = b_d78410e4cefcb090.words;
#if !CAPNP_LITE
static const ::capnp::_::RawSchema* const d_d78410e4cefcb090[] = {
  &s_a53c5ce887c3c1e6,
  &s_bda606608274c0bd,
};
static const uint16_t m_d78410e4cefcb090[] = {0, 1, 2};
static const uint16_t i_d78410e4cefcb090[] = {0, 1, 2};
const ::capnp::_::RawSchema s_d78410e4cefcb090 = {
  0xd78410e4cefcb090, b_d78410e4cefcb090.words, 70, d_d78410e4cefcb090, m_d78410e4cefcb090,
  2, 3, i_d78410e4cefcb090, nullptr, nullptr, { &s_d78410e4cefcb090, nullptr, nullptr, 0, 0, nullptr }, false
};
#endif  // !CAPNP_LITE
static const ::capnp::_::AlignedData<55> b_e874d7934c0342a9 = {
  {   0,   0,   0,   0,   5,   0,   6,   0,
    169,  66,   3,  76, 147, 215, 116, 232,
     25,   0,   0,   0,   1,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      2,   0,   7,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     21,   0,   0,   0, 162,   1,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     37,   0,   0,   0, 119,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
    117, 101,  95,  99, 111, 114, 101,  46,
     99,  97, 112, 110, 112,  58,  85, 110,
    114, 101,  97, 108,  67, 111, 114, 101,
     46,  99,  97, 108, 108,  83, 116,  97,
    116, 105,  99,  70, 117, 110,  99, 116,
    105, 111, 110,  36,  82, 101, 115, 117,
    108, 116, 115,   0,   0,   0,   0,   0,
      8,   0,   0,   0,   3,   0,   4,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   1,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     41,   0,   0,   0,  58,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     36,   0,   0,   0,   3,   0,   1,   0,
     48,   0,   0,   0,   2,   0,   1,   0,
      1,   0,   0,   0,   1,   0,   0,   0,
      0,   0,   1,   0,   1,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     45,   0,   0,   0,  82,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     44,   0,   0,   0,   3,   0,   1,   0,
     72,   0,   0,   0,   2,   0,   1,   0,
    114, 101, 116, 117, 114, 110,   0,   0,
     16,   0,   0,   0,   0,   0,   0,   0,
    230, 193, 195, 135, 232,  92,  60, 165,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     16,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
    111, 117, 116,  80,  97, 114,  97, 109,
    115,   0,   0,   0,   0,   0,   0,   0,
     14,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   3,   0,   1,   0,
     16,   0,   0,   0,   0,   0,   0,   0,
    230, 193, 195, 135, 232,  92,  60, 165,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     14,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0, }
};
::capnp::word const* const bp_e874d7934c0342a9 = b_e874d7934c0342a9.words;
#if !CAPNP_LITE
static const ::capnp::_::RawSchema* const d_e874d7934c0342a9[] = {
  &s_a53c5ce887c3c1e6,
};
static const uint16_t m_e874d7934c0342a9[] = {1, 0};
static const uint16_t i_e874d7934c0342a9[] = {0, 1};
const ::capnp::_::RawSchema s_e874d7934c0342a9 = {
  0xe874d7934c0342a9, b_e874d7934c0342a9.words, 55, d_e874d7934c0342a9, m_e874d7934c0342a9,
  1, 2, i_e874d7934c0342a9, nullptr, nullptr, { &s_e874d7934c0342a9, nullptr, nullptr, 0, 0, nullptr }, false
};
#endif  // !CAPNP_LITE
static const ::capnp::_::AlignedData<34> b_ed1a745952b2ef0f = {
  {   0,   0,   0,   0,   5,   0,   6,   0,
     15, 239, 178,  82,  89, 116,  26, 237,
     25,   0,   0,   0,   1,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      1,   0,   7,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     21,   0,   0,   0,  82,   1,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     33,   0,   0,   0,  63,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
    117, 101,  95,  99, 111, 114, 101,  46,
     99,  97, 112, 110, 112,  58,  85, 110,
    114, 101,  97, 108,  67, 111, 114, 101,
     46, 102, 105, 110, 100,  67, 108,  97,
    115, 115,  36,  80,  97, 114,  97, 109,
    115,   0,   0,   0,   0,   0,   0,   0,
      4,   0,   0,   0,   3,   0,   4,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   1,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     13,   0,   0,   0,  50,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      8,   0,   0,   0,   3,   0,   1,   0,
     20,   0,   0,   0,   2,   0,   1,   0,
     99, 108,  97, 115, 115,   0,   0,   0,
     16,   0,   0,   0,   0,   0,   0,   0,
    189, 192, 116, 130,  96,   6, 166, 189,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     16,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0, }
};
::capnp::word const* const bp_ed1a745952b2ef0f = b_ed1a745952b2ef0f.words;
#if !CAPNP_LITE
static const ::capnp::_::RawSchema* const d_ed1a745952b2ef0f[] = {
  &s_bda606608274c0bd,
};
static const uint16_t m_ed1a745952b2ef0f[] = {0};
static const uint16_t i_ed1a745952b2ef0f[] = {0};
const ::capnp::_::RawSchema s_ed1a745952b2ef0f = {
  0xed1a745952b2ef0f, b_ed1a745952b2ef0f.words, 34, d_ed1a745952b2ef0f, m_ed1a745952b2ef0f,
  1, 1, i_ed1a745952b2ef0f, nullptr, nullptr, { &s_ed1a745952b2ef0f, nullptr, nullptr, 0, 0, nullptr }, false
};
#endif  // !CAPNP_LITE
static const ::capnp::_::AlignedData<34> b_e5e41c8457176bf2 = {
  {   0,   0,   0,   0,   5,   0,   6,   0,
    242, 107,  23,  87, 132,  28, 228, 229,
     25,   0,   0,   0,   1,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      1,   0,   7,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     21,   0,   0,   0,  90,   1,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     33,   0,   0,   0,  63,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
    117, 101,  95,  99, 111, 114, 101,  46,
     99,  97, 112, 110, 112,  58,  85, 110,
    114, 101,  97, 108,  67, 111, 114, 101,
     46, 102, 105, 110, 100,  67, 108,  97,
    115, 115,  36,  82, 101, 115, 117, 108,
    116, 115,   0,   0,   0,   0,   0,   0,
      4,   0,   0,   0,   3,   0,   4,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   1,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     13,   0,   0,   0,  58,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      8,   0,   0,   0,   3,   0,   1,   0,
     20,   0,   0,   0,   2,   0,   1,   0,
    111,  98, 106, 101,  99, 116,   0,   0,
     16,   0,   0,   0,   0,   0,   0,   0,
    118,  97, 113,   4, 177, 154, 189, 187,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     16,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0, }
};
::capnp::word const* const bp_e5e41c8457176bf2 = b_e5e41c8457176bf2.words;
#if !CAPNP_LITE
static const ::capnp::_::RawSchema* const d_e5e41c8457176bf2[] = {
  &s_bbbd9ab104716176,
};
static const uint16_t m_e5e41c8457176bf2[] = {0};
static const uint16_t i_e5e41c8457176bf2[] = {0};
const ::capnp::_::RawSchema s_e5e41c8457176bf2 = {
  0xe5e41c8457176bf2, b_e5e41c8457176bf2.words, 34, d_e5e41c8457176bf2, m_e5e41c8457176bf2,
  1, 1, i_e5e41c8457176bf2, nullptr, nullptr, { &s_e5e41c8457176bf2, nullptr, nullptr, 0, 0, nullptr }, false
};
#endif  // !CAPNP_LITE
static const ::capnp::_::AlignedData<34> b_f3c0af0b0dfca37d = {
  {   0,   0,   0,   0,   5,   0,   6,   0,
    125, 163, 252,  13,  11, 175, 192, 243,
     25,   0,   0,   0,   1,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      1,   0,   7,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     21,   0,   0,   0,  82,   1,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     33,   0,   0,   0,  63,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
    117, 101,  95,  99, 111, 114, 101,  46,
     99,  97, 112, 110, 112,  58,  85, 110,
    114, 101,  97, 108,  67, 111, 114, 101,
     46, 108, 111,  97, 100,  67, 108,  97,
    115, 115,  36,  80,  97, 114,  97, 109,
    115,   0,   0,   0,   0,   0,   0,   0,
      4,   0,   0,   0,   3,   0,   4,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   1,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     13,   0,   0,   0,  50,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      8,   0,   0,   0,   3,   0,   1,   0,
     20,   0,   0,   0,   2,   0,   1,   0,
     99, 108,  97, 115, 115,   0,   0,   0,
     16,   0,   0,   0,   0,   0,   0,   0,
    189, 192, 116, 130,  96,   6, 166, 189,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     16,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0, }
};
::capnp::word const* const bp_f3c0af0b0dfca37d = b_f3c0af0b0dfca37d.words;
#if !CAPNP_LITE
static const ::capnp::_::RawSchema* const d_f3c0af0b0dfca37d[] = {
  &s_bda606608274c0bd,
};
static const uint16_t m_f3c0af0b0dfca37d[] = {0};
static const uint16_t i_f3c0af0b0dfca37d[] = {0};
const ::capnp::_::RawSchema s_f3c0af0b0dfca37d = {
  0xf3c0af0b0dfca37d, b_f3c0af0b0dfca37d.words, 34, d_f3c0af0b0dfca37d, m_f3c0af0b0dfca37d,
  1, 1, i_f3c0af0b0dfca37d, nullptr, nullptr, { &s_f3c0af0b0dfca37d, nullptr, nullptr, 0, 0, nullptr }, false
};
#endif  // !CAPNP_LITE
static const ::capnp::_::AlignedData<34> b_9abf79fcdc2bbddd = {
  {   0,   0,   0,   0,   5,   0,   6,   0,
    221, 189,  43, 220, 252, 121, 191, 154,
     25,   0,   0,   0,   1,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      1,   0,   7,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     21,   0,   0,   0,  90,   1,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     33,   0,   0,   0,  63,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
    117, 101,  95,  99, 111, 114, 101,  46,
     99,  97, 112, 110, 112,  58,  85, 110,
    114, 101,  97, 108,  67, 111, 114, 101,
     46, 108, 111,  97, 100,  67, 108,  97,
    115, 115,  36,  82, 101, 115, 117, 108,
    116, 115,   0,   0,   0,   0,   0,   0,
      4,   0,   0,   0,   3,   0,   4,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   1,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     13,   0,   0,   0,  58,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      8,   0,   0,   0,   3,   0,   1,   0,
     20,   0,   0,   0,   2,   0,   1,   0,
    111,  98, 106, 101,  99, 116,   0,   0,
     16,   0,   0,   0,   0,   0,   0,   0,
    118,  97, 113,   4, 177, 154, 189, 187,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     16,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0, }
};
::capnp::word const* const bp_9abf79fcdc2bbddd = b_9abf79fcdc2bbddd.words;
#if !CAPNP_LITE
static const ::capnp::_::RawSchema* const d_9abf79fcdc2bbddd[] = {
  &s_bbbd9ab104716176,
};
static const uint16_t m_9abf79fcdc2bbddd[] = {0};
static const uint16_t i_9abf79fcdc2bbddd[] = {0};
const ::capnp::_::RawSchema s_9abf79fcdc2bbddd = {
  0x9abf79fcdc2bbddd, b_9abf79fcdc2bbddd.words, 34, d_9abf79fcdc2bbddd, m_9abf79fcdc2bbddd,
  1, 1, i_9abf79fcdc2bbddd, nullptr, nullptr, { &s_9abf79fcdc2bbddd, nullptr, nullptr, 0, 0, nullptr }, false
};
#endif  // !CAPNP_LITE
static const ::capnp::_::AlignedData<34> b_b72a6de10cd758f2 = {
  {   0,   0,   0,   0,   5,   0,   6,   0,
    242,  88, 215,  12, 225, 109,  42, 183,
     25,   0,   0,   0,   1,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      1,   0,   7,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     21,   0,   0,   0,  98,   1,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     33,   0,   0,   0,  63,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
    117, 101,  95,  99, 111, 114, 101,  46,
     99,  97, 112, 110, 112,  58,  85, 110,
    114, 101,  97, 108,  67, 111, 114, 101,
     46, 115, 116,  97, 116, 105,  99,  67,
    108,  97, 115, 115,  36,  80,  97, 114,
     97, 109, 115,   0,   0,   0,   0,   0,
      4,   0,   0,   0,   3,   0,   4,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   1,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     13,   0,   0,   0,  58,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      8,   0,   0,   0,   3,   0,   1,   0,
     20,   0,   0,   0,   2,   0,   1,   0,
    111,  98, 106, 101,  99, 116,   0,   0,
     16,   0,   0,   0,   0,   0,   0,   0,
    118,  97, 113,   4, 177, 154, 189, 187,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     16,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0, }
};
::capnp::word const* const bp_b72a6de10cd758f2 = b_b72a6de10cd758f2.words;
#if !CAPNP_LITE
static const ::capnp::_::RawSchema* const d_b72a6de10cd758f2[] = {
  &s_bbbd9ab104716176,
};
static const uint16_t m_b72a6de10cd758f2[] = {0};
static const uint16_t i_b72a6de10cd758f2[] = {0};
const ::capnp::_::RawSchema s_b72a6de10cd758f2 = {
  0xb72a6de10cd758f2, b_b72a6de10cd758f2.words, 34, d_b72a6de10cd758f2, m_b72a6de10cd758f2,
  1, 1, i_b72a6de10cd758f2, nullptr, nullptr, { &s_b72a6de10cd758f2, nullptr, nullptr, 0, 0, nullptr }, false
};
#endif  // !CAPNP_LITE
static const ::capnp::_::AlignedData<34> b_ccf3c5bc914ad34f = {
  {   0,   0,   0,   0,   5,   0,   6,   0,
     79, 211,  74, 145, 188, 197, 243, 204,
     25,   0,   0,   0,   1,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      1,   0,   7,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     21,   0,   0,   0, 106,   1,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     33,   0,   0,   0,  63,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
    117, 101,  95,  99, 111, 114, 101,  46,
     99,  97, 112, 110, 112,  58,  85, 110,
    114, 101,  97, 108,  67, 111, 114, 101,
     46, 115, 116,  97, 116, 105,  99,  67,
    108,  97, 115, 115,  36,  82, 101, 115,
    117, 108, 116, 115,   0,   0,   0,   0,
      4,   0,   0,   0,   3,   0,   4,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   1,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     13,   0,   0,   0,  50,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      8,   0,   0,   0,   3,   0,   1,   0,
     20,   0,   0,   0,   2,   0,   1,   0,
     99, 108,  97, 115, 115,   0,   0,   0,
     16,   0,   0,   0,   0,   0,   0,   0,
    189, 192, 116, 130,  96,   6, 166, 189,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     16,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0, }
};
::capnp::word const* const bp_ccf3c5bc914ad34f = b_ccf3c5bc914ad34f.words;
#if !CAPNP_LITE
static const ::capnp::_::RawSchema* const d_ccf3c5bc914ad34f[] = {
  &s_bda606608274c0bd,
};
static const uint16_t m_ccf3c5bc914ad34f[] = {0};
static const uint16_t i_ccf3c5bc914ad34f[] = {0};
const ::capnp::_::RawSchema s_ccf3c5bc914ad34f = {
  0xccf3c5bc914ad34f, b_ccf3c5bc914ad34f.words, 34, d_ccf3c5bc914ad34f, m_ccf3c5bc914ad34f,
  1, 1, i_ccf3c5bc914ad34f, nullptr, nullptr, { &s_ccf3c5bc914ad34f, nullptr, nullptr, 0, 0, nullptr }, false
};
#endif  // !CAPNP_LITE
static const ::capnp::_::AlignedData<50> b_efff26269e9ba6bf = {
  {   0,   0,   0,   0,   5,   0,   6,   0,
    191, 166, 155, 158,  38,  38, 255, 239,
     25,   0,   0,   0,   1,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      2,   0,   7,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     21,   0,   0,   0, 106,   1,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     33,   0,   0,   0, 119,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
    117, 101,  95,  99, 111, 114, 101,  46,
     99,  97, 112, 110, 112,  58,  85, 110,
    114, 101,  97, 108,  67, 111, 114, 101,
     46,  98, 105, 110, 100,  68, 101, 108,
    101, 103,  97, 116, 101,  36,  80,  97,
    114,  97, 109, 115,   0,   0,   0,   0,
      8,   0,   0,   0,   3,   0,   4,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   1,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     41,   0,   0,   0,  58,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     36,   0,   0,   0,   3,   0,   1,   0,
     48,   0,   0,   0,   2,   0,   1,   0,
      1,   0,   0,   0,   1,   0,   0,   0,
      0,   0,   1,   0,   1,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     45,   0,   0,   0,  74,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     44,   0,   0,   0,   3,   0,   1,   0,
     56,   0,   0,   0,   2,   0,   1,   0,
    111,  98, 106, 101,  99, 116,   0,   0,
     16,   0,   0,   0,   0,   0,   0,   0,
    118,  97, 113,   4, 177, 154, 189, 187,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     16,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     99,  97, 108, 108,  98,  97,  99, 107,
      0,   0,   0,   0,   0,   0,   0,   0,
     17,   0,   0,   0,   0,   0,   0,   0,
    255, 207,  40,  47, 243, 127, 123, 158,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     17,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0, }
};
::capnp::word const* const bp_efff26269e9ba6bf = b_efff26269e9ba6bf.words;
#if !CAPNP_LITE
static const ::capnp::_::RawSchema* const d_efff26269e9ba6bf[] = {
  &s_9e7b7ff32f28cfff,
  &s_bbbd9ab104716176,
};
static const uint16_t m_efff26269e9ba6bf[] = {1, 0};
static const uint16_t i_efff26269e9ba6bf[] = {0, 1};
const ::capnp::_::RawSchema s_efff26269e9ba6bf = {
  0xefff26269e9ba6bf, b_efff26269e9ba6bf.words, 50, d_efff26269e9ba6bf, m_efff26269e9ba6bf,
  2, 2, i_efff26269e9ba6bf, nullptr, nullptr, { &s_efff26269e9ba6bf, nullptr, nullptr, 0, 0, nullptr }, true
};
#endif  // !CAPNP_LITE
static const ::capnp::_::AlignedData<18> b_df498c81bea9c640 = {
  {   0,   0,   0,   0,   5,   0,   6,   0,
     64, 198, 169, 190, 129, 140,  73, 223,
     25,   0,   0,   0,   1,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   7,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     21,   0,   0,   0, 114,   1,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
    117, 101,  95,  99, 111, 114, 101,  46,
     99,  97, 112, 110, 112,  58,  85, 110,
    114, 101,  97, 108,  67, 111, 114, 101,
     46,  98, 105, 110, 100,  68, 101, 108,
    101, 103,  97, 116, 101,  36,  82, 101,
    115, 117, 108, 116, 115,   0,   0,   0, }
};
::capnp::word const* const bp_df498c81bea9c640 = b_df498c81bea9c640.words;
#if !CAPNP_LITE
const ::capnp::_::RawSchema s_df498c81bea9c640 = {
  0xdf498c81bea9c640, b_df498c81bea9c640.words, 18, nullptr, nullptr,
  0, 0, nullptr, nullptr, nullptr, { &s_df498c81bea9c640, nullptr, nullptr, 0, 0, nullptr }, false
};
#endif  // !CAPNP_LITE
static const ::capnp::_::AlignedData<34> b_93b97f9e143854ef = {
  {   0,   0,   0,   0,   5,   0,   6,   0,
    239,  84,  56,  20, 158, 127, 185, 147,
     25,   0,   0,   0,   1,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      1,   0,   7,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     21,   0,   0,   0, 122,   1,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     33,   0,   0,   0,  63,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
    117, 101,  95,  99, 111, 114, 101,  46,
     99,  97, 112, 110, 112,  58,  85, 110,
    114, 101,  97, 108,  67, 111, 114, 101,
     46, 117, 110,  98, 105, 110, 100,  68,
    101, 108, 101, 103,  97, 116, 101,  36,
     80,  97, 114,  97, 109, 115,   0,   0,
      4,   0,   0,   0,   3,   0,   4,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   1,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     13,   0,   0,   0,  58,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      8,   0,   0,   0,   3,   0,   1,   0,
     20,   0,   0,   0,   2,   0,   1,   0,
    111,  98, 106, 101,  99, 116,   0,   0,
     16,   0,   0,   0,   0,   0,   0,   0,
    118,  97, 113,   4, 177, 154, 189, 187,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     16,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0, }
};
::capnp::word const* const bp_93b97f9e143854ef = b_93b97f9e143854ef.words;
#if !CAPNP_LITE
static const ::capnp::_::RawSchema* const d_93b97f9e143854ef[] = {
  &s_bbbd9ab104716176,
};
static const uint16_t m_93b97f9e143854ef[] = {0};
static const uint16_t i_93b97f9e143854ef[] = {0};
const ::capnp::_::RawSchema s_93b97f9e143854ef = {
  0x93b97f9e143854ef, b_93b97f9e143854ef.words, 34, d_93b97f9e143854ef, m_93b97f9e143854ef,
  1, 1, i_93b97f9e143854ef, nullptr, nullptr, { &s_93b97f9e143854ef, nullptr, nullptr, 0, 0, nullptr }, false
};
#endif  // !CAPNP_LITE
static const ::capnp::_::AlignedData<18> b_e8b0a65565680b41 = {
  {   0,   0,   0,   0,   5,   0,   6,   0,
     65,  11, 104, 101,  85, 166, 176, 232,
     25,   0,   0,   0,   1,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   7,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     21,   0,   0,   0, 130,   1,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
    117, 101,  95,  99, 111, 114, 101,  46,
     99,  97, 112, 110, 112,  58,  85, 110,
    114, 101,  97, 108,  67, 111, 114, 101,
     46, 117, 110,  98, 105, 110, 100,  68,
    101, 108, 101, 103,  97, 116, 101,  36,
     82, 101, 115, 117, 108, 116, 115,   0, }
};
::capnp::word const* const bp_e8b0a65565680b41 = b_e8b0a65565680b41.words;
#if !CAPNP_LITE
const ::capnp::_::RawSchema s_e8b0a65565680b41 = {
  0xe8b0a65565680b41, b_e8b0a65565680b41.words, 18, nullptr, nullptr,
  0, 0, nullptr, nullptr, nullptr, { &s_e8b0a65565680b41, nullptr, nullptr, 0, 0, nullptr }, false
};
#endif  // !CAPNP_LITE
static const ::capnp::_::AlignedData<51> b_f0a1825f73741ede = {
  {   0,   0,   0,   0,   5,   0,   6,   0,
    222,  30, 116, 115,  95, 130, 161, 240,
     25,   0,   0,   0,   1,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      2,   0,   7,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     21,   0,   0,   0, 138,   1,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     37,   0,   0,   0, 119,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
    117, 101,  95,  99, 111, 114, 101,  46,
     99,  97, 112, 110, 112,  58,  85, 110,
    114, 101,  97, 108,  67, 111, 114, 101,
     46,  97, 100, 100,  77, 117, 108, 116,
    105,  68, 101, 108, 101, 103,  97, 116,
    101,  36,  80,  97, 114,  97, 109, 115,
      0,   0,   0,   0,   0,   0,   0,   0,
      8,   0,   0,   0,   3,   0,   4,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   1,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     41,   0,   0,   0,  58,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     36,   0,   0,   0,   3,   0,   1,   0,
     48,   0,   0,   0,   2,   0,   1,   0,
      1,   0,   0,   0,   1,   0,   0,   0,
      0,   0,   1,   0,   1,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     45,   0,   0,   0,  74,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     44,   0,   0,   0,   3,   0,   1,   0,
     56,   0,   0,   0,   2,   0,   1,   0,
    111,  98, 106, 101,  99, 116,   0,   0,
     16,   0,   0,   0,   0,   0,   0,   0,
    118,  97, 113,   4, 177, 154, 189, 187,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     16,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     99,  97, 108, 108,  98,  97,  99, 107,
      0,   0,   0,   0,   0,   0,   0,   0,
     17,   0,   0,   0,   0,   0,   0,   0,
    255, 207,  40,  47, 243, 127, 123, 158,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     17,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0, }
};
::capnp::word const* const bp_f0a1825f73741ede = b_f0a1825f73741ede.words;
#if !CAPNP_LITE
static const ::capnp::_::RawSchema* const d_f0a1825f73741ede[] = {
  &s_9e7b7ff32f28cfff,
  &s_bbbd9ab104716176,
};
static const uint16_t m_f0a1825f73741ede[] = {1, 0};
static const uint16_t i_f0a1825f73741ede[] = {0, 1};
const ::capnp::_::RawSchema s_f0a1825f73741ede = {
  0xf0a1825f73741ede, b_f0a1825f73741ede.words, 51, d_f0a1825f73741ede, m_f0a1825f73741ede,
  2, 2, i_f0a1825f73741ede, nullptr, nullptr, { &s_f0a1825f73741ede, nullptr, nullptr, 0, 0, nullptr }, true
};
#endif  // !CAPNP_LITE
static const ::capnp::_::AlignedData<36> b_bb2886aba98a7d6e = {
  {   0,   0,   0,   0,   5,   0,   6,   0,
    110, 125, 138, 169, 171, 134,  40, 187,
     25,   0,   0,   0,   1,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      1,   0,   7,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     21,   0,   0,   0, 146,   1,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     37,   0,   0,   0,  63,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
    117, 101,  95,  99, 111, 114, 101,  46,
     99,  97, 112, 110, 112,  58,  85, 110,
    114, 101,  97, 108,  67, 111, 114, 101,
     46,  97, 100, 100,  77, 117, 108, 116,
    105,  68, 101, 108, 101, 103,  97, 116,
    101,  36,  82, 101, 115, 117, 108, 116,
    115,   0,   0,   0,   0,   0,   0,   0,
      4,   0,   0,   0,   3,   0,   4,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   1,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     13,   0,   0,   0, 122,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     12,   0,   0,   0,   3,   0,   1,   0,
     24,   0,   0,   0,   2,   0,   1,   0,
    100, 101, 108, 101, 103,  97, 116, 101,
     79,  98, 106, 101,  99, 116,   0,   0,
     16,   0,   0,   0,   0,   0,   0,   0,
    118,  97, 113,   4, 177, 154, 189, 187,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     16,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0, }
};
::capnp::word const* const bp_bb2886aba98a7d6e = b_bb2886aba98a7d6e.words;
#if !CAPNP_LITE
static const ::capnp::_::RawSchema* const d_bb2886aba98a7d6e[] = {
  &s_bbbd9ab104716176,
};
static const uint16_t m_bb2886aba98a7d6e[] = {0};
static const uint16_t i_bb2886aba98a7d6e[] = {0};
const ::capnp::_::RawSchema s_bb2886aba98a7d6e = {
  0xbb2886aba98a7d6e, b_bb2886aba98a7d6e.words, 36, d_bb2886aba98a7d6e, m_bb2886aba98a7d6e,
  1, 1, i_bb2886aba98a7d6e, nullptr, nullptr, { &s_bb2886aba98a7d6e, nullptr, nullptr, 0, 0, nullptr }, false
};
#endif  // !CAPNP_LITE
static const ::capnp::_::AlignedData<51> b_e596573cb7a70896 = {
  {   0,   0,   0,   0,   5,   0,   6,   0,
    150,   8, 167, 183,  60,  87, 150, 229,
     25,   0,   0,   0,   1,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      2,   0,   7,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     21,   0,   0,   0, 162,   1,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     37,   0,   0,   0, 119,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
    117, 101,  95,  99, 111, 114, 101,  46,
     99,  97, 112, 110, 112,  58,  85, 110,
    114, 101,  97, 108,  67, 111, 114, 101,
     46, 114, 101, 109, 111, 118, 101,  77,
    117, 108, 116, 105,  68, 101, 108, 101,
    103,  97, 116, 101,  36,  80,  97, 114,
     97, 109, 115,   0,   0,   0,   0,   0,
      8,   0,   0,   0,   3,   0,   4,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   1,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     41,   0,   0,   0,  58,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     36,   0,   0,   0,   3,   0,   1,   0,
     48,   0,   0,   0,   2,   0,   1,   0,
      1,   0,   0,   0,   1,   0,   0,   0,
      0,   0,   1,   0,   1,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     45,   0,   0,   0, 122,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     44,   0,   0,   0,   3,   0,   1,   0,
     56,   0,   0,   0,   2,   0,   1,   0,
    111,  98, 106, 101,  99, 116,   0,   0,
     16,   0,   0,   0,   0,   0,   0,   0,
    118,  97, 113,   4, 177, 154, 189, 187,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     16,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
    100, 101, 108, 101, 103,  97, 116, 101,
     79,  98, 106, 101,  99, 116,   0,   0,
     16,   0,   0,   0,   0,   0,   0,   0,
    118,  97, 113,   4, 177, 154, 189, 187,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     16,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0, }
};
::capnp::word const* const bp_e596573cb7a70896 = b_e596573cb7a70896.words;
#if !CAPNP_LITE
static const ::capnp::_::RawSchema* const d_e596573cb7a70896[] = {
  &s_bbbd9ab104716176,
};
static const uint16_t m_e596573cb7a70896[] = {1, 0};
static const uint16_t i_e596573cb7a70896[] = {0, 1};
const ::capnp::_::RawSchema s_e596573cb7a70896 = {
  0xe596573cb7a70896, b_e596573cb7a70896.words, 51, d_e596573cb7a70896, m_e596573cb7a70896,
  1, 2, i_e596573cb7a70896, nullptr, nullptr, { &s_e596573cb7a70896, nullptr, nullptr, 0, 0, nullptr }, false
};
#endif  // !CAPNP_LITE
static const ::capnp::_::AlignedData<19> b_f524b8aa2fc26653 = {
  {   0,   0,   0,   0,   5,   0,   6,   0,
     83, 102, 194,  47, 170, 184,  36, 245,
     25,   0,   0,   0,   1,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   7,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     21,   0,   0,   0, 170,   1,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
    117, 101,  95,  99, 111, 114, 101,  46,
     99,  97, 112, 110, 112,  58,  85, 110,
    114, 101,  97, 108,  67, 111, 114, 101,
     46, 114, 101, 109, 111, 118, 101,  77,
    117, 108, 116, 105,  68, 101, 108, 101,
    103,  97, 116, 101,  36,  82, 101, 115,
    117, 108, 116, 115,   0,   0,   0,   0, }
};
::capnp::word const* const bp_f524b8aa2fc26653 = b_f524b8aa2fc26653.words;
#if !CAPNP_LITE
const ::capnp::_::RawSchema s_f524b8aa2fc26653 = {
  0xf524b8aa2fc26653, b_f524b8aa2fc26653.words, 19, nullptr, nullptr,
  0, 0, nullptr, nullptr, nullptr, { &s_f524b8aa2fc26653, nullptr, nullptr, 0, 0, nullptr }, false
};
#endif  // !CAPNP_LITE
static const ::capnp::_::AlignedData<69> b_e1a9d4e3c6455e25 = {
  {   0,   0,   0,   0,   5,   0,   6,   0,
     37,  94,  69, 198, 227, 212, 169, 225,
     25,   0,   0,   0,   1,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      3,   0,   7,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     21,   0,   0,   0, 178,   1,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     37,   0,   0,   0, 175,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
    117, 101,  95,  99, 111, 114, 101,  46,
     99,  97, 112, 110, 112,  58,  85, 110,
    114, 101,  97, 108,  67, 111, 114, 101,
     46, 114, 101, 103, 105, 115, 116, 101,
    114,  79, 118, 101, 114, 114, 105, 100,
    101,  67, 108,  97, 115, 115,  36,  80,
     97, 114,  97, 109, 115,   0,   0,   0,
     12,   0,   0,   0,   3,   0,   4,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   1,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     69,   0,   0,   0,  50,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     64,   0,   0,   0,   3,   0,   1,   0,
     76,   0,   0,   0,   2,   0,   1,   0,
      1,   0,   0,   0,   1,   0,   0,   0,
      0,   0,   1,   0,   1,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     73,   0,   0,   0,  58,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     68,   0,   0,   0,   3,   0,   1,   0,
     80,   0,   0,   0,   2,   0,   1,   0,
      2,   0,   0,   0,   2,   0,   0,   0,
      0,   0,   1,   0,   2,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     77,   0,   0,   0,  66,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     72,   0,   0,   0,   3,   0,   1,   0,
    100,   0,   0,   0,   2,   0,   1,   0,
     99, 108,  97, 115, 115,   0,   0,   0,
     16,   0,   0,   0,   0,   0,   0,   0,
    189, 192, 116, 130,  96,   6, 166, 189,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     16,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
    112,  97, 114, 101, 110, 116,   0,   0,
     16,   0,   0,   0,   0,   0,   0,   0,
    189, 192, 116, 130,  96,   6, 166, 189,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     16,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
    109, 101, 116, 104, 111, 100, 115,   0,
     14,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   3,   0,   1,   0,
     16,   0,   0,   0,   0,   0,   0,   0,
     54, 231, 165,  52, 216, 119,  45, 143,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     14,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0, }
};
::capnp::word const* const bp_e1a9d4e3c6455e25 = b_e1a9d4e3c6455e25.words;
#if !CAPNP_LITE
static const ::capnp::_::RawSchema* const d_e1a9d4e3c6455e25[] = {
  &s_8f2d77d834a5e736,
  &s_bda606608274c0bd,
};
static const uint16_t m_e1a9d4e3c6455e25[] = {0, 2, 1};
static const uint16_t i_e1a9d4e3c6455e25[] = {0, 1, 2};
const ::capnp::_::RawSchema s_e1a9d4e3c6455e25 = {
  0xe1a9d4e3c6455e25, b_e1a9d4e3c6455e25.words, 69, d_e1a9d4e3c6455e25, m_e1a9d4e3c6455e25,
  2, 3, i_e1a9d4e3c6455e25, nullptr, nullptr, { &s_e1a9d4e3c6455e25, nullptr, nullptr, 0, 0, nullptr }, false
};
#endif  // !CAPNP_LITE
static const ::capnp::_::AlignedData<19> b_d8f836ed010a2e47 = {
  {   0,   0,   0,   0,   5,   0,   6,   0,
     71,  46,  10,   1, 237,  54, 248, 216,
     25,   0,   0,   0,   1,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   7,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     21,   0,   0,   0, 186,   1,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
    117, 101,  95,  99, 111, 114, 101,  46,
     99,  97, 112, 110, 112,  58,  85, 110,
    114, 101,  97, 108,  67, 111, 114, 101,
     46, 114, 101, 103, 105, 115, 116, 101,
    114,  79, 118, 101, 114, 114, 105, 100,
    101,  67, 108,  97, 115, 115,  36,  82,
    101, 115, 117, 108, 116, 115,   0,   0, }
};
::capnp::word const* const bp_d8f836ed010a2e47 = b_d8f836ed010a2e47.words;
#if !CAPNP_LITE
const ::capnp::_::RawSchema s_d8f836ed010a2e47 = {
  0xd8f836ed010a2e47, b_d8f836ed010a2e47.words, 19, nullptr, nullptr,
  0, 0, nullptr, nullptr, nullptr, { &s_d8f836ed010a2e47, nullptr, nullptr, 0, 0, nullptr }, false
};
#endif  // !CAPNP_LITE
static const ::capnp::_::AlignedData<50> b_d84f6e8c84cb7c57 = {
  {   0,   0,   0,   0,   5,   0,   6,   0,
     87, 124, 203, 132, 140, 110,  79, 216,
     25,   0,   0,   0,   1,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      2,   0,   7,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     21,   0,   0,   0, 194,   1,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     37,   0,   0,   0, 119,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
    117, 101,  95,  99, 111, 114, 101,  46,
     99,  97, 112, 110, 112,  58,  85, 110,
    114, 101,  97, 108,  67, 111, 114, 101,
     46, 117, 110, 114, 101, 103, 105, 115,
    116, 101, 114,  79, 118, 101, 114, 114,
    105, 100, 101,  67, 108,  97, 115, 115,
     36,  80,  97, 114,  97, 109, 115,   0,
      8,   0,   0,   0,   3,   0,   4,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   1,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     41,   0,   0,   0,  50,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     36,   0,   0,   0,   3,   0,   1,   0,
     48,   0,   0,   0,   2,   0,   1,   0,
      1,   0,   0,   0,   1,   0,   0,   0,
      0,   0,   1,   0,   1,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     45,   0,   0,   0,  58,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     40,   0,   0,   0,   3,   0,   1,   0,
     52,   0,   0,   0,   2,   0,   1,   0,
     99, 108,  97, 115, 115,   0,   0,   0,
     16,   0,   0,   0,   0,   0,   0,   0,
    189, 192, 116, 130,  96,   6, 166, 189,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     16,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
    112,  97, 114, 101, 110, 116,   0,   0,
     16,   0,   0,   0,   0,   0,   0,   0,
    189, 192, 116, 130,  96,   6, 166, 189,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     16,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0, }
};
::capnp::word const* const bp_d84f6e8c84cb7c57 = b_d84f6e8c84cb7c57.words;
#if !CAPNP_LITE
static const ::capnp::_::RawSchema* const d_d84f6e8c84cb7c57[] = {
  &s_bda606608274c0bd,
};
static const uint16_t m_d84f6e8c84cb7c57[] = {0, 1};
static const uint16_t i_d84f6e8c84cb7c57[] = {0, 1};
const ::capnp::_::RawSchema s_d84f6e8c84cb7c57 = {
  0xd84f6e8c84cb7c57, b_d84f6e8c84cb7c57.words, 50, d_d84f6e8c84cb7c57, m_d84f6e8c84cb7c57,
  1, 2, i_d84f6e8c84cb7c57, nullptr, nullptr, { &s_d84f6e8c84cb7c57, nullptr, nullptr, 0, 0, nullptr }, false
};
#endif  // !CAPNP_LITE
static const ::capnp::_::AlignedData<20> b_b19110ff56d453fa = {
  {   0,   0,   0,   0,   5,   0,   6,   0,
    250,  83, 212,  86, 255,  16, 145, 177,
     25,   0,   0,   0,   1,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   7,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     21,   0,   0,   0, 202,   1,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
    117, 101,  95,  99, 111, 114, 101,  46,
     99,  97, 112, 110, 112,  58,  85, 110,
    114, 101,  97, 108,  67, 111, 114, 101,
     46, 117, 110, 114, 101, 103, 105, 115,
    116, 101, 114,  79, 118, 101, 114, 114,
    105, 100, 101,  67, 108,  97, 115, 115,
     36,  82, 101, 115, 117, 108, 116, 115,
      0,   0,   0,   0,   0,   0,   0,   0, }
};
::capnp::word const* const bp_b19110ff56d453fa = b_b19110ff56d453fa.words;
#if !CAPNP_LITE
const ::capnp::_::RawSchema s_b19110ff56d453fa = {
  0xb19110ff56d453fa, b_b19110ff56d453fa.words, 20, nullptr, nullptr,
  0, 0, nullptr, nullptr, nullptr, { &s_b19110ff56d453fa, nullptr, nullptr, 0, 0, nullptr }, false
};
#endif  // !CAPNP_LITE
static const ::capnp::_::AlignedData<65> b_b98d880189098282 = {
  {   0,   0,   0,   0,   5,   0,   6,   0,
    130, 130,   9, 137,   1, 136, 141, 185,
     25,   0,   0,   0,   1,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      3,   0,   7,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     21,   0,   0,   0,  98,   1,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     33,   0,   0,   0, 175,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
    117, 101,  95,  99, 111, 114, 101,  46,
     99,  97, 112, 110, 112,  58,  85, 110,
    114, 101,  97, 108,  67, 111, 114, 101,
     46, 115, 101, 116,  80, 114, 111, 112,
    101, 114, 116, 121,  36,  80,  97, 114,
     97, 109, 115,   0,   0,   0,   0,   0,
     12,   0,   0,   0,   3,   0,   4,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   1,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     69,   0,   0,   0,  50,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     64,   0,   0,   0,   3,   0,   1,   0,
     76,   0,   0,   0,   2,   0,   1,   0,
      1,   0,   0,   0,   1,   0,   0,   0,
      0,   0,   1,   0,   1,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     73,   0,   0,   0,  50,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     68,   0,   0,   0,   3,   0,   1,   0,
     80,   0,   0,   0,   2,   0,   1,   0,
      2,   0,   0,   0,   2,   0,   0,   0,
      0,   0,   1,   0,   2,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     77,   0,   0,   0,  74,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     76,   0,   0,   0,   3,   0,   1,   0,
     88,   0,   0,   0,   2,   0,   1,   0,
     99, 108,  97, 115, 115,   0,   0,   0,
     16,   0,   0,   0,   0,   0,   0,   0,
    189, 192, 116, 130,  96,   6, 166, 189,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     16,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
    111, 119, 110, 101, 114,   0,   0,   0,
     16,   0,   0,   0,   0,   0,   0,   0,
    118,  97, 113,   4, 177, 154, 189, 187,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     16,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
    112, 114, 111, 112, 101, 114, 116, 121,
      0,   0,   0,   0,   0,   0,   0,   0,
     16,   0,   0,   0,   0,   0,   0,   0,
    198,  43, 181,  32, 209,   0, 255, 205,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     16,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0, }
};
::capnp::word const* const bp_b98d880189098282 = b_b98d880189098282.words;
#if !CAPNP_LITE
static const ::capnp::_::RawSchema* const d_b98d880189098282[] = {
  &s_bbbd9ab104716176,
  &s_bda606608274c0bd,
  &s_cdff00d120b52bc6,
};
static const uint16_t m_b98d880189098282[] = {0, 1, 2};
static const uint16_t i_b98d880189098282[] = {0, 1, 2};
const ::capnp::_::RawSchema s_b98d880189098282 = {
  0xb98d880189098282, b_b98d880189098282.words, 65, d_b98d880189098282, m_b98d880189098282,
  3, 3, i_b98d880189098282, nullptr, nullptr, { &s_b98d880189098282, nullptr, nullptr, 0, 0, nullptr }, false
};
#endif  // !CAPNP_LITE
static const ::capnp::_::AlignedData<18> b_a7e25842dfa5a75b = {
  {   0,   0,   0,   0,   5,   0,   6,   0,
     91, 167, 165, 223,  66,  88, 226, 167,
     25,   0,   0,   0,   1,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   7,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     21,   0,   0,   0, 106,   1,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
    117, 101,  95,  99, 111, 114, 101,  46,
     99,  97, 112, 110, 112,  58,  85, 110,
    114, 101,  97, 108,  67, 111, 114, 101,
     46, 115, 101, 116,  80, 114, 111, 112,
    101, 114, 116, 121,  36,  82, 101, 115,
    117, 108, 116, 115,   0,   0,   0,   0, }
};
::capnp::word const* const bp_a7e25842dfa5a75b = b_a7e25842dfa5a75b.words;
#if !CAPNP_LITE
const ::capnp::_::RawSchema s_a7e25842dfa5a75b = {
  0xa7e25842dfa5a75b, b_a7e25842dfa5a75b.words, 18, nullptr, nullptr,
  0, 0, nullptr, nullptr, nullptr, { &s_a7e25842dfa5a75b, nullptr, nullptr, 0, 0, nullptr }, false
};
#endif  // !CAPNP_LITE
static const ::capnp::_::AlignedData<65> b_e3e7ec6b9d30864b = {
  {   0,   0,   0,   0,   5,   0,   6,   0,
     75, 134,  48, 157, 107, 236, 231, 227,
     25,   0,   0,   0,   1,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      3,   0,   7,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     21,   0,   0,   0,  98,   1,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     33,   0,   0,   0, 175,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
    117, 101,  95,  99, 111, 114, 101,  46,
     99,  97, 112, 110, 112,  58,  85, 110,
    114, 101,  97, 108,  67, 111, 114, 101,
     46, 103, 101, 116,  80, 114, 111, 112,
    101, 114, 116, 121,  36,  80,  97, 114,
     97, 109, 115,   0,   0,   0,   0,   0,
     12,   0,   0,   0,   3,   0,   4,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   1,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     69,   0,   0,   0,  50,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     64,   0,   0,   0,   3,   0,   1,   0,
     76,   0,   0,   0,   2,   0,   1,   0,
      1,   0,   0,   0,   1,   0,   0,   0,
      0,   0,   1,   0,   1,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     73,   0,   0,   0,  50,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     68,   0,   0,   0,   3,   0,   1,   0,
     80,   0,   0,   0,   2,   0,   1,   0,
      2,   0,   0,   0,   2,   0,   0,   0,
      0,   0,   1,   0,   2,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     77,   0,   0,   0, 106,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     76,   0,   0,   0,   3,   0,   1,   0,
     88,   0,   0,   0,   2,   0,   1,   0,
     99, 108,  97, 115, 115,   0,   0,   0,
     16,   0,   0,   0,   0,   0,   0,   0,
    189, 192, 116, 130,  96,   6, 166, 189,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     16,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
    111, 119, 110, 101, 114,   0,   0,   0,
     16,   0,   0,   0,   0,   0,   0,   0,
    118,  97, 113,   4, 177, 154, 189, 187,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     16,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
    112, 114, 111, 112, 101, 114, 116, 121,
     78,  97, 109, 101,   0,   0,   0,   0,
     12,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     12,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0, }
};
::capnp::word const* const bp_e3e7ec6b9d30864b = b_e3e7ec6b9d30864b.words;
#if !CAPNP_LITE
static const ::capnp::_::RawSchema* const d_e3e7ec6b9d30864b[] = {
  &s_bbbd9ab104716176,
  &s_bda606608274c0bd,
};
static const uint16_t m_e3e7ec6b9d30864b[] = {0, 1, 2};
static const uint16_t i_e3e7ec6b9d30864b[] = {0, 1, 2};
const ::capnp::_::RawSchema s_e3e7ec6b9d30864b = {
  0xe3e7ec6b9d30864b, b_e3e7ec6b9d30864b.words, 65, d_e3e7ec6b9d30864b, m_e3e7ec6b9d30864b,
  2, 3, i_e3e7ec6b9d30864b, nullptr, nullptr, { &s_e3e7ec6b9d30864b, nullptr, nullptr, 0, 0, nullptr }, false
};
#endif  // !CAPNP_LITE
static const ::capnp::_::AlignedData<35> b_ff494a70ed24ffae = {
  {   0,   0,   0,   0,   5,   0,   6,   0,
    174, 255,  36, 237, 112,  74,  73, 255,
     25,   0,   0,   0,   1,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      1,   0,   7,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     21,   0,   0,   0, 106,   1,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     33,   0,   0,   0,  63,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
    117, 101,  95,  99, 111, 114, 101,  46,
     99,  97, 112, 110, 112,  58,  85, 110,
    114, 101,  97, 108,  67, 111, 114, 101,
     46, 103, 101, 116,  80, 114, 111, 112,
    101, 114, 116, 121,  36,  82, 101, 115,
    117, 108, 116, 115,   0,   0,   0,   0,
      4,   0,   0,   0,   3,   0,   4,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   1,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     13,   0,   0,   0,  74,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     12,   0,   0,   0,   3,   0,   1,   0,
     24,   0,   0,   0,   2,   0,   1,   0,
    112, 114, 111, 112, 101, 114, 116, 121,
      0,   0,   0,   0,   0,   0,   0,   0,
     16,   0,   0,   0,   0,   0,   0,   0,
    198,  43, 181,  32, 209,   0, 255, 205,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     16,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0, }
};
::capnp::word const* const bp_ff494a70ed24ffae = b_ff494a70ed24ffae.words;
#if !CAPNP_LITE
static const ::capnp::_::RawSchema* const d_ff494a70ed24ffae[] = {
  &s_cdff00d120b52bc6,
};
static const uint16_t m_ff494a70ed24ffae[] = {0};
static const uint16_t i_ff494a70ed24ffae[] = {0};
const ::capnp::_::RawSchema s_ff494a70ed24ffae = {
  0xff494a70ed24ffae, b_ff494a70ed24ffae.words, 35, d_ff494a70ed24ffae, m_ff494a70ed24ffae,
  1, 1, i_ff494a70ed24ffae, nullptr, nullptr, { &s_ff494a70ed24ffae, nullptr, nullptr, 0, 0, nullptr }, false
};
#endif  // !CAPNP_LITE
}  // namespace schemas
}  // namespace capnp

// =======================================================================================


#if !CAPNP_LITE
::capnp::Request< ::UnrealCore::NewObjectParams,  ::UnrealCore::NewObjectResults>
UnrealCore::Client::newObjectRequest(::kj::Maybe< ::capnp::MessageSize> sizeHint) {
  return newCall< ::UnrealCore::NewObjectParams,  ::UnrealCore::NewObjectResults>(
      0x8e1737faadc1c8beull, 0, sizeHint, {true});
}
::kj::Promise<void> UnrealCore::Server::newObject(NewObjectContext) {
  return ::capnp::Capability::Server::internalUnimplemented(
      "ue_core.capnp:UnrealCore", "newObject",
      0x8e1737faadc1c8beull, 0);
}
::capnp::Request< ::UnrealCore::DestroyObjectParams,  ::UnrealCore::DestroyObjectResults>
UnrealCore::Client::destroyObjectRequest(::kj::Maybe< ::capnp::MessageSize> sizeHint) {
  return newCall< ::UnrealCore::DestroyObjectParams,  ::UnrealCore::DestroyObjectResults>(
      0x8e1737faadc1c8beull, 1, sizeHint, {true});
}
::kj::Promise<void> UnrealCore::Server::destroyObject(DestroyObjectContext) {
  return ::capnp::Capability::Server::internalUnimplemented(
      "ue_core.capnp:UnrealCore", "destroyObject",
      0x8e1737faadc1c8beull, 1);
}
::capnp::Request< ::UnrealCore::CallFunctionParams,  ::UnrealCore::CallFunctionResults>
UnrealCore::Client::callFunctionRequest(::kj::Maybe< ::capnp::MessageSize> sizeHint) {
  return newCall< ::UnrealCore::CallFunctionParams,  ::UnrealCore::CallFunctionResults>(
      0x8e1737faadc1c8beull, 2, sizeHint, {true});
}
::kj::Promise<void> UnrealCore::Server::callFunction(CallFunctionContext) {
  return ::capnp::Capability::Server::internalUnimplemented(
      "ue_core.capnp:UnrealCore", "callFunction",
      0x8e1737faadc1c8beull, 2);
}
::capnp::Request< ::UnrealCore::CallStaticFunctionParams,  ::UnrealCore::CallStaticFunctionResults>
UnrealCore::Client::callStaticFunctionRequest(::kj::Maybe< ::capnp::MessageSize> sizeHint) {
  return newCall< ::UnrealCore::CallStaticFunctionParams,  ::UnrealCore::CallStaticFunctionResults>(
      0x8e1737faadc1c8beull, 3, sizeHint, {true});
}
::kj::Promise<void> UnrealCore::Server::callStaticFunction(CallStaticFunctionContext) {
  return ::capnp::Capability::Server::internalUnimplemented(
      "ue_core.capnp:UnrealCore", "callStaticFunction",
      0x8e1737faadc1c8beull, 3);
}
::capnp::Request< ::UnrealCore::FindClassParams,  ::UnrealCore::FindClassResults>
UnrealCore::Client::findClassRequest(::kj::Maybe< ::capnp::MessageSize> sizeHint) {
  return newCall< ::UnrealCore::FindClassParams,  ::UnrealCore::FindClassResults>(
      0x8e1737faadc1c8beull, 4, sizeHint, {true});
}
::kj::Promise<void> UnrealCore::Server::findClass(FindClassContext) {
  return ::capnp::Capability::Server::internalUnimplemented(
      "ue_core.capnp:UnrealCore", "findClass",
      0x8e1737faadc1c8beull, 4);
}
::capnp::Request< ::UnrealCore::LoadClassParams,  ::UnrealCore::LoadClassResults>
UnrealCore::Client::loadClassRequest(::kj::Maybe< ::capnp::MessageSize> sizeHint) {
  return newCall< ::UnrealCore::LoadClassParams,  ::UnrealCore::LoadClassResults>(
      0x8e1737faadc1c8beull, 5, sizeHint, {true});
}
::kj::Promise<void> UnrealCore::Server::loadClass(LoadClassContext) {
  return ::capnp::Capability::Server::internalUnimplemented(
      "ue_core.capnp:UnrealCore", "loadClass",
      0x8e1737faadc1c8beull, 5);
}
::capnp::Request< ::UnrealCore::StaticClassParams,  ::UnrealCore::StaticClassResults>
UnrealCore::Client::staticClassRequest(::kj::Maybe< ::capnp::MessageSize> sizeHint) {
  return newCall< ::UnrealCore::StaticClassParams,  ::UnrealCore::StaticClassResults>(
      0x8e1737faadc1c8beull, 6, sizeHint, {true});
}
::kj::Promise<void> UnrealCore::Server::staticClass(StaticClassContext) {
  return ::capnp::Capability::Server::internalUnimplemented(
      "ue_core.capnp:UnrealCore", "staticClass",
      0x8e1737faadc1c8beull, 6);
}
::capnp::Request< ::UnrealCore::BindDelegateParams,  ::UnrealCore::BindDelegateResults>
UnrealCore::Client::bindDelegateRequest(::kj::Maybe< ::capnp::MessageSize> sizeHint) {
  return newCall< ::UnrealCore::BindDelegateParams,  ::UnrealCore::BindDelegateResults>(
      0x8e1737faadc1c8beull, 7, sizeHint, {true});
}
::kj::Promise<void> UnrealCore::Server::bindDelegate(BindDelegateContext) {
  return ::capnp::Capability::Server::internalUnimplemented(
      "ue_core.capnp:UnrealCore", "bindDelegate",
      0x8e1737faadc1c8beull, 7);
}
::capnp::Request< ::UnrealCore::UnbindDelegateParams,  ::UnrealCore::UnbindDelegateResults>
UnrealCore::Client::unbindDelegateRequest(::kj::Maybe< ::capnp::MessageSize> sizeHint) {
  return newCall< ::UnrealCore::UnbindDelegateParams,  ::UnrealCore::UnbindDelegateResults>(
      0x8e1737faadc1c8beull, 8, sizeHint, {true});
}
::kj::Promise<void> UnrealCore::Server::unbindDelegate(UnbindDelegateContext) {
  return ::capnp::Capability::Server::internalUnimplemented(
      "ue_core.capnp:UnrealCore", "unbindDelegate",
      0x8e1737faadc1c8beull, 8);
}
::capnp::Request< ::UnrealCore::AddMultiDelegateParams,  ::UnrealCore::AddMultiDelegateResults>
UnrealCore::Client::addMultiDelegateRequest(::kj::Maybe< ::capnp::MessageSize> sizeHint) {
  return newCall< ::UnrealCore::AddMultiDelegateParams,  ::UnrealCore::AddMultiDelegateResults>(
      0x8e1737faadc1c8beull, 9, sizeHint, {true});
}
::kj::Promise<void> UnrealCore::Server::addMultiDelegate(AddMultiDelegateContext) {
  return ::capnp::Capability::Server::internalUnimplemented(
      "ue_core.capnp:UnrealCore", "addMultiDelegate",
      0x8e1737faadc1c8beull, 9);
}
::capnp::Request< ::UnrealCore::RemoveMultiDelegateParams,  ::UnrealCore::RemoveMultiDelegateResults>
UnrealCore::Client::removeMultiDelegateRequest(::kj::Maybe< ::capnp::MessageSize> sizeHint) {
  return newCall< ::UnrealCore::RemoveMultiDelegateParams,  ::UnrealCore::RemoveMultiDelegateResults>(
      0x8e1737faadc1c8beull, 10, sizeHint, {true});
}
::kj::Promise<void> UnrealCore::Server::removeMultiDelegate(RemoveMultiDelegateContext) {
  return ::capnp::Capability::Server::internalUnimplemented(
      "ue_core.capnp:UnrealCore", "removeMultiDelegate",
      0x8e1737faadc1c8beull, 10);
}
::capnp::Request< ::UnrealCore::RegisterOverrideClassParams,  ::UnrealCore::RegisterOverrideClassResults>
UnrealCore::Client::registerOverrideClassRequest(::kj::Maybe< ::capnp::MessageSize> sizeHint) {
  return newCall< ::UnrealCore::RegisterOverrideClassParams,  ::UnrealCore::RegisterOverrideClassResults>(
      0x8e1737faadc1c8beull, 11, sizeHint, {true});
}
::kj::Promise<void> UnrealCore::Server::registerOverrideClass(RegisterOverrideClassContext) {
  return ::capnp::Capability::Server::internalUnimplemented(
      "ue_core.capnp:UnrealCore", "registerOverrideClass",
      0x8e1737faadc1c8beull, 11);
}
::capnp::Request< ::UnrealCore::UnregisterOverrideClassParams,  ::UnrealCore::UnregisterOverrideClassResults>
UnrealCore::Client::unregisterOverrideClassRequest(::kj::Maybe< ::capnp::MessageSize> sizeHint) {
  return newCall< ::UnrealCore::UnregisterOverrideClassParams,  ::UnrealCore::UnregisterOverrideClassResults>(
      0x8e1737faadc1c8beull, 12, sizeHint, {true});
}
::kj::Promise<void> UnrealCore::Server::unregisterOverrideClass(UnregisterOverrideClassContext) {
  return ::capnp::Capability::Server::internalUnimplemented(
      "ue_core.capnp:UnrealCore", "unregisterOverrideClass",
      0x8e1737faadc1c8beull, 12);
}
::capnp::Request< ::UnrealCore::SetPropertyParams,  ::UnrealCore::SetPropertyResults>
UnrealCore::Client::setPropertyRequest(::kj::Maybe< ::capnp::MessageSize> sizeHint) {
  return newCall< ::UnrealCore::SetPropertyParams,  ::UnrealCore::SetPropertyResults>(
      0x8e1737faadc1c8beull, 13, sizeHint, {true});
}
::kj::Promise<void> UnrealCore::Server::setProperty(SetPropertyContext) {
  return ::capnp::Capability::Server::internalUnimplemented(
      "ue_core.capnp:UnrealCore", "setProperty",
      0x8e1737faadc1c8beull, 13);
}
::capnp::Request< ::UnrealCore::GetPropertyParams,  ::UnrealCore::GetPropertyResults>
UnrealCore::Client::getPropertyRequest(::kj::Maybe< ::capnp::MessageSize> sizeHint) {
  return newCall< ::UnrealCore::GetPropertyParams,  ::UnrealCore::GetPropertyResults>(
      0x8e1737faadc1c8beull, 14, sizeHint, {true});
}
::kj::Promise<void> UnrealCore::Server::getProperty(GetPropertyContext) {
  return ::capnp::Capability::Server::internalUnimplemented(
      "ue_core.capnp:UnrealCore", "getProperty",
      0x8e1737faadc1c8beull, 14);
}
::capnp::Capability::Server::DispatchCallResult UnrealCore::Server::dispatchCall(
    uint64_t interfaceId, uint16_t methodId,
    ::capnp::CallContext< ::capnp::AnyPointer, ::capnp::AnyPointer> context) {
  switch (interfaceId) {
    case 0x8e1737faadc1c8beull:
      return dispatchCallInternal(methodId, context);
    default:
      return internalUnimplemented("ue_core.capnp:UnrealCore", interfaceId);
  }
}
::capnp::Capability::Server::DispatchCallResult UnrealCore::Server::dispatchCallInternal(
    uint16_t methodId,
    ::capnp::CallContext< ::capnp::AnyPointer, ::capnp::AnyPointer> context) {
  switch (methodId) {
    case 0:
      return {
        newObject(::capnp::Capability::Server::internalGetTypedContext<
             ::UnrealCore::NewObjectParams,  ::UnrealCore::NewObjectResults>(context)),
        false,
        false
      };
    case 1:
      return {
        destroyObject(::capnp::Capability::Server::internalGetTypedContext<
             ::UnrealCore::DestroyObjectParams,  ::UnrealCore::DestroyObjectResults>(context)),
        false,
        false
      };
    case 2:
      return {
        callFunction(::capnp::Capability::Server::internalGetTypedContext<
             ::UnrealCore::CallFunctionParams,  ::UnrealCore::CallFunctionResults>(context)),
        false,
        false
      };
    case 3:
      return {
        callStaticFunction(::capnp::Capability::Server::internalGetTypedContext<
             ::UnrealCore::CallStaticFunctionParams,  ::UnrealCore::CallStaticFunctionResults>(context)),
        false,
        false
      };
    case 4:
      return {
        findClass(::capnp::Capability::Server::internalGetTypedContext<
             ::UnrealCore::FindClassParams,  ::UnrealCore::FindClassResults>(context)),
        false,
        false
      };
    case 5:
      return {
        loadClass(::capnp::Capability::Server::internalGetTypedContext<
             ::UnrealCore::LoadClassParams,  ::UnrealCore::LoadClassResults>(context)),
        false,
        false
      };
    case 6:
      return {
        staticClass(::capnp::Capability::Server::internalGetTypedContext<
             ::UnrealCore::StaticClassParams,  ::UnrealCore::StaticClassResults>(context)),
        false,
        false
      };
    case 7:
      return {
        bindDelegate(::capnp::Capability::Server::internalGetTypedContext<
             ::UnrealCore::BindDelegateParams,  ::UnrealCore::BindDelegateResults>(context)),
        false,
        false
      };
    case 8:
      return {
        unbindDelegate(::capnp::Capability::Server::internalGetTypedContext<
             ::UnrealCore::UnbindDelegateParams,  ::UnrealCore::UnbindDelegateResults>(context)),
        false,
        false
      };
    case 9:
      return {
        addMultiDelegate(::capnp::Capability::Server::internalGetTypedContext<
             ::UnrealCore::AddMultiDelegateParams,  ::UnrealCore::AddMultiDelegateResults>(context)),
        false,
        false
      };
    case 10:
      return {
        removeMultiDelegate(::capnp::Capability::Server::internalGetTypedContext<
             ::UnrealCore::RemoveMultiDelegateParams,  ::UnrealCore::RemoveMultiDelegateResults>(context)),
        false,
        false
      };
    case 11:
      return {
        registerOverrideClass(::capnp::Capability::Server::internalGetTypedContext<
             ::UnrealCore::RegisterOverrideClassParams,  ::UnrealCore::RegisterOverrideClassResults>(context)),
        false,
        false
      };
    case 12:
      return {
        unregisterOverrideClass(::capnp::Capability::Server::internalGetTypedContext<
             ::UnrealCore::UnregisterOverrideClassParams,  ::UnrealCore::UnregisterOverrideClassResults>(context)),
        false,
        false
      };
    case 13:
      return {
        setProperty(::capnp::Capability::Server::internalGetTypedContext<
             ::UnrealCore::SetPropertyParams,  ::UnrealCore::SetPropertyResults>(context)),
        false,
        false
      };
    case 14:
      return {
        getProperty(::capnp::Capability::Server::internalGetTypedContext<
             ::UnrealCore::GetPropertyParams,  ::UnrealCore::GetPropertyResults>(context)),
        false,
        false
      };
    default:
      (void)context;
      return ::capnp::Capability::Server::internalUnimplemented(
          "ue_core.capnp:UnrealCore",
          0x8e1737faadc1c8beull, methodId);
  }
}
#endif  // !CAPNP_LITE

// UnrealCore
#if !CAPNP_LITE
#if CAPNP_NEED_REDUNDANT_CONSTEXPR_DECL
constexpr ::capnp::Kind UnrealCore::_capnpPrivate::kind;
constexpr ::capnp::_::RawSchema const* UnrealCore::_capnpPrivate::schema;
#endif  // !CAPNP_NEED_REDUNDANT_CONSTEXPR_DECL
#endif  // !CAPNP_LITE

// UnrealCore::Object
#if CAPNP_NEED_REDUNDANT_CONSTEXPR_DECL
constexpr uint16_t UnrealCore::Object::_capnpPrivate::dataWordSize;
constexpr uint16_t UnrealCore::Object::_capnpPrivate::pointerCount;
#endif  // !CAPNP_NEED_REDUNDANT_CONSTEXPR_DECL
#if !CAPNP_LITE
#if CAPNP_NEED_REDUNDANT_CONSTEXPR_DECL
constexpr ::capnp::Kind UnrealCore::Object::_capnpPrivate::kind;
constexpr ::capnp::_::RawSchema const* UnrealCore::Object::_capnpPrivate::schema;
#endif  // !CAPNP_NEED_REDUNDANT_CONSTEXPR_DECL
#endif  // !CAPNP_LITE

// UnrealCore::Class
#if CAPNP_NEED_REDUNDANT_CONSTEXPR_DECL
constexpr uint16_t UnrealCore::Class::_capnpPrivate::dataWordSize;
constexpr uint16_t UnrealCore::Class::_capnpPrivate::pointerCount;
#endif  // !CAPNP_NEED_REDUNDANT_CONSTEXPR_DECL
#if !CAPNP_LITE
#if CAPNP_NEED_REDUNDANT_CONSTEXPR_DECL
constexpr ::capnp::Kind UnrealCore::Class::_capnpPrivate::kind;
constexpr ::capnp::_::RawSchema const* UnrealCore::Class::_capnpPrivate::schema;
#endif  // !CAPNP_NEED_REDUNDANT_CONSTEXPR_DECL
#endif  // !CAPNP_LITE

// UnrealCore::Argument
#if CAPNP_NEED_REDUNDANT_CONSTEXPR_DECL
constexpr uint16_t UnrealCore::Argument::_capnpPrivate::dataWordSize;
constexpr uint16_t UnrealCore::Argument::_capnpPrivate::pointerCount;
#endif  // !CAPNP_NEED_REDUNDANT_CONSTEXPR_DECL
#if !CAPNP_LITE
#if CAPNP_NEED_REDUNDANT_CONSTEXPR_DECL
constexpr ::capnp::Kind UnrealCore::Argument::_capnpPrivate::kind;
constexpr ::capnp::_::RawSchema const* UnrealCore::Argument::_capnpPrivate::schema;
#endif  // !CAPNP_NEED_REDUNDANT_CONSTEXPR_DECL
#endif  // !CAPNP_LITE

// UnrealCore::Property
#if CAPNP_NEED_REDUNDANT_CONSTEXPR_DECL
constexpr uint16_t UnrealCore::Property::_capnpPrivate::dataWordSize;
constexpr uint16_t UnrealCore::Property::_capnpPrivate::pointerCount;
#endif  // !CAPNP_NEED_REDUNDANT_CONSTEXPR_DECL
#if !CAPNP_LITE
#if CAPNP_NEED_REDUNDANT_CONSTEXPR_DECL
constexpr ::capnp::Kind UnrealCore::Property::_capnpPrivate::kind;
constexpr ::capnp::_::RawSchema const* UnrealCore::Property::_capnpPrivate::schema;
#endif  // !CAPNP_NEED_REDUNDANT_CONSTEXPR_DECL
#endif  // !CAPNP_LITE

// UnrealCore::Method
#if CAPNP_NEED_REDUNDANT_CONSTEXPR_DECL
constexpr uint16_t UnrealCore::Method::_capnpPrivate::dataWordSize;
constexpr uint16_t UnrealCore::Method::_capnpPrivate::pointerCount;
#endif  // !CAPNP_NEED_REDUNDANT_CONSTEXPR_DECL
#if !CAPNP_LITE
#if CAPNP_NEED_REDUNDANT_CONSTEXPR_DECL
constexpr ::capnp::Kind UnrealCore::Method::_capnpPrivate::kind;
constexpr ::capnp::_::RawSchema const* UnrealCore::Method::_capnpPrivate::schema;
#endif  // !CAPNP_NEED_REDUNDANT_CONSTEXPR_DECL
#endif  // !CAPNP_LITE

#if !CAPNP_LITE
::capnp::Request< ::UnrealCore::MethodCallable::InvokeParams,  ::UnrealCore::MethodCallable::InvokeResults>
UnrealCore::MethodCallable::Client::invokeRequest(::kj::Maybe< ::capnp::MessageSize> sizeHint) {
  return newCall< ::UnrealCore::MethodCallable::InvokeParams,  ::UnrealCore::MethodCallable::InvokeResults>(
      0xa46e9e12cd75e297ull, 0, sizeHint, {true});
}
::kj::Promise<void> UnrealCore::MethodCallable::Server::invoke(InvokeContext) {
  return ::capnp::Capability::Server::internalUnimplemented(
      "ue_core.capnp:UnrealCore.MethodCallable", "invoke",
      0xa46e9e12cd75e297ull, 0);
}
::capnp::Capability::Server::DispatchCallResult UnrealCore::MethodCallable::Server::dispatchCall(
    uint64_t interfaceId, uint16_t methodId,
    ::capnp::CallContext< ::capnp::AnyPointer, ::capnp::AnyPointer> context) {
  switch (interfaceId) {
    case 0xa46e9e12cd75e297ull:
      return dispatchCallInternal(methodId, context);
    default:
      return internalUnimplemented("ue_core.capnp:UnrealCore.MethodCallable", interfaceId);
  }
}
::capnp::Capability::Server::DispatchCallResult UnrealCore::MethodCallable::Server::dispatchCallInternal(
    uint16_t methodId,
    ::capnp::CallContext< ::capnp::AnyPointer, ::capnp::AnyPointer> context) {
  switch (methodId) {
    case 0:
      return {
        invoke(::capnp::Capability::Server::internalGetTypedContext<
             ::UnrealCore::MethodCallable::InvokeParams,  ::UnrealCore::MethodCallable::InvokeResults>(context)),
        false,
        false
      };
    default:
      (void)context;
      return ::capnp::Capability::Server::internalUnimplemented(
          "ue_core.capnp:UnrealCore.MethodCallable",
          0xa46e9e12cd75e297ull, methodId);
  }
}
#endif  // !CAPNP_LITE

// UnrealCore::MethodCallable
#if !CAPNP_LITE
#if CAPNP_NEED_REDUNDANT_CONSTEXPR_DECL
constexpr ::capnp::Kind UnrealCore::MethodCallable::_capnpPrivate::kind;
constexpr ::capnp::_::RawSchema const* UnrealCore::MethodCallable::_capnpPrivate::schema;
#endif  // !CAPNP_NEED_REDUNDANT_CONSTEXPR_DECL
#endif  // !CAPNP_LITE

// UnrealCore::MethodCallable::InvokeParams
#if CAPNP_NEED_REDUNDANT_CONSTEXPR_DECL
constexpr uint16_t UnrealCore::MethodCallable::InvokeParams::_capnpPrivate::dataWordSize;
constexpr uint16_t UnrealCore::MethodCallable::InvokeParams::_capnpPrivate::pointerCount;
#endif  // !CAPNP_NEED_REDUNDANT_CONSTEXPR_DECL
#if !CAPNP_LITE
#if CAPNP_NEED_REDUNDANT_CONSTEXPR_DECL
constexpr ::capnp::Kind UnrealCore::MethodCallable::InvokeParams::_capnpPrivate::kind;
constexpr ::capnp::_::RawSchema const* UnrealCore::MethodCallable::InvokeParams::_capnpPrivate::schema;
#endif  // !CAPNP_NEED_REDUNDANT_CONSTEXPR_DECL
#endif  // !CAPNP_LITE

// UnrealCore::MethodCallable::InvokeResults
#if CAPNP_NEED_REDUNDANT_CONSTEXPR_DECL
constexpr uint16_t UnrealCore::MethodCallable::InvokeResults::_capnpPrivate::dataWordSize;
constexpr uint16_t UnrealCore::MethodCallable::InvokeResults::_capnpPrivate::pointerCount;
#endif  // !CAPNP_NEED_REDUNDANT_CONSTEXPR_DECL
#if !CAPNP_LITE
#if CAPNP_NEED_REDUNDANT_CONSTEXPR_DECL
constexpr ::capnp::Kind UnrealCore::MethodCallable::InvokeResults::_capnpPrivate::kind;
constexpr ::capnp::_::RawSchema const* UnrealCore::MethodCallable::InvokeResults::_capnpPrivate::schema;
#endif  // !CAPNP_NEED_REDUNDANT_CONSTEXPR_DECL
#endif  // !CAPNP_LITE

#if !CAPNP_LITE
::capnp::Request< ::UnrealCore::DelegateCallback::OnCallParams,  ::UnrealCore::DelegateCallback::OnCallResults>
UnrealCore::DelegateCallback::Client::onCallRequest(::kj::Maybe< ::capnp::MessageSize> sizeHint) {
  return newCall< ::UnrealCore::DelegateCallback::OnCallParams,  ::UnrealCore::DelegateCallback::OnCallResults>(
      0x9e7b7ff32f28cfffull, 0, sizeHint, {true});
}
::kj::Promise<void> UnrealCore::DelegateCallback::Server::onCall(OnCallContext) {
  return ::capnp::Capability::Server::internalUnimplemented(
      "ue_core.capnp:UnrealCore.DelegateCallback", "onCall",
      0x9e7b7ff32f28cfffull, 0);
}
::capnp::Capability::Server::DispatchCallResult UnrealCore::DelegateCallback::Server::dispatchCall(
    uint64_t interfaceId, uint16_t methodId,
    ::capnp::CallContext< ::capnp::AnyPointer, ::capnp::AnyPointer> context) {
  switch (interfaceId) {
    case 0x9e7b7ff32f28cfffull:
      return dispatchCallInternal(methodId, context);
    default:
      return internalUnimplemented("ue_core.capnp:UnrealCore.DelegateCallback", interfaceId);
  }
}
::capnp::Capability::Server::DispatchCallResult UnrealCore::DelegateCallback::Server::dispatchCallInternal(
    uint16_t methodId,
    ::capnp::CallContext< ::capnp::AnyPointer, ::capnp::AnyPointer> context) {
  switch (methodId) {
    case 0:
      return {
        onCall(::capnp::Capability::Server::internalGetTypedContext<
             ::UnrealCore::DelegateCallback::OnCallParams,  ::UnrealCore::DelegateCallback::OnCallResults>(context)),
        false,
        false
      };
    default:
      (void)context;
      return ::capnp::Capability::Server::internalUnimplemented(
          "ue_core.capnp:UnrealCore.DelegateCallback",
          0x9e7b7ff32f28cfffull, methodId);
  }
}
#endif  // !CAPNP_LITE

// UnrealCore::DelegateCallback
#if !CAPNP_LITE
#if CAPNP_NEED_REDUNDANT_CONSTEXPR_DECL
constexpr ::capnp::Kind UnrealCore::DelegateCallback::_capnpPrivate::kind;
constexpr ::capnp::_::RawSchema const* UnrealCore::DelegateCallback::_capnpPrivate::schema;
#endif  // !CAPNP_NEED_REDUNDANT_CONSTEXPR_DECL
#endif  // !CAPNP_LITE

// UnrealCore::DelegateCallback::OnCallParams
#if CAPNP_NEED_REDUNDANT_CONSTEXPR_DECL
constexpr uint16_t UnrealCore::DelegateCallback::OnCallParams::_capnpPrivate::dataWordSize;
constexpr uint16_t UnrealCore::DelegateCallback::OnCallParams::_capnpPrivate::pointerCount;
#endif  // !CAPNP_NEED_REDUNDANT_CONSTEXPR_DECL
#if !CAPNP_LITE
#if CAPNP_NEED_REDUNDANT_CONSTEXPR_DECL
constexpr ::capnp::Kind UnrealCore::DelegateCallback::OnCallParams::_capnpPrivate::kind;
constexpr ::capnp::_::RawSchema const* UnrealCore::DelegateCallback::OnCallParams::_capnpPrivate::schema;
#endif  // !CAPNP_NEED_REDUNDANT_CONSTEXPR_DECL
#endif  // !CAPNP_LITE

// UnrealCore::DelegateCallback::OnCallResults
#if CAPNP_NEED_REDUNDANT_CONSTEXPR_DECL
constexpr uint16_t UnrealCore::DelegateCallback::OnCallResults::_capnpPrivate::dataWordSize;
constexpr uint16_t UnrealCore::DelegateCallback::OnCallResults::_capnpPrivate::pointerCount;
#endif  // !CAPNP_NEED_REDUNDANT_CONSTEXPR_DECL
#if !CAPNP_LITE
#if CAPNP_NEED_REDUNDANT_CONSTEXPR_DECL
constexpr ::capnp::Kind UnrealCore::DelegateCallback::OnCallResults::_capnpPrivate::kind;
constexpr ::capnp::_::RawSchema const* UnrealCore::DelegateCallback::OnCallResults::_capnpPrivate::schema;
#endif  // !CAPNP_NEED_REDUNDANT_CONSTEXPR_DECL
#endif  // !CAPNP_LITE

// UnrealCore::NewObjectParams
#if CAPNP_NEED_REDUNDANT_CONSTEXPR_DECL
constexpr uint16_t UnrealCore::NewObjectParams::_capnpPrivate::dataWordSize;
constexpr uint16_t UnrealCore::NewObjectParams::_capnpPrivate::pointerCount;
#endif  // !CAPNP_NEED_REDUNDANT_CONSTEXPR_DECL
#if !CAPNP_LITE
#if CAPNP_NEED_REDUNDANT_CONSTEXPR_DECL
constexpr ::capnp::Kind UnrealCore::NewObjectParams::_capnpPrivate::kind;
constexpr ::capnp::_::RawSchema const* UnrealCore::NewObjectParams::_capnpPrivate::schema;
#endif  // !CAPNP_NEED_REDUNDANT_CONSTEXPR_DECL
#endif  // !CAPNP_LITE

// UnrealCore::NewObjectResults
#if CAPNP_NEED_REDUNDANT_CONSTEXPR_DECL
constexpr uint16_t UnrealCore::NewObjectResults::_capnpPrivate::dataWordSize;
constexpr uint16_t UnrealCore::NewObjectResults::_capnpPrivate::pointerCount;
#endif  // !CAPNP_NEED_REDUNDANT_CONSTEXPR_DECL
#if !CAPNP_LITE
#if CAPNP_NEED_REDUNDANT_CONSTEXPR_DECL
constexpr ::capnp::Kind UnrealCore::NewObjectResults::_capnpPrivate::kind;
constexpr ::capnp::_::RawSchema const* UnrealCore::NewObjectResults::_capnpPrivate::schema;
#endif  // !CAPNP_NEED_REDUNDANT_CONSTEXPR_DECL
#endif  // !CAPNP_LITE

// UnrealCore::DestroyObjectParams
#if CAPNP_NEED_REDUNDANT_CONSTEXPR_DECL
constexpr uint16_t UnrealCore::DestroyObjectParams::_capnpPrivate::dataWordSize;
constexpr uint16_t UnrealCore::DestroyObjectParams::_capnpPrivate::pointerCount;
#endif  // !CAPNP_NEED_REDUNDANT_CONSTEXPR_DECL
#if !CAPNP_LITE
#if CAPNP_NEED_REDUNDANT_CONSTEXPR_DECL
constexpr ::capnp::Kind UnrealCore::DestroyObjectParams::_capnpPrivate::kind;
constexpr ::capnp::_::RawSchema const* UnrealCore::DestroyObjectParams::_capnpPrivate::schema;
#endif  // !CAPNP_NEED_REDUNDANT_CONSTEXPR_DECL
#endif  // !CAPNP_LITE

// UnrealCore::DestroyObjectResults
#if CAPNP_NEED_REDUNDANT_CONSTEXPR_DECL
constexpr uint16_t UnrealCore::DestroyObjectResults::_capnpPrivate::dataWordSize;
constexpr uint16_t UnrealCore::DestroyObjectResults::_capnpPrivate::pointerCount;
#endif  // !CAPNP_NEED_REDUNDANT_CONSTEXPR_DECL
#if !CAPNP_LITE
#if CAPNP_NEED_REDUNDANT_CONSTEXPR_DECL
constexpr ::capnp::Kind UnrealCore::DestroyObjectResults::_capnpPrivate::kind;
constexpr ::capnp::_::RawSchema const* UnrealCore::DestroyObjectResults::_capnpPrivate::schema;
#endif  // !CAPNP_NEED_REDUNDANT_CONSTEXPR_DECL
#endif  // !CAPNP_LITE

// UnrealCore::CallFunctionParams
#if CAPNP_NEED_REDUNDANT_CONSTEXPR_DECL
constexpr uint16_t UnrealCore::CallFunctionParams::_capnpPrivate::dataWordSize;
constexpr uint16_t UnrealCore::CallFunctionParams::_capnpPrivate::pointerCount;
#endif  // !CAPNP_NEED_REDUNDANT_CONSTEXPR_DECL
#if !CAPNP_LITE
#if CAPNP_NEED_REDUNDANT_CONSTEXPR_DECL
constexpr ::capnp::Kind UnrealCore::CallFunctionParams::_capnpPrivate::kind;
constexpr ::capnp::_::RawSchema const* UnrealCore::CallFunctionParams::_capnpPrivate::schema;
#endif  // !CAPNP_NEED_REDUNDANT_CONSTEXPR_DECL
#endif  // !CAPNP_LITE

// UnrealCore::CallFunctionResults
#if CAPNP_NEED_REDUNDANT_CONSTEXPR_DECL
constexpr uint16_t UnrealCore::CallFunctionResults::_capnpPrivate::dataWordSize;
constexpr uint16_t UnrealCore::CallFunctionResults::_capnpPrivate::pointerCount;
#endif  // !CAPNP_NEED_REDUNDANT_CONSTEXPR_DECL
#if !CAPNP_LITE
#if CAPNP_NEED_REDUNDANT_CONSTEXPR_DECL
constexpr ::capnp::Kind UnrealCore::CallFunctionResults::_capnpPrivate::kind;
constexpr ::capnp::_::RawSchema const* UnrealCore::CallFunctionResults::_capnpPrivate::schema;
#endif  // !CAPNP_NEED_REDUNDANT_CONSTEXPR_DECL
#endif  // !CAPNP_LITE

// UnrealCore::CallStaticFunctionParams
#if CAPNP_NEED_REDUNDANT_CONSTEXPR_DECL
constexpr uint16_t UnrealCore::CallStaticFunctionParams::_capnpPrivate::dataWordSize;
constexpr uint16_t UnrealCore::CallStaticFunctionParams::_capnpPrivate::pointerCount;
#endif  // !CAPNP_NEED_REDUNDANT_CONSTEXPR_DECL
#if !CAPNP_LITE
#if CAPNP_NEED_REDUNDANT_CONSTEXPR_DECL
constexpr ::capnp::Kind UnrealCore::CallStaticFunctionParams::_capnpPrivate::kind;
constexpr ::capnp::_::RawSchema const* UnrealCore::CallStaticFunctionParams::_capnpPrivate::schema;
#endif  // !CAPNP_NEED_REDUNDANT_CONSTEXPR_DECL
#endif  // !CAPNP_LITE

// UnrealCore::CallStaticFunctionResults
#if CAPNP_NEED_REDUNDANT_CONSTEXPR_DECL
constexpr uint16_t UnrealCore::CallStaticFunctionResults::_capnpPrivate::dataWordSize;
constexpr uint16_t UnrealCore::CallStaticFunctionResults::_capnpPrivate::pointerCount;
#endif  // !CAPNP_NEED_REDUNDANT_CONSTEXPR_DECL
#if !CAPNP_LITE
#if CAPNP_NEED_REDUNDANT_CONSTEXPR_DECL
constexpr ::capnp::Kind UnrealCore::CallStaticFunctionResults::_capnpPrivate::kind;
constexpr ::capnp::_::RawSchema const* UnrealCore::CallStaticFunctionResults::_capnpPrivate::schema;
#endif  // !CAPNP_NEED_REDUNDANT_CONSTEXPR_DECL
#endif  // !CAPNP_LITE

// UnrealCore::FindClassParams
#if CAPNP_NEED_REDUNDANT_CONSTEXPR_DECL
constexpr uint16_t UnrealCore::FindClassParams::_capnpPrivate::dataWordSize;
constexpr uint16_t UnrealCore::FindClassParams::_capnpPrivate::pointerCount;
#endif  // !CAPNP_NEED_REDUNDANT_CONSTEXPR_DECL
#if !CAPNP_LITE
#if CAPNP_NEED_REDUNDANT_CONSTEXPR_DECL
constexpr ::capnp::Kind UnrealCore::FindClassParams::_capnpPrivate::kind;
constexpr ::capnp::_::RawSchema const* UnrealCore::FindClassParams::_capnpPrivate::schema;
#endif  // !CAPNP_NEED_REDUNDANT_CONSTEXPR_DECL
#endif  // !CAPNP_LITE

// UnrealCore::FindClassResults
#if CAPNP_NEED_REDUNDANT_CONSTEXPR_DECL
constexpr uint16_t UnrealCore::FindClassResults::_capnpPrivate::dataWordSize;
constexpr uint16_t UnrealCore::FindClassResults::_capnpPrivate::pointerCount;
#endif  // !CAPNP_NEED_REDUNDANT_CONSTEXPR_DECL
#if !CAPNP_LITE
#if CAPNP_NEED_REDUNDANT_CONSTEXPR_DECL
constexpr ::capnp::Kind UnrealCore::FindClassResults::_capnpPrivate::kind;
constexpr ::capnp::_::RawSchema const* UnrealCore::FindClassResults::_capnpPrivate::schema;
#endif  // !CAPNP_NEED_REDUNDANT_CONSTEXPR_DECL
#endif  // !CAPNP_LITE

// UnrealCore::LoadClassParams
#if CAPNP_NEED_REDUNDANT_CONSTEXPR_DECL
constexpr uint16_t UnrealCore::LoadClassParams::_capnpPrivate::dataWordSize;
constexpr uint16_t UnrealCore::LoadClassParams::_capnpPrivate::pointerCount;
#endif  // !CAPNP_NEED_REDUNDANT_CONSTEXPR_DECL
#if !CAPNP_LITE
#if CAPNP_NEED_REDUNDANT_CONSTEXPR_DECL
constexpr ::capnp::Kind UnrealCore::LoadClassParams::_capnpPrivate::kind;
constexpr ::capnp::_::RawSchema const* UnrealCore::LoadClassParams::_capnpPrivate::schema;
#endif  // !CAPNP_NEED_REDUNDANT_CONSTEXPR_DECL
#endif  // !CAPNP_LITE

// UnrealCore::LoadClassResults
#if CAPNP_NEED_REDUNDANT_CONSTEXPR_DECL
constexpr uint16_t UnrealCore::LoadClassResults::_capnpPrivate::dataWordSize;
constexpr uint16_t UnrealCore::LoadClassResults::_capnpPrivate::pointerCount;
#endif  // !CAPNP_NEED_REDUNDANT_CONSTEXPR_DECL
#if !CAPNP_LITE
#if CAPNP_NEED_REDUNDANT_CONSTEXPR_DECL
constexpr ::capnp::Kind UnrealCore::LoadClassResults::_capnpPrivate::kind;
constexpr ::capnp::_::RawSchema const* UnrealCore::LoadClassResults::_capnpPrivate::schema;
#endif  // !CAPNP_NEED_REDUNDANT_CONSTEXPR_DECL
#endif  // !CAPNP_LITE

// UnrealCore::StaticClassParams
#if CAPNP_NEED_REDUNDANT_CONSTEXPR_DECL
constexpr uint16_t UnrealCore::StaticClassParams::_capnpPrivate::dataWordSize;
constexpr uint16_t UnrealCore::StaticClassParams::_capnpPrivate::pointerCount;
#endif  // !CAPNP_NEED_REDUNDANT_CONSTEXPR_DECL
#if !CAPNP_LITE
#if CAPNP_NEED_REDUNDANT_CONSTEXPR_DECL
constexpr ::capnp::Kind UnrealCore::StaticClassParams::_capnpPrivate::kind;
constexpr ::capnp::_::RawSchema const* UnrealCore::StaticClassParams::_capnpPrivate::schema;
#endif  // !CAPNP_NEED_REDUNDANT_CONSTEXPR_DECL
#endif  // !CAPNP_LITE

// UnrealCore::StaticClassResults
#if CAPNP_NEED_REDUNDANT_CONSTEXPR_DECL
constexpr uint16_t UnrealCore::StaticClassResults::_capnpPrivate::dataWordSize;
constexpr uint16_t UnrealCore::StaticClassResults::_capnpPrivate::pointerCount;
#endif  // !CAPNP_NEED_REDUNDANT_CONSTEXPR_DECL
#if !CAPNP_LITE
#if CAPNP_NEED_REDUNDANT_CONSTEXPR_DECL
constexpr ::capnp::Kind UnrealCore::StaticClassResults::_capnpPrivate::kind;
constexpr ::capnp::_::RawSchema const* UnrealCore::StaticClassResults::_capnpPrivate::schema;
#endif  // !CAPNP_NEED_REDUNDANT_CONSTEXPR_DECL
#endif  // !CAPNP_LITE

// UnrealCore::BindDelegateParams
#if CAPNP_NEED_REDUNDANT_CONSTEXPR_DECL
constexpr uint16_t UnrealCore::BindDelegateParams::_capnpPrivate::dataWordSize;
constexpr uint16_t UnrealCore::BindDelegateParams::_capnpPrivate::pointerCount;
#endif  // !CAPNP_NEED_REDUNDANT_CONSTEXPR_DECL
#if !CAPNP_LITE
#if CAPNP_NEED_REDUNDANT_CONSTEXPR_DECL
constexpr ::capnp::Kind UnrealCore::BindDelegateParams::_capnpPrivate::kind;
constexpr ::capnp::_::RawSchema const* UnrealCore::BindDelegateParams::_capnpPrivate::schema;
#endif  // !CAPNP_NEED_REDUNDANT_CONSTEXPR_DECL
#endif  // !CAPNP_LITE

// UnrealCore::BindDelegateResults
#if CAPNP_NEED_REDUNDANT_CONSTEXPR_DECL
constexpr uint16_t UnrealCore::BindDelegateResults::_capnpPrivate::dataWordSize;
constexpr uint16_t UnrealCore::BindDelegateResults::_capnpPrivate::pointerCount;
#endif  // !CAPNP_NEED_REDUNDANT_CONSTEXPR_DECL
#if !CAPNP_LITE
#if CAPNP_NEED_REDUNDANT_CONSTEXPR_DECL
constexpr ::capnp::Kind UnrealCore::BindDelegateResults::_capnpPrivate::kind;
constexpr ::capnp::_::RawSchema const* UnrealCore::BindDelegateResults::_capnpPrivate::schema;
#endif  // !CAPNP_NEED_REDUNDANT_CONSTEXPR_DECL
#endif  // !CAPNP_LITE

// UnrealCore::UnbindDelegateParams
#if CAPNP_NEED_REDUNDANT_CONSTEXPR_DECL
constexpr uint16_t UnrealCore::UnbindDelegateParams::_capnpPrivate::dataWordSize;
constexpr uint16_t UnrealCore::UnbindDelegateParams::_capnpPrivate::pointerCount;
#endif  // !CAPNP_NEED_REDUNDANT_CONSTEXPR_DECL
#if !CAPNP_LITE
#if CAPNP_NEED_REDUNDANT_CONSTEXPR_DECL
constexpr ::capnp::Kind UnrealCore::UnbindDelegateParams::_capnpPrivate::kind;
constexpr ::capnp::_::RawSchema const* UnrealCore::UnbindDelegateParams::_capnpPrivate::schema;
#endif  // !CAPNP_NEED_REDUNDANT_CONSTEXPR_DECL
#endif  // !CAPNP_LITE

// UnrealCore::UnbindDelegateResults
#if CAPNP_NEED_REDUNDANT_CONSTEXPR_DECL
constexpr uint16_t UnrealCore::UnbindDelegateResults::_capnpPrivate::dataWordSize;
constexpr uint16_t UnrealCore::UnbindDelegateResults::_capnpPrivate::pointerCount;
#endif  // !CAPNP_NEED_REDUNDANT_CONSTEXPR_DECL
#if !CAPNP_LITE
#if CAPNP_NEED_REDUNDANT_CONSTEXPR_DECL
constexpr ::capnp::Kind UnrealCore::UnbindDelegateResults::_capnpPrivate::kind;
constexpr ::capnp::_::RawSchema const* UnrealCore::UnbindDelegateResults::_capnpPrivate::schema;
#endif  // !CAPNP_NEED_REDUNDANT_CONSTEXPR_DECL
#endif  // !CAPNP_LITE

// UnrealCore::AddMultiDelegateParams
#if CAPNP_NEED_REDUNDANT_CONSTEXPR_DECL
constexpr uint16_t UnrealCore::AddMultiDelegateParams::_capnpPrivate::dataWordSize;
constexpr uint16_t UnrealCore::AddMultiDelegateParams::_capnpPrivate::pointerCount;
#endif  // !CAPNP_NEED_REDUNDANT_CONSTEXPR_DECL
#if !CAPNP_LITE
#if CAPNP_NEED_REDUNDANT_CONSTEXPR_DECL
constexpr ::capnp::Kind UnrealCore::AddMultiDelegateParams::_capnpPrivate::kind;
constexpr ::capnp::_::RawSchema const* UnrealCore::AddMultiDelegateParams::_capnpPrivate::schema;
#endif  // !CAPNP_NEED_REDUNDANT_CONSTEXPR_DECL
#endif  // !CAPNP_LITE

// UnrealCore::AddMultiDelegateResults
#if CAPNP_NEED_REDUNDANT_CONSTEXPR_DECL
constexpr uint16_t UnrealCore::AddMultiDelegateResults::_capnpPrivate::dataWordSize;
constexpr uint16_t UnrealCore::AddMultiDelegateResults::_capnpPrivate::pointerCount;
#endif  // !CAPNP_NEED_REDUNDANT_CONSTEXPR_DECL
#if !CAPNP_LITE
#if CAPNP_NEED_REDUNDANT_CONSTEXPR_DECL
constexpr ::capnp::Kind UnrealCore::AddMultiDelegateResults::_capnpPrivate::kind;
constexpr ::capnp::_::RawSchema const* UnrealCore::AddMultiDelegateResults::_capnpPrivate::schema;
#endif  // !CAPNP_NEED_REDUNDANT_CONSTEXPR_DECL
#endif  // !CAPNP_LITE

// UnrealCore::RemoveMultiDelegateParams
#if CAPNP_NEED_REDUNDANT_CONSTEXPR_DECL
constexpr uint16_t UnrealCore::RemoveMultiDelegateParams::_capnpPrivate::dataWordSize;
constexpr uint16_t UnrealCore::RemoveMultiDelegateParams::_capnpPrivate::pointerCount;
#endif  // !CAPNP_NEED_REDUNDANT_CONSTEXPR_DECL
#if !CAPNP_LITE
#if CAPNP_NEED_REDUNDANT_CONSTEXPR_DECL
constexpr ::capnp::Kind UnrealCore::RemoveMultiDelegateParams::_capnpPrivate::kind;
constexpr ::capnp::_::RawSchema const* UnrealCore::RemoveMultiDelegateParams::_capnpPrivate::schema;
#endif  // !CAPNP_NEED_REDUNDANT_CONSTEXPR_DECL
#endif  // !CAPNP_LITE

// UnrealCore::RemoveMultiDelegateResults
#if CAPNP_NEED_REDUNDANT_CONSTEXPR_DECL
constexpr uint16_t UnrealCore::RemoveMultiDelegateResults::_capnpPrivate::dataWordSize;
constexpr uint16_t UnrealCore::RemoveMultiDelegateResults::_capnpPrivate::pointerCount;
#endif  // !CAPNP_NEED_REDUNDANT_CONSTEXPR_DECL
#if !CAPNP_LITE
#if CAPNP_NEED_REDUNDANT_CONSTEXPR_DECL
constexpr ::capnp::Kind UnrealCore::RemoveMultiDelegateResults::_capnpPrivate::kind;
constexpr ::capnp::_::RawSchema const* UnrealCore::RemoveMultiDelegateResults::_capnpPrivate::schema;
#endif  // !CAPNP_NEED_REDUNDANT_CONSTEXPR_DECL
#endif  // !CAPNP_LITE

// UnrealCore::RegisterOverrideClassParams
#if CAPNP_NEED_REDUNDANT_CONSTEXPR_DECL
constexpr uint16_t UnrealCore::RegisterOverrideClassParams::_capnpPrivate::dataWordSize;
constexpr uint16_t UnrealCore::RegisterOverrideClassParams::_capnpPrivate::pointerCount;
#endif  // !CAPNP_NEED_REDUNDANT_CONSTEXPR_DECL
#if !CAPNP_LITE
#if CAPNP_NEED_REDUNDANT_CONSTEXPR_DECL
constexpr ::capnp::Kind UnrealCore::RegisterOverrideClassParams::_capnpPrivate::kind;
constexpr ::capnp::_::RawSchema const* UnrealCore::RegisterOverrideClassParams::_capnpPrivate::schema;
#endif  // !CAPNP_NEED_REDUNDANT_CONSTEXPR_DECL
#endif  // !CAPNP_LITE

// UnrealCore::RegisterOverrideClassResults
#if CAPNP_NEED_REDUNDANT_CONSTEXPR_DECL
constexpr uint16_t UnrealCore::RegisterOverrideClassResults::_capnpPrivate::dataWordSize;
constexpr uint16_t UnrealCore::RegisterOverrideClassResults::_capnpPrivate::pointerCount;
#endif  // !CAPNP_NEED_REDUNDANT_CONSTEXPR_DECL
#if !CAPNP_LITE
#if CAPNP_NEED_REDUNDANT_CONSTEXPR_DECL
constexpr ::capnp::Kind UnrealCore::RegisterOverrideClassResults::_capnpPrivate::kind;
constexpr ::capnp::_::RawSchema const* UnrealCore::RegisterOverrideClassResults::_capnpPrivate::schema;
#endif  // !CAPNP_NEED_REDUNDANT_CONSTEXPR_DECL
#endif  // !CAPNP_LITE

// UnrealCore::UnregisterOverrideClassParams
#if CAPNP_NEED_REDUNDANT_CONSTEXPR_DECL
constexpr uint16_t UnrealCore::UnregisterOverrideClassParams::_capnpPrivate::dataWordSize;
constexpr uint16_t UnrealCore::UnregisterOverrideClassParams::_capnpPrivate::pointerCount;
#endif  // !CAPNP_NEED_REDUNDANT_CONSTEXPR_DECL
#if !CAPNP_LITE
#if CAPNP_NEED_REDUNDANT_CONSTEXPR_DECL
constexpr ::capnp::Kind UnrealCore::UnregisterOverrideClassParams::_capnpPrivate::kind;
constexpr ::capnp::_::RawSchema const* UnrealCore::UnregisterOverrideClassParams::_capnpPrivate::schema;
#endif  // !CAPNP_NEED_REDUNDANT_CONSTEXPR_DECL
#endif  // !CAPNP_LITE

// UnrealCore::UnregisterOverrideClassResults
#if CAPNP_NEED_REDUNDANT_CONSTEXPR_DECL
constexpr uint16_t UnrealCore::UnregisterOverrideClassResults::_capnpPrivate::dataWordSize;
constexpr uint16_t UnrealCore::UnregisterOverrideClassResults::_capnpPrivate::pointerCount;
#endif  // !CAPNP_NEED_REDUNDANT_CONSTEXPR_DECL
#if !CAPNP_LITE
#if CAPNP_NEED_REDUNDANT_CONSTEXPR_DECL
constexpr ::capnp::Kind UnrealCore::UnregisterOverrideClassResults::_capnpPrivate::kind;
constexpr ::capnp::_::RawSchema const* UnrealCore::UnregisterOverrideClassResults::_capnpPrivate::schema;
#endif  // !CAPNP_NEED_REDUNDANT_CONSTEXPR_DECL
#endif  // !CAPNP_LITE

// UnrealCore::SetPropertyParams
#if CAPNP_NEED_REDUNDANT_CONSTEXPR_DECL
constexpr uint16_t UnrealCore::SetPropertyParams::_capnpPrivate::dataWordSize;
constexpr uint16_t UnrealCore::SetPropertyParams::_capnpPrivate::pointerCount;
#endif  // !CAPNP_NEED_REDUNDANT_CONSTEXPR_DECL
#if !CAPNP_LITE
#if CAPNP_NEED_REDUNDANT_CONSTEXPR_DECL
constexpr ::capnp::Kind UnrealCore::SetPropertyParams::_capnpPrivate::kind;
constexpr ::capnp::_::RawSchema const* UnrealCore::SetPropertyParams::_capnpPrivate::schema;
#endif  // !CAPNP_NEED_REDUNDANT_CONSTEXPR_DECL
#endif  // !CAPNP_LITE

// UnrealCore::SetPropertyResults
#if CAPNP_NEED_REDUNDANT_CONSTEXPR_DECL
constexpr uint16_t UnrealCore::SetPropertyResults::_capnpPrivate::dataWordSize;
constexpr uint16_t UnrealCore::SetPropertyResults::_capnpPrivate::pointerCount;
#endif  // !CAPNP_NEED_REDUNDANT_CONSTEXPR_DECL
#if !CAPNP_LITE
#if CAPNP_NEED_REDUNDANT_CONSTEXPR_DECL
constexpr ::capnp::Kind UnrealCore::SetPropertyResults::_capnpPrivate::kind;
constexpr ::capnp::_::RawSchema const* UnrealCore::SetPropertyResults::_capnpPrivate::schema;
#endif  // !CAPNP_NEED_REDUNDANT_CONSTEXPR_DECL
#endif  // !CAPNP_LITE

// UnrealCore::GetPropertyParams
#if CAPNP_NEED_REDUNDANT_CONSTEXPR_DECL
constexpr uint16_t UnrealCore::GetPropertyParams::_capnpPrivate::dataWordSize;
constexpr uint16_t UnrealCore::GetPropertyParams::_capnpPrivate::pointerCount;
#endif  // !CAPNP_NEED_REDUNDANT_CONSTEXPR_DECL
#if !CAPNP_LITE
#if CAPNP_NEED_REDUNDANT_CONSTEXPR_DECL
constexpr ::capnp::Kind UnrealCore::GetPropertyParams::_capnpPrivate::kind;
constexpr ::capnp::_::RawSchema const* UnrealCore::GetPropertyParams::_capnpPrivate::schema;
#endif  // !CAPNP_NEED_REDUNDANT_CONSTEXPR_DECL
#endif  // !CAPNP_LITE

// UnrealCore::GetPropertyResults
#if CAPNP_NEED_REDUNDANT_CONSTEXPR_DECL
constexpr uint16_t UnrealCore::GetPropertyResults::_capnpPrivate::dataWordSize;
constexpr uint16_t UnrealCore::GetPropertyResults::_capnpPrivate::pointerCount;
#endif  // !CAPNP_NEED_REDUNDANT_CONSTEXPR_DECL
#if !CAPNP_LITE
#if CAPNP_NEED_REDUNDANT_CONSTEXPR_DECL
constexpr ::capnp::Kind UnrealCore::GetPropertyResults::_capnpPrivate::kind;
constexpr ::capnp::_::RawSchema const* UnrealCore::GetPropertyResults::_capnpPrivate::schema;
#endif  // !CAPNP_NEED_REDUNDANT_CONSTEXPR_DECL
#endif  // !CAPNP_LITE



