// Generated by Cap'n Proto compiler, DO NOT EDIT
// source: ue_core.capnp

#pragma once

#include <capnp/generated-header-support.h>
#include <kj/windows-sanity.h>
#if !CAPNP_LITE
#include <capnp/capability.h>
#endif  // !CAPNP_LITE

#ifndef CAPNP_VERSION
#error "CAPNP_VERSION is not defined, is capnp/generated-header-support.h missing?"
#elif CAPNP_VERSION != 1000002
#error "Version mismatch between generated code and library headers.  You must use the same version of the Cap'n Proto compiler and library."
#endif


CAPNP_BEGIN_HEADER

namespace capnp {
namespace schemas {

CAPNP_DECLARE_SCHEMA(8e1737faadc1c8be);
CAPNP_DECLARE_SCHEMA(bbbd9ab104716176);
CAPNP_DECLARE_SCHEMA(bda606608274c0bd);
CAPNP_DECLARE_SCHEMA(a53c5ce887c3c1e6);
CAPNP_DECLARE_SCHEMA(cdff00d120b52bc6);
CAPNP_DECLARE_SCHEMA(8f2d77d834a5e736);
CAPNP_DECLARE_SCHEMA(a46e9e12cd75e297);
CAPNP_DECLARE_SCHEMA(8853ccc3271ca36f);
CAPNP_DECLARE_SCHEMA(a836dc1c6539df6d);
CAPNP_DECLARE_SCHEMA(9e7b7ff32f28cfff);
CAPNP_DECLARE_SCHEMA(85af2da5e30b4dcf);
CAPNP_DECLARE_SCHEMA(84042774b2f94023);
CAPNP_DECLARE_SCHEMA(e93028909ce18c87);
CAPNP_DECLARE_SCHEMA(e8ae732560511590);
CAPNP_DECLARE_SCHEMA(d83f631716ef1a45);
CAPNP_DECLARE_SCHEMA(9b368dd4d1605190);
CAPNP_DECLARE_SCHEMA(fb878edbaf7b8288);
CAPNP_DECLARE_SCHEMA(c1e269cbbf7a7e86);
CAPNP_DECLARE_SCHEMA(d78410e4cefcb090);
CAPNP_DECLARE_SCHEMA(e874d7934c0342a9);
CAPNP_DECLARE_SCHEMA(ed1a745952b2ef0f);
CAPNP_DECLARE_SCHEMA(e5e41c8457176bf2);
CAPNP_DECLARE_SCHEMA(f3c0af0b0dfca37d);
CAPNP_DECLARE_SCHEMA(9abf79fcdc2bbddd);
CAPNP_DECLARE_SCHEMA(b72a6de10cd758f2);
CAPNP_DECLARE_SCHEMA(ccf3c5bc914ad34f);
CAPNP_DECLARE_SCHEMA(efff26269e9ba6bf);
CAPNP_DECLARE_SCHEMA(df498c81bea9c640);
CAPNP_DECLARE_SCHEMA(93b97f9e143854ef);
CAPNP_DECLARE_SCHEMA(e8b0a65565680b41);
CAPNP_DECLARE_SCHEMA(f0a1825f73741ede);
CAPNP_DECLARE_SCHEMA(bb2886aba98a7d6e);
CAPNP_DECLARE_SCHEMA(e596573cb7a70896);
CAPNP_DECLARE_SCHEMA(f524b8aa2fc26653);
CAPNP_DECLARE_SCHEMA(e1a9d4e3c6455e25);
CAPNP_DECLARE_SCHEMA(d8f836ed010a2e47);
CAPNP_DECLARE_SCHEMA(d84f6e8c84cb7c57);
CAPNP_DECLARE_SCHEMA(b19110ff56d453fa);
CAPNP_DECLARE_SCHEMA(b98d880189098282);
CAPNP_DECLARE_SCHEMA(a7e25842dfa5a75b);
CAPNP_DECLARE_SCHEMA(e3e7ec6b9d30864b);
CAPNP_DECLARE_SCHEMA(ff494a70ed24ffae);

}  // namespace schemas
}  // namespace capnp


struct UnrealCore {
  UnrealCore() = delete;

#if !CAPNP_LITE
  class Client;
  class Server;
#endif  // !CAPNP_LITE

  struct Object;
  struct Class;
  struct Argument;
  struct Property;
  struct Method;
  struct MethodCallable;
  struct DelegateCallback;
  struct NewObjectParams;
  struct NewObjectResults;
  struct DestroyObjectParams;
  struct DestroyObjectResults;
  struct CallFunctionParams;
  struct CallFunctionResults;
  struct CallStaticFunctionParams;
  struct CallStaticFunctionResults;
  struct FindClassParams;
  struct FindClassResults;
  struct LoadClassParams;
  struct LoadClassResults;
  struct StaticClassParams;
  struct StaticClassResults;
  struct BindDelegateParams;
  struct BindDelegateResults;
  struct UnbindDelegateParams;
  struct UnbindDelegateResults;
  struct AddMultiDelegateParams;
  struct AddMultiDelegateResults;
  struct RemoveMultiDelegateParams;
  struct RemoveMultiDelegateResults;
  struct RegisterOverrideClassParams;
  struct RegisterOverrideClassResults;
  struct UnregisterOverrideClassParams;
  struct UnregisterOverrideClassResults;
  struct SetPropertyParams;
  struct SetPropertyResults;
  struct GetPropertyParams;
  struct GetPropertyResults;

  #if !CAPNP_LITE
  struct _capnpPrivate {
    CAPNP_DECLARE_INTERFACE_HEADER(8e1737faadc1c8be)
    static constexpr ::capnp::_::RawBrandedSchema const* brand() { return &schema->defaultBrand; }
  };
  #endif  // !CAPNP_LITE
};

struct UnrealCore::Object {
  Object() = delete;

  class Reader;
  class Builder;
  class Pipeline;

  struct _capnpPrivate {
    CAPNP_DECLARE_STRUCT_HEADER(bbbd9ab104716176, 1, 1)
    #if !CAPNP_LITE
    static constexpr ::capnp::_::RawBrandedSchema const* brand() { return &schema->defaultBrand; }
    #endif  // !CAPNP_LITE
  };
};

struct UnrealCore::Class {
  Class() = delete;

  class Reader;
  class Builder;
  class Pipeline;

  struct _capnpPrivate {
    CAPNP_DECLARE_STRUCT_HEADER(bda606608274c0bd, 0, 1)
    #if !CAPNP_LITE
    static constexpr ::capnp::_::RawBrandedSchema const* brand() { return &schema->defaultBrand; }
    #endif  // !CAPNP_LITE
  };
};

struct UnrealCore::Argument {
  Argument() = delete;

  class Reader;
  class Builder;
  class Pipeline;
  enum Which: uint16_t {
    BOOL_VALUE,
    UINT_VALUE,
    INT_VALUE,
    STR_VALUE,
    FLOAT_VALUE,
    OBJECT,
    ENUM_VALUE,
  };

  struct _capnpPrivate {
    CAPNP_DECLARE_STRUCT_HEADER(a53c5ce887c3c1e6, 2, 3)
    #if !CAPNP_LITE
    static constexpr ::capnp::_::RawBrandedSchema const* brand() { return &schema->defaultBrand; }
    #endif  // !CAPNP_LITE
  };
};

struct UnrealCore::Property {
  Property() = delete;

  class Reader;
  class Builder;
  class Pipeline;
  enum Which: uint16_t {
    BOOL_VALUE,
    UINT_VALUE,
    INT_VALUE,
    STR_VALUE,
    FLOAT_VALUE,
    OBJECT,
    ENUM_VALUE,
  };

  struct _capnpPrivate {
    CAPNP_DECLARE_STRUCT_HEADER(cdff00d120b52bc6, 2, 3)
    #if !CAPNP_LITE
    static constexpr ::capnp::_::RawBrandedSchema const* brand() { return &schema->defaultBrand; }
    #endif  // !CAPNP_LITE
  };
};

struct UnrealCore::Method {
  Method() = delete;

  class Reader;
  class Builder;
  class Pipeline;

  struct _capnpPrivate {
    CAPNP_DECLARE_STRUCT_HEADER(8f2d77d834a5e736, 0, 1)
    #if !CAPNP_LITE
    static constexpr ::capnp::_::RawBrandedSchema const* brand() { return &schema->defaultBrand; }
    #endif  // !CAPNP_LITE
  };
};

struct UnrealCore::MethodCallable {
  MethodCallable() = delete;

#if !CAPNP_LITE
  class Client;
  class Server;
#endif  // !CAPNP_LITE

  struct InvokeParams;
  struct InvokeResults;

  #if !CAPNP_LITE
  struct _capnpPrivate {
    CAPNP_DECLARE_INTERFACE_HEADER(a46e9e12cd75e297)
    static constexpr ::capnp::_::RawBrandedSchema const* brand() { return &schema->defaultBrand; }
  };
  #endif  // !CAPNP_LITE
};

struct UnrealCore::MethodCallable::InvokeParams {
  InvokeParams() = delete;

  class Reader;
  class Builder;
  class Pipeline;

  struct _capnpPrivate {
    CAPNP_DECLARE_STRUCT_HEADER(8853ccc3271ca36f, 0, 1)
    #if !CAPNP_LITE
    static constexpr ::capnp::_::RawBrandedSchema const* brand() { return &schema->defaultBrand; }
    #endif  // !CAPNP_LITE
  };
};

struct UnrealCore::MethodCallable::InvokeResults {
  InvokeResults() = delete;

  class Reader;
  class Builder;
  class Pipeline;

  struct _capnpPrivate {
    CAPNP_DECLARE_STRUCT_HEADER(a836dc1c6539df6d, 0, 0)
    #if !CAPNP_LITE
    static constexpr ::capnp::_::RawBrandedSchema const* brand() { return &schema->defaultBrand; }
    #endif  // !CAPNP_LITE
  };
};

struct UnrealCore::DelegateCallback {
  DelegateCallback() = delete;

#if !CAPNP_LITE
  class Client;
  class Server;
#endif  // !CAPNP_LITE

  struct OnCallParams;
  struct OnCallResults;

  #if !CAPNP_LITE
  struct _capnpPrivate {
    CAPNP_DECLARE_INTERFACE_HEADER(9e7b7ff32f28cfff)
    static constexpr ::capnp::_::RawBrandedSchema const* brand() { return &schema->defaultBrand; }
  };
  #endif  // !CAPNP_LITE
};

struct UnrealCore::DelegateCallback::OnCallParams {
  OnCallParams() = delete;

  class Reader;
  class Builder;
  class Pipeline;

  struct _capnpPrivate {
    CAPNP_DECLARE_STRUCT_HEADER(85af2da5e30b4dcf, 0, 2)
    #if !CAPNP_LITE
    static constexpr ::capnp::_::RawBrandedSchema const* brand() { return &schema->defaultBrand; }
    #endif  // !CAPNP_LITE
  };
};

struct UnrealCore::DelegateCallback::OnCallResults {
  OnCallResults() = delete;

  class Reader;
  class Builder;
  class Pipeline;

  struct _capnpPrivate {
    CAPNP_DECLARE_STRUCT_HEADER(84042774b2f94023, 0, 0)
    #if !CAPNP_LITE
    static constexpr ::capnp::_::RawBrandedSchema const* brand() { return &schema->defaultBrand; }
    #endif  // !CAPNP_LITE
  };
};

struct UnrealCore::NewObjectParams {
  NewObjectParams() = delete;

  class Reader;
  class Builder;
  class Pipeline;

  struct _capnpPrivate {
    CAPNP_DECLARE_STRUCT_HEADER(e93028909ce18c87, 1, 4)
    #if !CAPNP_LITE
    static constexpr ::capnp::_::RawBrandedSchema const* brand() { return &schema->defaultBrand; }
    #endif  // !CAPNP_LITE
  };
};

struct UnrealCore::NewObjectResults {
  NewObjectResults() = delete;

  class Reader;
  class Builder;
  class Pipeline;

  struct _capnpPrivate {
    CAPNP_DECLARE_STRUCT_HEADER(e8ae732560511590, 0, 1)
    #if !CAPNP_LITE
    static constexpr ::capnp::_::RawBrandedSchema const* brand() { return &schema->defaultBrand; }
    #endif  // !CAPNP_LITE
  };
};

struct UnrealCore::DestroyObjectParams {
  DestroyObjectParams() = delete;

  class Reader;
  class Builder;
  class Pipeline;

  struct _capnpPrivate {
    CAPNP_DECLARE_STRUCT_HEADER(d83f631716ef1a45, 0, 1)
    #if !CAPNP_LITE
    static constexpr ::capnp::_::RawBrandedSchema const* brand() { return &schema->defaultBrand; }
    #endif  // !CAPNP_LITE
  };
};

struct UnrealCore::DestroyObjectResults {
  DestroyObjectResults() = delete;

  class Reader;
  class Builder;
  class Pipeline;

  struct _capnpPrivate {
    CAPNP_DECLARE_STRUCT_HEADER(9b368dd4d1605190, 1, 0)
    #if !CAPNP_LITE
    static constexpr ::capnp::_::RawBrandedSchema const* brand() { return &schema->defaultBrand; }
    #endif  // !CAPNP_LITE
  };
};

struct UnrealCore::CallFunctionParams {
  CallFunctionParams() = delete;

  class Reader;
  class Builder;
  class Pipeline;

  struct _capnpPrivate {
    CAPNP_DECLARE_STRUCT_HEADER(fb878edbaf7b8288, 0, 5)
    #if !CAPNP_LITE
    static constexpr ::capnp::_::RawBrandedSchema const* brand() { return &schema->defaultBrand; }
    #endif  // !CAPNP_LITE
  };
};

struct UnrealCore::CallFunctionResults {
  CallFunctionResults() = delete;

  class Reader;
  class Builder;
  class Pipeline;

  struct _capnpPrivate {
    CAPNP_DECLARE_STRUCT_HEADER(c1e269cbbf7a7e86, 0, 2)
    #if !CAPNP_LITE
    static constexpr ::capnp::_::RawBrandedSchema const* brand() { return &schema->defaultBrand; }
    #endif  // !CAPNP_LITE
  };
};

struct UnrealCore::CallStaticFunctionParams {
  CallStaticFunctionParams() = delete;

  class Reader;
  class Builder;
  class Pipeline;

  struct _capnpPrivate {
    CAPNP_DECLARE_STRUCT_HEADER(d78410e4cefcb090, 0, 3)
    #if !CAPNP_LITE
    static constexpr ::capnp::_::RawBrandedSchema const* brand() { return &schema->defaultBrand; }
    #endif  // !CAPNP_LITE
  };
};

struct UnrealCore::CallStaticFunctionResults {
  CallStaticFunctionResults() = delete;

  class Reader;
  class Builder;
  class Pipeline;

  struct _capnpPrivate {
    CAPNP_DECLARE_STRUCT_HEADER(e874d7934c0342a9, 0, 2)
    #if !CAPNP_LITE
    static constexpr ::capnp::_::RawBrandedSchema const* brand() { return &schema->defaultBrand; }
    #endif  // !CAPNP_LITE
  };
};

struct UnrealCore::FindClassParams {
  FindClassParams() = delete;

  class Reader;
  class Builder;
  class Pipeline;

  struct _capnpPrivate {
    CAPNP_DECLARE_STRUCT_HEADER(ed1a745952b2ef0f, 0, 1)
    #if !CAPNP_LITE
    static constexpr ::capnp::_::RawBrandedSchema const* brand() { return &schema->defaultBrand; }
    #endif  // !CAPNP_LITE
  };
};

struct UnrealCore::FindClassResults {
  FindClassResults() = delete;

  class Reader;
  class Builder;
  class Pipeline;

  struct _capnpPrivate {
    CAPNP_DECLARE_STRUCT_HEADER(e5e41c8457176bf2, 0, 1)
    #if !CAPNP_LITE
    static constexpr ::capnp::_::RawBrandedSchema const* brand() { return &schema->defaultBrand; }
    #endif  // !CAPNP_LITE
  };
};

struct UnrealCore::LoadClassParams {
  LoadClassParams() = delete;

  class Reader;
  class Builder;
  class Pipeline;

  struct _capnpPrivate {
    CAPNP_DECLARE_STRUCT_HEADER(f3c0af0b0dfca37d, 0, 1)
    #if !CAPNP_LITE
    static constexpr ::capnp::_::RawBrandedSchema const* brand() { return &schema->defaultBrand; }
    #endif  // !CAPNP_LITE
  };
};

struct UnrealCore::LoadClassResults {
  LoadClassResults() = delete;

  class Reader;
  class Builder;
  class Pipeline;

  struct _capnpPrivate {
    CAPNP_DECLARE_STRUCT_HEADER(9abf79fcdc2bbddd, 0, 1)
    #if !CAPNP_LITE
    static constexpr ::capnp::_::RawBrandedSchema const* brand() { return &schema->defaultBrand; }
    #endif  // !CAPNP_LITE
  };
};

struct UnrealCore::StaticClassParams {
  StaticClassParams() = delete;

  class Reader;
  class Builder;
  class Pipeline;

  struct _capnpPrivate {
    CAPNP_DECLARE_STRUCT_HEADER(b72a6de10cd758f2, 0, 1)
    #if !CAPNP_LITE
    static constexpr ::capnp::_::RawBrandedSchema const* brand() { return &schema->defaultBrand; }
    #endif  // !CAPNP_LITE
  };
};

struct UnrealCore::StaticClassResults {
  StaticClassResults() = delete;

  class Reader;
  class Builder;
  class Pipeline;

  struct _capnpPrivate {
    CAPNP_DECLARE_STRUCT_HEADER(ccf3c5bc914ad34f, 0, 1)
    #if !CAPNP_LITE
    static constexpr ::capnp::_::RawBrandedSchema const* brand() { return &schema->defaultBrand; }
    #endif  // !CAPNP_LITE
  };
};

struct UnrealCore::BindDelegateParams {
  BindDelegateParams() = delete;

  class Reader;
  class Builder;
  class Pipeline;

  struct _capnpPrivate {
    CAPNP_DECLARE_STRUCT_HEADER(efff26269e9ba6bf, 0, 2)
    #if !CAPNP_LITE
    static constexpr ::capnp::_::RawBrandedSchema const* brand() { return &schema->defaultBrand; }
    #endif  // !CAPNP_LITE
  };
};

struct UnrealCore::BindDelegateResults {
  BindDelegateResults() = delete;

  class Reader;
  class Builder;
  class Pipeline;

  struct _capnpPrivate {
    CAPNP_DECLARE_STRUCT_HEADER(df498c81bea9c640, 0, 0)
    #if !CAPNP_LITE
    static constexpr ::capnp::_::RawBrandedSchema const* brand() { return &schema->defaultBrand; }
    #endif  // !CAPNP_LITE
  };
};

struct UnrealCore::UnbindDelegateParams {
  UnbindDelegateParams() = delete;

  class Reader;
  class Builder;
  class Pipeline;

  struct _capnpPrivate {
    CAPNP_DECLARE_STRUCT_HEADER(93b97f9e143854ef, 0, 1)
    #if !CAPNP_LITE
    static constexpr ::capnp::_::RawBrandedSchema const* brand() { return &schema->defaultBrand; }
    #endif  // !CAPNP_LITE
  };
};

struct UnrealCore::UnbindDelegateResults {
  UnbindDelegateResults() = delete;

  class Reader;
  class Builder;
  class Pipeline;

  struct _capnpPrivate {
    CAPNP_DECLARE_STRUCT_HEADER(e8b0a65565680b41, 0, 0)
    #if !CAPNP_LITE
    static constexpr ::capnp::_::RawBrandedSchema const* brand() { return &schema->defaultBrand; }
    #endif  // !CAPNP_LITE
  };
};

struct UnrealCore::AddMultiDelegateParams {
  AddMultiDelegateParams() = delete;

  class Reader;
  class Builder;
  class Pipeline;

  struct _capnpPrivate {
    CAPNP_DECLARE_STRUCT_HEADER(f0a1825f73741ede, 0, 2)
    #if !CAPNP_LITE
    static constexpr ::capnp::_::RawBrandedSchema const* brand() { return &schema->defaultBrand; }
    #endif  // !CAPNP_LITE
  };
};

struct UnrealCore::AddMultiDelegateResults {
  AddMultiDelegateResults() = delete;

  class Reader;
  class Builder;
  class Pipeline;

  struct _capnpPrivate {
    CAPNP_DECLARE_STRUCT_HEADER(bb2886aba98a7d6e, 0, 1)
    #if !CAPNP_LITE
    static constexpr ::capnp::_::RawBrandedSchema const* brand() { return &schema->defaultBrand; }
    #endif  // !CAPNP_LITE
  };
};

struct UnrealCore::RemoveMultiDelegateParams {
  RemoveMultiDelegateParams() = delete;

  class Reader;
  class Builder;
  class Pipeline;

  struct _capnpPrivate {
    CAPNP_DECLARE_STRUCT_HEADER(e596573cb7a70896, 0, 2)
    #if !CAPNP_LITE
    static constexpr ::capnp::_::RawBrandedSchema const* brand() { return &schema->defaultBrand; }
    #endif  // !CAPNP_LITE
  };
};

struct UnrealCore::RemoveMultiDelegateResults {
  RemoveMultiDelegateResults() = delete;

  class Reader;
  class Builder;
  class Pipeline;

  struct _capnpPrivate {
    CAPNP_DECLARE_STRUCT_HEADER(f524b8aa2fc26653, 0, 0)
    #if !CAPNP_LITE
    static constexpr ::capnp::_::RawBrandedSchema const* brand() { return &schema->defaultBrand; }
    #endif  // !CAPNP_LITE
  };
};

struct UnrealCore::RegisterOverrideClassParams {
  RegisterOverrideClassParams() = delete;

  class Reader;
  class Builder;
  class Pipeline;

  struct _capnpPrivate {
    CAPNP_DECLARE_STRUCT_HEADER(e1a9d4e3c6455e25, 0, 3)
    #if !CAPNP_LITE
    static constexpr ::capnp::_::RawBrandedSchema const* brand() { return &schema->defaultBrand; }
    #endif  // !CAPNP_LITE
  };
};

struct UnrealCore::RegisterOverrideClassResults {
  RegisterOverrideClassResults() = delete;

  class Reader;
  class Builder;
  class Pipeline;

  struct _capnpPrivate {
    CAPNP_DECLARE_STRUCT_HEADER(d8f836ed010a2e47, 0, 0)
    #if !CAPNP_LITE
    static constexpr ::capnp::_::RawBrandedSchema const* brand() { return &schema->defaultBrand; }
    #endif  // !CAPNP_LITE
  };
};

struct UnrealCore::UnregisterOverrideClassParams {
  UnregisterOverrideClassParams() = delete;

  class Reader;
  class Builder;
  class Pipeline;

  struct _capnpPrivate {
    CAPNP_DECLARE_STRUCT_HEADER(d84f6e8c84cb7c57, 0, 2)
    #if !CAPNP_LITE
    static constexpr ::capnp::_::RawBrandedSchema const* brand() { return &schema->defaultBrand; }
    #endif  // !CAPNP_LITE
  };
};

struct UnrealCore::UnregisterOverrideClassResults {
  UnregisterOverrideClassResults() = delete;

  class Reader;
  class Builder;
  class Pipeline;

  struct _capnpPrivate {
    CAPNP_DECLARE_STRUCT_HEADER(b19110ff56d453fa, 0, 0)
    #if !CAPNP_LITE
    static constexpr ::capnp::_::RawBrandedSchema const* brand() { return &schema->defaultBrand; }
    #endif  // !CAPNP_LITE
  };
};

struct UnrealCore::SetPropertyParams {
  SetPropertyParams() = delete;

  class Reader;
  class Builder;
  class Pipeline;

  struct _capnpPrivate {
    CAPNP_DECLARE_STRUCT_HEADER(b98d880189098282, 0, 3)
    #if !CAPNP_LITE
    static constexpr ::capnp::_::RawBrandedSchema const* brand() { return &schema->defaultBrand; }
    #endif  // !CAPNP_LITE
  };
};

struct UnrealCore::SetPropertyResults {
  SetPropertyResults() = delete;

  class Reader;
  class Builder;
  class Pipeline;

  struct _capnpPrivate {
    CAPNP_DECLARE_STRUCT_HEADER(a7e25842dfa5a75b, 0, 0)
    #if !CAPNP_LITE
    static constexpr ::capnp::_::RawBrandedSchema const* brand() { return &schema->defaultBrand; }
    #endif  // !CAPNP_LITE
  };
};

struct UnrealCore::GetPropertyParams {
  GetPropertyParams() = delete;

  class Reader;
  class Builder;
  class Pipeline;

  struct _capnpPrivate {
    CAPNP_DECLARE_STRUCT_HEADER(e3e7ec6b9d30864b, 0, 3)
    #if !CAPNP_LITE
    static constexpr ::capnp::_::RawBrandedSchema const* brand() { return &schema->defaultBrand; }
    #endif  // !CAPNP_LITE
  };
};

struct UnrealCore::GetPropertyResults {
  GetPropertyResults() = delete;

  class Reader;
  class Builder;
  class Pipeline;

  struct _capnpPrivate {
    CAPNP_DECLARE_STRUCT_HEADER(ff494a70ed24ffae, 0, 1)
    #if !CAPNP_LITE
    static constexpr ::capnp::_::RawBrandedSchema const* brand() { return &schema->defaultBrand; }
    #endif  // !CAPNP_LITE
  };
};

// =======================================================================================

#if !CAPNP_LITE
class UnrealCore::Client
    : public virtual ::capnp::Capability::Client {
public:
  typedef UnrealCore Calls;
  typedef UnrealCore Reads;

  Client(decltype(nullptr));
  explicit Client(::kj::Own< ::capnp::ClientHook>&& hook);
  template <typename _t, typename = ::kj::EnableIf< ::kj::canConvert<_t*, Server*>()>>
  Client(::kj::Own<_t>&& server);
  template <typename _t, typename = ::kj::EnableIf< ::kj::canConvert<_t*, Client*>()>>
  Client(::kj::Promise<_t>&& promise);
  Client(::kj::Exception&& exception);
  Client(Client&) = default;
  Client(Client&&) = default;
  Client& operator=(Client& other);
  Client& operator=(Client&& other);

  ::capnp::Request< ::UnrealCore::NewObjectParams,  ::UnrealCore::NewObjectResults> newObjectRequest(
      ::kj::Maybe< ::capnp::MessageSize> sizeHint = nullptr);
  ::capnp::Request< ::UnrealCore::DestroyObjectParams,  ::UnrealCore::DestroyObjectResults> destroyObjectRequest(
      ::kj::Maybe< ::capnp::MessageSize> sizeHint = nullptr);
  ::capnp::Request< ::UnrealCore::CallFunctionParams,  ::UnrealCore::CallFunctionResults> callFunctionRequest(
      ::kj::Maybe< ::capnp::MessageSize> sizeHint = nullptr);
  ::capnp::Request< ::UnrealCore::CallStaticFunctionParams,  ::UnrealCore::CallStaticFunctionResults> callStaticFunctionRequest(
      ::kj::Maybe< ::capnp::MessageSize> sizeHint = nullptr);
  ::capnp::Request< ::UnrealCore::FindClassParams,  ::UnrealCore::FindClassResults> findClassRequest(
      ::kj::Maybe< ::capnp::MessageSize> sizeHint = nullptr);
  ::capnp::Request< ::UnrealCore::LoadClassParams,  ::UnrealCore::LoadClassResults> loadClassRequest(
      ::kj::Maybe< ::capnp::MessageSize> sizeHint = nullptr);
  ::capnp::Request< ::UnrealCore::StaticClassParams,  ::UnrealCore::StaticClassResults> staticClassRequest(
      ::kj::Maybe< ::capnp::MessageSize> sizeHint = nullptr);
  ::capnp::Request< ::UnrealCore::BindDelegateParams,  ::UnrealCore::BindDelegateResults> bindDelegateRequest(
      ::kj::Maybe< ::capnp::MessageSize> sizeHint = nullptr);
  ::capnp::Request< ::UnrealCore::UnbindDelegateParams,  ::UnrealCore::UnbindDelegateResults> unbindDelegateRequest(
      ::kj::Maybe< ::capnp::MessageSize> sizeHint = nullptr);
  ::capnp::Request< ::UnrealCore::AddMultiDelegateParams,  ::UnrealCore::AddMultiDelegateResults> addMultiDelegateRequest(
      ::kj::Maybe< ::capnp::MessageSize> sizeHint = nullptr);
  ::capnp::Request< ::UnrealCore::RemoveMultiDelegateParams,  ::UnrealCore::RemoveMultiDelegateResults> removeMultiDelegateRequest(
      ::kj::Maybe< ::capnp::MessageSize> sizeHint = nullptr);
  ::capnp::Request< ::UnrealCore::RegisterOverrideClassParams,  ::UnrealCore::RegisterOverrideClassResults> registerOverrideClassRequest(
      ::kj::Maybe< ::capnp::MessageSize> sizeHint = nullptr);
  ::capnp::Request< ::UnrealCore::UnregisterOverrideClassParams,  ::UnrealCore::UnregisterOverrideClassResults> unregisterOverrideClassRequest(
      ::kj::Maybe< ::capnp::MessageSize> sizeHint = nullptr);
  ::capnp::Request< ::UnrealCore::SetPropertyParams,  ::UnrealCore::SetPropertyResults> setPropertyRequest(
      ::kj::Maybe< ::capnp::MessageSize> sizeHint = nullptr);
  ::capnp::Request< ::UnrealCore::GetPropertyParams,  ::UnrealCore::GetPropertyResults> getPropertyRequest(
      ::kj::Maybe< ::capnp::MessageSize> sizeHint = nullptr);

protected:
  Client() = default;
};

class UnrealCore::Server
    : public virtual ::capnp::Capability::Server {
public:
  typedef UnrealCore Serves;

  ::capnp::Capability::Server::DispatchCallResult dispatchCall(
      uint64_t interfaceId, uint16_t methodId,
      ::capnp::CallContext< ::capnp::AnyPointer, ::capnp::AnyPointer> context)
      override;

protected:
  typedef  ::UnrealCore::NewObjectParams NewObjectParams;
  typedef  ::UnrealCore::NewObjectResults NewObjectResults;
  typedef ::capnp::CallContext<NewObjectParams, NewObjectResults> NewObjectContext;
  virtual ::kj::Promise<void> newObject(NewObjectContext context);
  typedef  ::UnrealCore::DestroyObjectParams DestroyObjectParams;
  typedef  ::UnrealCore::DestroyObjectResults DestroyObjectResults;
  typedef ::capnp::CallContext<DestroyObjectParams, DestroyObjectResults> DestroyObjectContext;
  virtual ::kj::Promise<void> destroyObject(DestroyObjectContext context);
  typedef  ::UnrealCore::CallFunctionParams CallFunctionParams;
  typedef  ::UnrealCore::CallFunctionResults CallFunctionResults;
  typedef ::capnp::CallContext<CallFunctionParams, CallFunctionResults> CallFunctionContext;
  virtual ::kj::Promise<void> callFunction(CallFunctionContext context);
  typedef  ::UnrealCore::CallStaticFunctionParams CallStaticFunctionParams;
  typedef  ::UnrealCore::CallStaticFunctionResults CallStaticFunctionResults;
  typedef ::capnp::CallContext<CallStaticFunctionParams, CallStaticFunctionResults> CallStaticFunctionContext;
  virtual ::kj::Promise<void> callStaticFunction(CallStaticFunctionContext context);
  typedef  ::UnrealCore::FindClassParams FindClassParams;
  typedef  ::UnrealCore::FindClassResults FindClassResults;
  typedef ::capnp::CallContext<FindClassParams, FindClassResults> FindClassContext;
  virtual ::kj::Promise<void> findClass(FindClassContext context);
  typedef  ::UnrealCore::LoadClassParams LoadClassParams;
  typedef  ::UnrealCore::LoadClassResults LoadClassResults;
  typedef ::capnp::CallContext<LoadClassParams, LoadClassResults> LoadClassContext;
  virtual ::kj::Promise<void> loadClass(LoadClassContext context);
  typedef  ::UnrealCore::StaticClassParams StaticClassParams;
  typedef  ::UnrealCore::StaticClassResults StaticClassResults;
  typedef ::capnp::CallContext<StaticClassParams, StaticClassResults> StaticClassContext;
  virtual ::kj::Promise<void> staticClass(StaticClassContext context);
  typedef  ::UnrealCore::BindDelegateParams BindDelegateParams;
  typedef  ::UnrealCore::BindDelegateResults BindDelegateResults;
  typedef ::capnp::CallContext<BindDelegateParams, BindDelegateResults> BindDelegateContext;
  virtual ::kj::Promise<void> bindDelegate(BindDelegateContext context);
  typedef  ::UnrealCore::UnbindDelegateParams UnbindDelegateParams;
  typedef  ::UnrealCore::UnbindDelegateResults UnbindDelegateResults;
  typedef ::capnp::CallContext<UnbindDelegateParams, UnbindDelegateResults> UnbindDelegateContext;
  virtual ::kj::Promise<void> unbindDelegate(UnbindDelegateContext context);
  typedef  ::UnrealCore::AddMultiDelegateParams AddMultiDelegateParams;
  typedef  ::UnrealCore::AddMultiDelegateResults AddMultiDelegateResults;
  typedef ::capnp::CallContext<AddMultiDelegateParams, AddMultiDelegateResults> AddMultiDelegateContext;
  virtual ::kj::Promise<void> addMultiDelegate(AddMultiDelegateContext context);
  typedef  ::UnrealCore::RemoveMultiDelegateParams RemoveMultiDelegateParams;
  typedef  ::UnrealCore::RemoveMultiDelegateResults RemoveMultiDelegateResults;
  typedef ::capnp::CallContext<RemoveMultiDelegateParams, RemoveMultiDelegateResults> RemoveMultiDelegateContext;
  virtual ::kj::Promise<void> removeMultiDelegate(RemoveMultiDelegateContext context);
  typedef  ::UnrealCore::RegisterOverrideClassParams RegisterOverrideClassParams;
  typedef  ::UnrealCore::RegisterOverrideClassResults RegisterOverrideClassResults;
  typedef ::capnp::CallContext<RegisterOverrideClassParams, RegisterOverrideClassResults> RegisterOverrideClassContext;
  virtual ::kj::Promise<void> registerOverrideClass(RegisterOverrideClassContext context);
  typedef  ::UnrealCore::UnregisterOverrideClassParams UnregisterOverrideClassParams;
  typedef  ::UnrealCore::UnregisterOverrideClassResults UnregisterOverrideClassResults;
  typedef ::capnp::CallContext<UnregisterOverrideClassParams, UnregisterOverrideClassResults> UnregisterOverrideClassContext;
  virtual ::kj::Promise<void> unregisterOverrideClass(UnregisterOverrideClassContext context);
  typedef  ::UnrealCore::SetPropertyParams SetPropertyParams;
  typedef  ::UnrealCore::SetPropertyResults SetPropertyResults;
  typedef ::capnp::CallContext<SetPropertyParams, SetPropertyResults> SetPropertyContext;
  virtual ::kj::Promise<void> setProperty(SetPropertyContext context);
  typedef  ::UnrealCore::GetPropertyParams GetPropertyParams;
  typedef  ::UnrealCore::GetPropertyResults GetPropertyResults;
  typedef ::capnp::CallContext<GetPropertyParams, GetPropertyResults> GetPropertyContext;
  virtual ::kj::Promise<void> getProperty(GetPropertyContext context);

  inline  ::UnrealCore::Client thisCap() {
    return ::capnp::Capability::Server::thisCap()
        .template castAs< ::UnrealCore>();
  }

  ::capnp::Capability::Server::DispatchCallResult dispatchCallInternal(
      uint16_t methodId,
      ::capnp::CallContext< ::capnp::AnyPointer, ::capnp::AnyPointer> context);
};
#endif  // !CAPNP_LITE

class UnrealCore::Object::Reader {
public:
  typedef Object Reads;

  Reader() = default;
  inline explicit Reader(::capnp::_::StructReader base): _reader(base) {}

  inline ::capnp::MessageSize totalSize() const {
    return _reader.totalSize().asPublic();
  }

#if !CAPNP_LITE
  inline ::kj::StringTree toString() const {
    return ::capnp::_::structString(_reader, *_capnpPrivate::brand());
  }
#endif  // !CAPNP_LITE

  inline bool hasName() const;
  inline  ::capnp::Text::Reader getName() const;

  inline  ::uint64_t getAddress() const;

private:
  ::capnp::_::StructReader _reader;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::List;
  friend class ::capnp::MessageBuilder;
  friend class ::capnp::Orphanage;
};

class UnrealCore::Object::Builder {
public:
  typedef Object Builds;

  Builder() = delete;  // Deleted to discourage incorrect usage.
                       // You can explicitly initialize to nullptr instead.
  inline Builder(decltype(nullptr)) {}
  inline explicit Builder(::capnp::_::StructBuilder base): _builder(base) {}
  inline operator Reader() const { return Reader(_builder.asReader()); }
  inline Reader asReader() const { return *this; }

  inline ::capnp::MessageSize totalSize() const { return asReader().totalSize(); }
#if !CAPNP_LITE
  inline ::kj::StringTree toString() const { return asReader().toString(); }
#endif  // !CAPNP_LITE

  inline bool hasName();
  inline  ::capnp::Text::Builder getName();
  inline void setName( ::capnp::Text::Reader value);
  inline  ::capnp::Text::Builder initName(unsigned int size);
  inline void adoptName(::capnp::Orphan< ::capnp::Text>&& value);
  inline ::capnp::Orphan< ::capnp::Text> disownName();

  inline  ::uint64_t getAddress();
  inline void setAddress( ::uint64_t value);

private:
  ::capnp::_::StructBuilder _builder;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  friend class ::capnp::Orphanage;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
};

#if !CAPNP_LITE
class UnrealCore::Object::Pipeline {
public:
  typedef Object Pipelines;

  inline Pipeline(decltype(nullptr)): _typeless(nullptr) {}
  inline explicit Pipeline(::capnp::AnyPointer::Pipeline&& typeless)
      : _typeless(kj::mv(typeless)) {}

private:
  ::capnp::AnyPointer::Pipeline _typeless;
  friend class ::capnp::PipelineHook;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
};
#endif  // !CAPNP_LITE

class UnrealCore::Class::Reader {
public:
  typedef Class Reads;

  Reader() = default;
  inline explicit Reader(::capnp::_::StructReader base): _reader(base) {}

  inline ::capnp::MessageSize totalSize() const {
    return _reader.totalSize().asPublic();
  }

#if !CAPNP_LITE
  inline ::kj::StringTree toString() const {
    return ::capnp::_::structString(_reader, *_capnpPrivate::brand());
  }
#endif  // !CAPNP_LITE

  inline bool hasTypeName() const;
  inline  ::capnp::Text::Reader getTypeName() const;

private:
  ::capnp::_::StructReader _reader;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::List;
  friend class ::capnp::MessageBuilder;
  friend class ::capnp::Orphanage;
};

class UnrealCore::Class::Builder {
public:
  typedef Class Builds;

  Builder() = delete;  // Deleted to discourage incorrect usage.
                       // You can explicitly initialize to nullptr instead.
  inline Builder(decltype(nullptr)) {}
  inline explicit Builder(::capnp::_::StructBuilder base): _builder(base) {}
  inline operator Reader() const { return Reader(_builder.asReader()); }
  inline Reader asReader() const { return *this; }

  inline ::capnp::MessageSize totalSize() const { return asReader().totalSize(); }
#if !CAPNP_LITE
  inline ::kj::StringTree toString() const { return asReader().toString(); }
#endif  // !CAPNP_LITE

  inline bool hasTypeName();
  inline  ::capnp::Text::Builder getTypeName();
  inline void setTypeName( ::capnp::Text::Reader value);
  inline  ::capnp::Text::Builder initTypeName(unsigned int size);
  inline void adoptTypeName(::capnp::Orphan< ::capnp::Text>&& value);
  inline ::capnp::Orphan< ::capnp::Text> disownTypeName();

private:
  ::capnp::_::StructBuilder _builder;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  friend class ::capnp::Orphanage;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
};

#if !CAPNP_LITE
class UnrealCore::Class::Pipeline {
public:
  typedef Class Pipelines;

  inline Pipeline(decltype(nullptr)): _typeless(nullptr) {}
  inline explicit Pipeline(::capnp::AnyPointer::Pipeline&& typeless)
      : _typeless(kj::mv(typeless)) {}

private:
  ::capnp::AnyPointer::Pipeline _typeless;
  friend class ::capnp::PipelineHook;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
};
#endif  // !CAPNP_LITE

class UnrealCore::Argument::Reader {
public:
  typedef Argument Reads;

  Reader() = default;
  inline explicit Reader(::capnp::_::StructReader base): _reader(base) {}

  inline ::capnp::MessageSize totalSize() const {
    return _reader.totalSize().asPublic();
  }

#if !CAPNP_LITE
  inline ::kj::StringTree toString() const {
    return ::capnp::_::structString(_reader, *_capnpPrivate::brand());
  }
#endif  // !CAPNP_LITE

  inline Which which() const;
  inline bool hasClass() const;
  inline  ::UnrealCore::Class::Reader getClass() const;

  inline bool hasName() const;
  inline  ::capnp::Text::Reader getName() const;

  inline bool isBoolValue() const;
  inline bool getBoolValue() const;

  inline bool isUintValue() const;
  inline  ::uint64_t getUintValue() const;

  inline bool isIntValue() const;
  inline  ::int64_t getIntValue() const;

  inline bool isStrValue() const;
  inline bool hasStrValue() const;
  inline  ::capnp::Text::Reader getStrValue() const;

  inline bool isFloatValue() const;
  inline double getFloatValue() const;

  inline bool isObject() const;
  inline bool hasObject() const;
  inline  ::UnrealCore::Object::Reader getObject() const;

  inline bool isEnumValue() const;
  inline  ::int64_t getEnumValue() const;

private:
  ::capnp::_::StructReader _reader;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::List;
  friend class ::capnp::MessageBuilder;
  friend class ::capnp::Orphanage;
};

class UnrealCore::Argument::Builder {
public:
  typedef Argument Builds;

  Builder() = delete;  // Deleted to discourage incorrect usage.
                       // You can explicitly initialize to nullptr instead.
  inline Builder(decltype(nullptr)) {}
  inline explicit Builder(::capnp::_::StructBuilder base): _builder(base) {}
  inline operator Reader() const { return Reader(_builder.asReader()); }
  inline Reader asReader() const { return *this; }

  inline ::capnp::MessageSize totalSize() const { return asReader().totalSize(); }
#if !CAPNP_LITE
  inline ::kj::StringTree toString() const { return asReader().toString(); }
#endif  // !CAPNP_LITE

  inline Which which();
  inline bool hasClass();
  inline  ::UnrealCore::Class::Builder getClass();
  inline void setClass( ::UnrealCore::Class::Reader value);
  inline  ::UnrealCore::Class::Builder initClass();
  inline void adoptClass(::capnp::Orphan< ::UnrealCore::Class>&& value);
  inline ::capnp::Orphan< ::UnrealCore::Class> disownClass();

  inline bool hasName();
  inline  ::capnp::Text::Builder getName();
  inline void setName( ::capnp::Text::Reader value);
  inline  ::capnp::Text::Builder initName(unsigned int size);
  inline void adoptName(::capnp::Orphan< ::capnp::Text>&& value);
  inline ::capnp::Orphan< ::capnp::Text> disownName();

  inline bool isBoolValue();
  inline bool getBoolValue();
  inline void setBoolValue(bool value);

  inline bool isUintValue();
  inline  ::uint64_t getUintValue();
  inline void setUintValue( ::uint64_t value);

  inline bool isIntValue();
  inline  ::int64_t getIntValue();
  inline void setIntValue( ::int64_t value);

  inline bool isStrValue();
  inline bool hasStrValue();
  inline  ::capnp::Text::Builder getStrValue();
  inline void setStrValue( ::capnp::Text::Reader value);
  inline  ::capnp::Text::Builder initStrValue(unsigned int size);
  inline void adoptStrValue(::capnp::Orphan< ::capnp::Text>&& value);
  inline ::capnp::Orphan< ::capnp::Text> disownStrValue();

  inline bool isFloatValue();
  inline double getFloatValue();
  inline void setFloatValue(double value);

  inline bool isObject();
  inline bool hasObject();
  inline  ::UnrealCore::Object::Builder getObject();
  inline void setObject( ::UnrealCore::Object::Reader value);
  inline  ::UnrealCore::Object::Builder initObject();
  inline void adoptObject(::capnp::Orphan< ::UnrealCore::Object>&& value);
  inline ::capnp::Orphan< ::UnrealCore::Object> disownObject();

  inline bool isEnumValue();
  inline  ::int64_t getEnumValue();
  inline void setEnumValue( ::int64_t value);

private:
  ::capnp::_::StructBuilder _builder;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  friend class ::capnp::Orphanage;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
};

#if !CAPNP_LITE
class UnrealCore::Argument::Pipeline {
public:
  typedef Argument Pipelines;

  inline Pipeline(decltype(nullptr)): _typeless(nullptr) {}
  inline explicit Pipeline(::capnp::AnyPointer::Pipeline&& typeless)
      : _typeless(kj::mv(typeless)) {}

  inline  ::UnrealCore::Class::Pipeline getClass();
private:
  ::capnp::AnyPointer::Pipeline _typeless;
  friend class ::capnp::PipelineHook;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
};
#endif  // !CAPNP_LITE

class UnrealCore::Property::Reader {
public:
  typedef Property Reads;

  Reader() = default;
  inline explicit Reader(::capnp::_::StructReader base): _reader(base) {}

  inline ::capnp::MessageSize totalSize() const {
    return _reader.totalSize().asPublic();
  }

#if !CAPNP_LITE
  inline ::kj::StringTree toString() const {
    return ::capnp::_::structString(_reader, *_capnpPrivate::brand());
  }
#endif  // !CAPNP_LITE

  inline Which which() const;
  inline bool hasClass() const;
  inline  ::UnrealCore::Class::Reader getClass() const;

  inline bool hasName() const;
  inline  ::capnp::Text::Reader getName() const;

  inline bool isBoolValue() const;
  inline bool getBoolValue() const;

  inline bool isUintValue() const;
  inline  ::uint64_t getUintValue() const;

  inline bool isIntValue() const;
  inline  ::int64_t getIntValue() const;

  inline bool isStrValue() const;
  inline bool hasStrValue() const;
  inline  ::capnp::Text::Reader getStrValue() const;

  inline bool isFloatValue() const;
  inline double getFloatValue() const;

  inline bool isObject() const;
  inline bool hasObject() const;
  inline  ::UnrealCore::Object::Reader getObject() const;

  inline bool isEnumValue() const;
  inline  ::int64_t getEnumValue() const;

private:
  ::capnp::_::StructReader _reader;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::List;
  friend class ::capnp::MessageBuilder;
  friend class ::capnp::Orphanage;
};

class UnrealCore::Property::Builder {
public:
  typedef Property Builds;

  Builder() = delete;  // Deleted to discourage incorrect usage.
                       // You can explicitly initialize to nullptr instead.
  inline Builder(decltype(nullptr)) {}
  inline explicit Builder(::capnp::_::StructBuilder base): _builder(base) {}
  inline operator Reader() const { return Reader(_builder.asReader()); }
  inline Reader asReader() const { return *this; }

  inline ::capnp::MessageSize totalSize() const { return asReader().totalSize(); }
#if !CAPNP_LITE
  inline ::kj::StringTree toString() const { return asReader().toString(); }
#endif  // !CAPNP_LITE

  inline Which which();
  inline bool hasClass();
  inline  ::UnrealCore::Class::Builder getClass();
  inline void setClass( ::UnrealCore::Class::Reader value);
  inline  ::UnrealCore::Class::Builder initClass();
  inline void adoptClass(::capnp::Orphan< ::UnrealCore::Class>&& value);
  inline ::capnp::Orphan< ::UnrealCore::Class> disownClass();

  inline bool hasName();
  inline  ::capnp::Text::Builder getName();
  inline void setName( ::capnp::Text::Reader value);
  inline  ::capnp::Text::Builder initName(unsigned int size);
  inline void adoptName(::capnp::Orphan< ::capnp::Text>&& value);
  inline ::capnp::Orphan< ::capnp::Text> disownName();

  inline bool isBoolValue();
  inline bool getBoolValue();
  inline void setBoolValue(bool value);

  inline bool isUintValue();
  inline  ::uint64_t getUintValue();
  inline void setUintValue( ::uint64_t value);

  inline bool isIntValue();
  inline  ::int64_t getIntValue();
  inline void setIntValue( ::int64_t value);

  inline bool isStrValue();
  inline bool hasStrValue();
  inline  ::capnp::Text::Builder getStrValue();
  inline void setStrValue( ::capnp::Text::Reader value);
  inline  ::capnp::Text::Builder initStrValue(unsigned int size);
  inline void adoptStrValue(::capnp::Orphan< ::capnp::Text>&& value);
  inline ::capnp::Orphan< ::capnp::Text> disownStrValue();

  inline bool isFloatValue();
  inline double getFloatValue();
  inline void setFloatValue(double value);

  inline bool isObject();
  inline bool hasObject();
  inline  ::UnrealCore::Object::Builder getObject();
  inline void setObject( ::UnrealCore::Object::Reader value);
  inline  ::UnrealCore::Object::Builder initObject();
  inline void adoptObject(::capnp::Orphan< ::UnrealCore::Object>&& value);
  inline ::capnp::Orphan< ::UnrealCore::Object> disownObject();

  inline bool isEnumValue();
  inline  ::int64_t getEnumValue();
  inline void setEnumValue( ::int64_t value);

private:
  ::capnp::_::StructBuilder _builder;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  friend class ::capnp::Orphanage;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
};

#if !CAPNP_LITE
class UnrealCore::Property::Pipeline {
public:
  typedef Property Pipelines;

  inline Pipeline(decltype(nullptr)): _typeless(nullptr) {}
  inline explicit Pipeline(::capnp::AnyPointer::Pipeline&& typeless)
      : _typeless(kj::mv(typeless)) {}

  inline  ::UnrealCore::Class::Pipeline getClass();
private:
  ::capnp::AnyPointer::Pipeline _typeless;
  friend class ::capnp::PipelineHook;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
};
#endif  // !CAPNP_LITE

class UnrealCore::Method::Reader {
public:
  typedef Method Reads;

  Reader() = default;
  inline explicit Reader(::capnp::_::StructReader base): _reader(base) {}

  inline ::capnp::MessageSize totalSize() const {
    return _reader.totalSize().asPublic();
  }

#if !CAPNP_LITE
  inline ::kj::StringTree toString() const {
    return ::capnp::_::structString(_reader, *_capnpPrivate::brand());
  }
#endif  // !CAPNP_LITE

  inline bool hasName() const;
  inline  ::capnp::Text::Reader getName() const;

private:
  ::capnp::_::StructReader _reader;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::List;
  friend class ::capnp::MessageBuilder;
  friend class ::capnp::Orphanage;
};

class UnrealCore::Method::Builder {
public:
  typedef Method Builds;

  Builder() = delete;  // Deleted to discourage incorrect usage.
                       // You can explicitly initialize to nullptr instead.
  inline Builder(decltype(nullptr)) {}
  inline explicit Builder(::capnp::_::StructBuilder base): _builder(base) {}
  inline operator Reader() const { return Reader(_builder.asReader()); }
  inline Reader asReader() const { return *this; }

  inline ::capnp::MessageSize totalSize() const { return asReader().totalSize(); }
#if !CAPNP_LITE
  inline ::kj::StringTree toString() const { return asReader().toString(); }
#endif  // !CAPNP_LITE

  inline bool hasName();
  inline  ::capnp::Text::Builder getName();
  inline void setName( ::capnp::Text::Reader value);
  inline  ::capnp::Text::Builder initName(unsigned int size);
  inline void adoptName(::capnp::Orphan< ::capnp::Text>&& value);
  inline ::capnp::Orphan< ::capnp::Text> disownName();

private:
  ::capnp::_::StructBuilder _builder;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  friend class ::capnp::Orphanage;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
};

#if !CAPNP_LITE
class UnrealCore::Method::Pipeline {
public:
  typedef Method Pipelines;

  inline Pipeline(decltype(nullptr)): _typeless(nullptr) {}
  inline explicit Pipeline(::capnp::AnyPointer::Pipeline&& typeless)
      : _typeless(kj::mv(typeless)) {}

private:
  ::capnp::AnyPointer::Pipeline _typeless;
  friend class ::capnp::PipelineHook;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
};
#endif  // !CAPNP_LITE

#if !CAPNP_LITE
class UnrealCore::MethodCallable::Client
    : public virtual ::capnp::Capability::Client {
public:
  typedef MethodCallable Calls;
  typedef MethodCallable Reads;

  Client(decltype(nullptr));
  explicit Client(::kj::Own< ::capnp::ClientHook>&& hook);
  template <typename _t, typename = ::kj::EnableIf< ::kj::canConvert<_t*, Server*>()>>
  Client(::kj::Own<_t>&& server);
  template <typename _t, typename = ::kj::EnableIf< ::kj::canConvert<_t*, Client*>()>>
  Client(::kj::Promise<_t>&& promise);
  Client(::kj::Exception&& exception);
  Client(Client&) = default;
  Client(Client&&) = default;
  Client& operator=(Client& other);
  Client& operator=(Client&& other);

  ::capnp::Request< ::UnrealCore::MethodCallable::InvokeParams,  ::UnrealCore::MethodCallable::InvokeResults> invokeRequest(
      ::kj::Maybe< ::capnp::MessageSize> sizeHint = nullptr);

protected:
  Client() = default;
};

class UnrealCore::MethodCallable::Server
    : public virtual ::capnp::Capability::Server {
public:
  typedef MethodCallable Serves;

  ::capnp::Capability::Server::DispatchCallResult dispatchCall(
      uint64_t interfaceId, uint16_t methodId,
      ::capnp::CallContext< ::capnp::AnyPointer, ::capnp::AnyPointer> context)
      override;

protected:
  typedef  ::UnrealCore::MethodCallable::InvokeParams InvokeParams;
  typedef  ::UnrealCore::MethodCallable::InvokeResults InvokeResults;
  typedef ::capnp::CallContext<InvokeParams, InvokeResults> InvokeContext;
  virtual ::kj::Promise<void> invoke(InvokeContext context);

  inline  ::UnrealCore::MethodCallable::Client thisCap() {
    return ::capnp::Capability::Server::thisCap()
        .template castAs< ::UnrealCore::MethodCallable>();
  }

  ::capnp::Capability::Server::DispatchCallResult dispatchCallInternal(
      uint16_t methodId,
      ::capnp::CallContext< ::capnp::AnyPointer, ::capnp::AnyPointer> context);
};
#endif  // !CAPNP_LITE

class UnrealCore::MethodCallable::InvokeParams::Reader {
public:
  typedef InvokeParams Reads;

  Reader() = default;
  inline explicit Reader(::capnp::_::StructReader base): _reader(base) {}

  inline ::capnp::MessageSize totalSize() const {
    return _reader.totalSize().asPublic();
  }

#if !CAPNP_LITE
  inline ::kj::StringTree toString() const {
    return ::capnp::_::structString(_reader, *_capnpPrivate::brand());
  }
#endif  // !CAPNP_LITE

  inline bool hasMethod() const;
  inline  ::UnrealCore::Method::Reader getMethod() const;

private:
  ::capnp::_::StructReader _reader;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::List;
  friend class ::capnp::MessageBuilder;
  friend class ::capnp::Orphanage;
};

class UnrealCore::MethodCallable::InvokeParams::Builder {
public:
  typedef InvokeParams Builds;

  Builder() = delete;  // Deleted to discourage incorrect usage.
                       // You can explicitly initialize to nullptr instead.
  inline Builder(decltype(nullptr)) {}
  inline explicit Builder(::capnp::_::StructBuilder base): _builder(base) {}
  inline operator Reader() const { return Reader(_builder.asReader()); }
  inline Reader asReader() const { return *this; }

  inline ::capnp::MessageSize totalSize() const { return asReader().totalSize(); }
#if !CAPNP_LITE
  inline ::kj::StringTree toString() const { return asReader().toString(); }
#endif  // !CAPNP_LITE

  inline bool hasMethod();
  inline  ::UnrealCore::Method::Builder getMethod();
  inline void setMethod( ::UnrealCore::Method::Reader value);
  inline  ::UnrealCore::Method::Builder initMethod();
  inline void adoptMethod(::capnp::Orphan< ::UnrealCore::Method>&& value);
  inline ::capnp::Orphan< ::UnrealCore::Method> disownMethod();

private:
  ::capnp::_::StructBuilder _builder;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  friend class ::capnp::Orphanage;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
};

#if !CAPNP_LITE
class UnrealCore::MethodCallable::InvokeParams::Pipeline {
public:
  typedef InvokeParams Pipelines;

  inline Pipeline(decltype(nullptr)): _typeless(nullptr) {}
  inline explicit Pipeline(::capnp::AnyPointer::Pipeline&& typeless)
      : _typeless(kj::mv(typeless)) {}

  inline  ::UnrealCore::Method::Pipeline getMethod();
private:
  ::capnp::AnyPointer::Pipeline _typeless;
  friend class ::capnp::PipelineHook;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
};
#endif  // !CAPNP_LITE

class UnrealCore::MethodCallable::InvokeResults::Reader {
public:
  typedef InvokeResults Reads;

  Reader() = default;
  inline explicit Reader(::capnp::_::StructReader base): _reader(base) {}

  inline ::capnp::MessageSize totalSize() const {
    return _reader.totalSize().asPublic();
  }

#if !CAPNP_LITE
  inline ::kj::StringTree toString() const {
    return ::capnp::_::structString(_reader, *_capnpPrivate::brand());
  }
#endif  // !CAPNP_LITE

private:
  ::capnp::_::StructReader _reader;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::List;
  friend class ::capnp::MessageBuilder;
  friend class ::capnp::Orphanage;
};

class UnrealCore::MethodCallable::InvokeResults::Builder {
public:
  typedef InvokeResults Builds;

  Builder() = delete;  // Deleted to discourage incorrect usage.
                       // You can explicitly initialize to nullptr instead.
  inline Builder(decltype(nullptr)) {}
  inline explicit Builder(::capnp::_::StructBuilder base): _builder(base) {}
  inline operator Reader() const { return Reader(_builder.asReader()); }
  inline Reader asReader() const { return *this; }

  inline ::capnp::MessageSize totalSize() const { return asReader().totalSize(); }
#if !CAPNP_LITE
  inline ::kj::StringTree toString() const { return asReader().toString(); }
#endif  // !CAPNP_LITE

private:
  ::capnp::_::StructBuilder _builder;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  friend class ::capnp::Orphanage;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
};

#if !CAPNP_LITE
class UnrealCore::MethodCallable::InvokeResults::Pipeline {
public:
  typedef InvokeResults Pipelines;

  inline Pipeline(decltype(nullptr)): _typeless(nullptr) {}
  inline explicit Pipeline(::capnp::AnyPointer::Pipeline&& typeless)
      : _typeless(kj::mv(typeless)) {}

private:
  ::capnp::AnyPointer::Pipeline _typeless;
  friend class ::capnp::PipelineHook;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
};
#endif  // !CAPNP_LITE

#if !CAPNP_LITE
class UnrealCore::DelegateCallback::Client
    : public virtual ::capnp::Capability::Client {
public:
  typedef DelegateCallback Calls;
  typedef DelegateCallback Reads;

  Client(decltype(nullptr));
  explicit Client(::kj::Own< ::capnp::ClientHook>&& hook);
  template <typename _t, typename = ::kj::EnableIf< ::kj::canConvert<_t*, Server*>()>>
  Client(::kj::Own<_t>&& server);
  template <typename _t, typename = ::kj::EnableIf< ::kj::canConvert<_t*, Client*>()>>
  Client(::kj::Promise<_t>&& promise);
  Client(::kj::Exception&& exception);
  Client(Client&) = default;
  Client(Client&&) = default;
  Client& operator=(Client& other);
  Client& operator=(Client&& other);

  ::capnp::Request< ::UnrealCore::DelegateCallback::OnCallParams,  ::UnrealCore::DelegateCallback::OnCallResults> onCallRequest(
      ::kj::Maybe< ::capnp::MessageSize> sizeHint = nullptr);

protected:
  Client() = default;
};

class UnrealCore::DelegateCallback::Server
    : public virtual ::capnp::Capability::Server {
public:
  typedef DelegateCallback Serves;

  ::capnp::Capability::Server::DispatchCallResult dispatchCall(
      uint64_t interfaceId, uint16_t methodId,
      ::capnp::CallContext< ::capnp::AnyPointer, ::capnp::AnyPointer> context)
      override;

protected:
  typedef  ::UnrealCore::DelegateCallback::OnCallParams OnCallParams;
  typedef  ::UnrealCore::DelegateCallback::OnCallResults OnCallResults;
  typedef ::capnp::CallContext<OnCallParams, OnCallResults> OnCallContext;
  virtual ::kj::Promise<void> onCall(OnCallContext context);

  inline  ::UnrealCore::DelegateCallback::Client thisCap() {
    return ::capnp::Capability::Server::thisCap()
        .template castAs< ::UnrealCore::DelegateCallback>();
  }

  ::capnp::Capability::Server::DispatchCallResult dispatchCallInternal(
      uint16_t methodId,
      ::capnp::CallContext< ::capnp::AnyPointer, ::capnp::AnyPointer> context);
};
#endif  // !CAPNP_LITE

class UnrealCore::DelegateCallback::OnCallParams::Reader {
public:
  typedef OnCallParams Reads;

  Reader() = default;
  inline explicit Reader(::capnp::_::StructReader base): _reader(base) {}

  inline ::capnp::MessageSize totalSize() const {
    return _reader.totalSize().asPublic();
  }

#if !CAPNP_LITE
  inline ::kj::StringTree toString() const {
    return ::capnp::_::structString(_reader, *_capnpPrivate::brand());
  }
#endif  // !CAPNP_LITE

  inline bool hasObject() const;
  inline  ::UnrealCore::Object::Reader getObject() const;

  inline bool hasParams() const;
  inline  ::capnp::List< ::UnrealCore::Argument,  ::capnp::Kind::STRUCT>::Reader getParams() const;

private:
  ::capnp::_::StructReader _reader;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::List;
  friend class ::capnp::MessageBuilder;
  friend class ::capnp::Orphanage;
};

class UnrealCore::DelegateCallback::OnCallParams::Builder {
public:
  typedef OnCallParams Builds;

  Builder() = delete;  // Deleted to discourage incorrect usage.
                       // You can explicitly initialize to nullptr instead.
  inline Builder(decltype(nullptr)) {}
  inline explicit Builder(::capnp::_::StructBuilder base): _builder(base) {}
  inline operator Reader() const { return Reader(_builder.asReader()); }
  inline Reader asReader() const { return *this; }

  inline ::capnp::MessageSize totalSize() const { return asReader().totalSize(); }
#if !CAPNP_LITE
  inline ::kj::StringTree toString() const { return asReader().toString(); }
#endif  // !CAPNP_LITE

  inline bool hasObject();
  inline  ::UnrealCore::Object::Builder getObject();
  inline void setObject( ::UnrealCore::Object::Reader value);
  inline  ::UnrealCore::Object::Builder initObject();
  inline void adoptObject(::capnp::Orphan< ::UnrealCore::Object>&& value);
  inline ::capnp::Orphan< ::UnrealCore::Object> disownObject();

  inline bool hasParams();
  inline  ::capnp::List< ::UnrealCore::Argument,  ::capnp::Kind::STRUCT>::Builder getParams();
  inline void setParams( ::capnp::List< ::UnrealCore::Argument,  ::capnp::Kind::STRUCT>::Reader value);
  inline  ::capnp::List< ::UnrealCore::Argument,  ::capnp::Kind::STRUCT>::Builder initParams(unsigned int size);
  inline void adoptParams(::capnp::Orphan< ::capnp::List< ::UnrealCore::Argument,  ::capnp::Kind::STRUCT>>&& value);
  inline ::capnp::Orphan< ::capnp::List< ::UnrealCore::Argument,  ::capnp::Kind::STRUCT>> disownParams();

private:
  ::capnp::_::StructBuilder _builder;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  friend class ::capnp::Orphanage;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
};

#if !CAPNP_LITE
class UnrealCore::DelegateCallback::OnCallParams::Pipeline {
public:
  typedef OnCallParams Pipelines;

  inline Pipeline(decltype(nullptr)): _typeless(nullptr) {}
  inline explicit Pipeline(::capnp::AnyPointer::Pipeline&& typeless)
      : _typeless(kj::mv(typeless)) {}

  inline  ::UnrealCore::Object::Pipeline getObject();
private:
  ::capnp::AnyPointer::Pipeline _typeless;
  friend class ::capnp::PipelineHook;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
};
#endif  // !CAPNP_LITE

class UnrealCore::DelegateCallback::OnCallResults::Reader {
public:
  typedef OnCallResults Reads;

  Reader() = default;
  inline explicit Reader(::capnp::_::StructReader base): _reader(base) {}

  inline ::capnp::MessageSize totalSize() const {
    return _reader.totalSize().asPublic();
  }

#if !CAPNP_LITE
  inline ::kj::StringTree toString() const {
    return ::capnp::_::structString(_reader, *_capnpPrivate::brand());
  }
#endif  // !CAPNP_LITE

private:
  ::capnp::_::StructReader _reader;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::List;
  friend class ::capnp::MessageBuilder;
  friend class ::capnp::Orphanage;
};

class UnrealCore::DelegateCallback::OnCallResults::Builder {
public:
  typedef OnCallResults Builds;

  Builder() = delete;  // Deleted to discourage incorrect usage.
                       // You can explicitly initialize to nullptr instead.
  inline Builder(decltype(nullptr)) {}
  inline explicit Builder(::capnp::_::StructBuilder base): _builder(base) {}
  inline operator Reader() const { return Reader(_builder.asReader()); }
  inline Reader asReader() const { return *this; }

  inline ::capnp::MessageSize totalSize() const { return asReader().totalSize(); }
#if !CAPNP_LITE
  inline ::kj::StringTree toString() const { return asReader().toString(); }
#endif  // !CAPNP_LITE

private:
  ::capnp::_::StructBuilder _builder;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  friend class ::capnp::Orphanage;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
};

#if !CAPNP_LITE
class UnrealCore::DelegateCallback::OnCallResults::Pipeline {
public:
  typedef OnCallResults Pipelines;

  inline Pipeline(decltype(nullptr)): _typeless(nullptr) {}
  inline explicit Pipeline(::capnp::AnyPointer::Pipeline&& typeless)
      : _typeless(kj::mv(typeless)) {}

private:
  ::capnp::AnyPointer::Pipeline _typeless;
  friend class ::capnp::PipelineHook;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
};
#endif  // !CAPNP_LITE

class UnrealCore::NewObjectParams::Reader {
public:
  typedef NewObjectParams Reads;

  Reader() = default;
  inline explicit Reader(::capnp::_::StructReader base): _reader(base) {}

  inline ::capnp::MessageSize totalSize() const {
    return _reader.totalSize().asPublic();
  }

#if !CAPNP_LITE
  inline ::kj::StringTree toString() const {
    return ::capnp::_::structString(_reader, *_capnpPrivate::brand());
  }
#endif  // !CAPNP_LITE

  inline bool hasOuter() const;
  inline  ::UnrealCore::Object::Reader getOuter() const;

  inline bool hasClass() const;
  inline  ::UnrealCore::Class::Reader getClass() const;

  inline bool hasObjName() const;
  inline  ::capnp::Text::Reader getObjName() const;

  inline  ::uint64_t getFlags() const;

  inline bool hasConstructArgs() const;
  inline  ::capnp::List< ::UnrealCore::Argument,  ::capnp::Kind::STRUCT>::Reader getConstructArgs() const;

private:
  ::capnp::_::StructReader _reader;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::List;
  friend class ::capnp::MessageBuilder;
  friend class ::capnp::Orphanage;
};

class UnrealCore::NewObjectParams::Builder {
public:
  typedef NewObjectParams Builds;

  Builder() = delete;  // Deleted to discourage incorrect usage.
                       // You can explicitly initialize to nullptr instead.
  inline Builder(decltype(nullptr)) {}
  inline explicit Builder(::capnp::_::StructBuilder base): _builder(base) {}
  inline operator Reader() const { return Reader(_builder.asReader()); }
  inline Reader asReader() const { return *this; }

  inline ::capnp::MessageSize totalSize() const { return asReader().totalSize(); }
#if !CAPNP_LITE
  inline ::kj::StringTree toString() const { return asReader().toString(); }
#endif  // !CAPNP_LITE

  inline bool hasOuter();
  inline  ::UnrealCore::Object::Builder getOuter();
  inline void setOuter( ::UnrealCore::Object::Reader value);
  inline  ::UnrealCore::Object::Builder initOuter();
  inline void adoptOuter(::capnp::Orphan< ::UnrealCore::Object>&& value);
  inline ::capnp::Orphan< ::UnrealCore::Object> disownOuter();

  inline bool hasClass();
  inline  ::UnrealCore::Class::Builder getClass();
  inline void setClass( ::UnrealCore::Class::Reader value);
  inline  ::UnrealCore::Class::Builder initClass();
  inline void adoptClass(::capnp::Orphan< ::UnrealCore::Class>&& value);
  inline ::capnp::Orphan< ::UnrealCore::Class> disownClass();

  inline bool hasObjName();
  inline  ::capnp::Text::Builder getObjName();
  inline void setObjName( ::capnp::Text::Reader value);
  inline  ::capnp::Text::Builder initObjName(unsigned int size);
  inline void adoptObjName(::capnp::Orphan< ::capnp::Text>&& value);
  inline ::capnp::Orphan< ::capnp::Text> disownObjName();

  inline  ::uint64_t getFlags();
  inline void setFlags( ::uint64_t value);

  inline bool hasConstructArgs();
  inline  ::capnp::List< ::UnrealCore::Argument,  ::capnp::Kind::STRUCT>::Builder getConstructArgs();
  inline void setConstructArgs( ::capnp::List< ::UnrealCore::Argument,  ::capnp::Kind::STRUCT>::Reader value);
  inline  ::capnp::List< ::UnrealCore::Argument,  ::capnp::Kind::STRUCT>::Builder initConstructArgs(unsigned int size);
  inline void adoptConstructArgs(::capnp::Orphan< ::capnp::List< ::UnrealCore::Argument,  ::capnp::Kind::STRUCT>>&& value);
  inline ::capnp::Orphan< ::capnp::List< ::UnrealCore::Argument,  ::capnp::Kind::STRUCT>> disownConstructArgs();

private:
  ::capnp::_::StructBuilder _builder;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  friend class ::capnp::Orphanage;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
};

#if !CAPNP_LITE
class UnrealCore::NewObjectParams::Pipeline {
public:
  typedef NewObjectParams Pipelines;

  inline Pipeline(decltype(nullptr)): _typeless(nullptr) {}
  inline explicit Pipeline(::capnp::AnyPointer::Pipeline&& typeless)
      : _typeless(kj::mv(typeless)) {}

  inline  ::UnrealCore::Object::Pipeline getOuter();
  inline  ::UnrealCore::Class::Pipeline getClass();
private:
  ::capnp::AnyPointer::Pipeline _typeless;
  friend class ::capnp::PipelineHook;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
};
#endif  // !CAPNP_LITE

class UnrealCore::NewObjectResults::Reader {
public:
  typedef NewObjectResults Reads;

  Reader() = default;
  inline explicit Reader(::capnp::_::StructReader base): _reader(base) {}

  inline ::capnp::MessageSize totalSize() const {
    return _reader.totalSize().asPublic();
  }

#if !CAPNP_LITE
  inline ::kj::StringTree toString() const {
    return ::capnp::_::structString(_reader, *_capnpPrivate::brand());
  }
#endif  // !CAPNP_LITE

  inline bool hasObject() const;
  inline  ::UnrealCore::Object::Reader getObject() const;

private:
  ::capnp::_::StructReader _reader;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::List;
  friend class ::capnp::MessageBuilder;
  friend class ::capnp::Orphanage;
};

class UnrealCore::NewObjectResults::Builder {
public:
  typedef NewObjectResults Builds;

  Builder() = delete;  // Deleted to discourage incorrect usage.
                       // You can explicitly initialize to nullptr instead.
  inline Builder(decltype(nullptr)) {}
  inline explicit Builder(::capnp::_::StructBuilder base): _builder(base) {}
  inline operator Reader() const { return Reader(_builder.asReader()); }
  inline Reader asReader() const { return *this; }

  inline ::capnp::MessageSize totalSize() const { return asReader().totalSize(); }
#if !CAPNP_LITE
  inline ::kj::StringTree toString() const { return asReader().toString(); }
#endif  // !CAPNP_LITE

  inline bool hasObject();
  inline  ::UnrealCore::Object::Builder getObject();
  inline void setObject( ::UnrealCore::Object::Reader value);
  inline  ::UnrealCore::Object::Builder initObject();
  inline void adoptObject(::capnp::Orphan< ::UnrealCore::Object>&& value);
  inline ::capnp::Orphan< ::UnrealCore::Object> disownObject();

private:
  ::capnp::_::StructBuilder _builder;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  friend class ::capnp::Orphanage;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
};

#if !CAPNP_LITE
class UnrealCore::NewObjectResults::Pipeline {
public:
  typedef NewObjectResults Pipelines;

  inline Pipeline(decltype(nullptr)): _typeless(nullptr) {}
  inline explicit Pipeline(::capnp::AnyPointer::Pipeline&& typeless)
      : _typeless(kj::mv(typeless)) {}

  inline  ::UnrealCore::Object::Pipeline getObject();
private:
  ::capnp::AnyPointer::Pipeline _typeless;
  friend class ::capnp::PipelineHook;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
};
#endif  // !CAPNP_LITE

class UnrealCore::DestroyObjectParams::Reader {
public:
  typedef DestroyObjectParams Reads;

  Reader() = default;
  inline explicit Reader(::capnp::_::StructReader base): _reader(base) {}

  inline ::capnp::MessageSize totalSize() const {
    return _reader.totalSize().asPublic();
  }

#if !CAPNP_LITE
  inline ::kj::StringTree toString() const {
    return ::capnp::_::structString(_reader, *_capnpPrivate::brand());
  }
#endif  // !CAPNP_LITE

  inline bool hasOuter() const;
  inline  ::UnrealCore::Object::Reader getOuter() const;

private:
  ::capnp::_::StructReader _reader;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::List;
  friend class ::capnp::MessageBuilder;
  friend class ::capnp::Orphanage;
};

class UnrealCore::DestroyObjectParams::Builder {
public:
  typedef DestroyObjectParams Builds;

  Builder() = delete;  // Deleted to discourage incorrect usage.
                       // You can explicitly initialize to nullptr instead.
  inline Builder(decltype(nullptr)) {}
  inline explicit Builder(::capnp::_::StructBuilder base): _builder(base) {}
  inline operator Reader() const { return Reader(_builder.asReader()); }
  inline Reader asReader() const { return *this; }

  inline ::capnp::MessageSize totalSize() const { return asReader().totalSize(); }
#if !CAPNP_LITE
  inline ::kj::StringTree toString() const { return asReader().toString(); }
#endif  // !CAPNP_LITE

  inline bool hasOuter();
  inline  ::UnrealCore::Object::Builder getOuter();
  inline void setOuter( ::UnrealCore::Object::Reader value);
  inline  ::UnrealCore::Object::Builder initOuter();
  inline void adoptOuter(::capnp::Orphan< ::UnrealCore::Object>&& value);
  inline ::capnp::Orphan< ::UnrealCore::Object> disownOuter();

private:
  ::capnp::_::StructBuilder _builder;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  friend class ::capnp::Orphanage;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
};

#if !CAPNP_LITE
class UnrealCore::DestroyObjectParams::Pipeline {
public:
  typedef DestroyObjectParams Pipelines;

  inline Pipeline(decltype(nullptr)): _typeless(nullptr) {}
  inline explicit Pipeline(::capnp::AnyPointer::Pipeline&& typeless)
      : _typeless(kj::mv(typeless)) {}

  inline  ::UnrealCore::Object::Pipeline getOuter();
private:
  ::capnp::AnyPointer::Pipeline _typeless;
  friend class ::capnp::PipelineHook;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
};
#endif  // !CAPNP_LITE

class UnrealCore::DestroyObjectResults::Reader {
public:
  typedef DestroyObjectResults Reads;

  Reader() = default;
  inline explicit Reader(::capnp::_::StructReader base): _reader(base) {}

  inline ::capnp::MessageSize totalSize() const {
    return _reader.totalSize().asPublic();
  }

#if !CAPNP_LITE
  inline ::kj::StringTree toString() const {
    return ::capnp::_::structString(_reader, *_capnpPrivate::brand());
  }
#endif  // !CAPNP_LITE

  inline bool getResult() const;

private:
  ::capnp::_::StructReader _reader;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::List;
  friend class ::capnp::MessageBuilder;
  friend class ::capnp::Orphanage;
};

class UnrealCore::DestroyObjectResults::Builder {
public:
  typedef DestroyObjectResults Builds;

  Builder() = delete;  // Deleted to discourage incorrect usage.
                       // You can explicitly initialize to nullptr instead.
  inline Builder(decltype(nullptr)) {}
  inline explicit Builder(::capnp::_::StructBuilder base): _builder(base) {}
  inline operator Reader() const { return Reader(_builder.asReader()); }
  inline Reader asReader() const { return *this; }

  inline ::capnp::MessageSize totalSize() const { return asReader().totalSize(); }
#if !CAPNP_LITE
  inline ::kj::StringTree toString() const { return asReader().toString(); }
#endif  // !CAPNP_LITE

  inline bool getResult();
  inline void setResult(bool value);

private:
  ::capnp::_::StructBuilder _builder;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  friend class ::capnp::Orphanage;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
};

#if !CAPNP_LITE
class UnrealCore::DestroyObjectResults::Pipeline {
public:
  typedef DestroyObjectResults Pipelines;

  inline Pipeline(decltype(nullptr)): _typeless(nullptr) {}
  inline explicit Pipeline(::capnp::AnyPointer::Pipeline&& typeless)
      : _typeless(kj::mv(typeless)) {}

private:
  ::capnp::AnyPointer::Pipeline _typeless;
  friend class ::capnp::PipelineHook;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
};
#endif  // !CAPNP_LITE

class UnrealCore::CallFunctionParams::Reader {
public:
  typedef CallFunctionParams Reads;

  Reader() = default;
  inline explicit Reader(::capnp::_::StructReader base): _reader(base) {}

  inline ::capnp::MessageSize totalSize() const {
    return _reader.totalSize().asPublic();
  }

#if !CAPNP_LITE
  inline ::kj::StringTree toString() const {
    return ::capnp::_::structString(_reader, *_capnpPrivate::brand());
  }
#endif  // !CAPNP_LITE

  inline bool hasOuter() const;
  inline  ::UnrealCore::Object::Reader getOuter() const;

  inline bool hasCallObject() const;
  inline  ::UnrealCore::Object::Reader getCallObject() const;

  inline bool hasClass() const;
  inline  ::UnrealCore::Class::Reader getClass() const;

  inline bool hasFuncName() const;
  inline  ::capnp::Text::Reader getFuncName() const;

  inline bool hasParams() const;
  inline  ::capnp::List< ::UnrealCore::Argument,  ::capnp::Kind::STRUCT>::Reader getParams() const;

private:
  ::capnp::_::StructReader _reader;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::List;
  friend class ::capnp::MessageBuilder;
  friend class ::capnp::Orphanage;
};

class UnrealCore::CallFunctionParams::Builder {
public:
  typedef CallFunctionParams Builds;

  Builder() = delete;  // Deleted to discourage incorrect usage.
                       // You can explicitly initialize to nullptr instead.
  inline Builder(decltype(nullptr)) {}
  inline explicit Builder(::capnp::_::StructBuilder base): _builder(base) {}
  inline operator Reader() const { return Reader(_builder.asReader()); }
  inline Reader asReader() const { return *this; }

  inline ::capnp::MessageSize totalSize() const { return asReader().totalSize(); }
#if !CAPNP_LITE
  inline ::kj::StringTree toString() const { return asReader().toString(); }
#endif  // !CAPNP_LITE

  inline bool hasOuter();
  inline  ::UnrealCore::Object::Builder getOuter();
  inline void setOuter( ::UnrealCore::Object::Reader value);
  inline  ::UnrealCore::Object::Builder initOuter();
  inline void adoptOuter(::capnp::Orphan< ::UnrealCore::Object>&& value);
  inline ::capnp::Orphan< ::UnrealCore::Object> disownOuter();

  inline bool hasCallObject();
  inline  ::UnrealCore::Object::Builder getCallObject();
  inline void setCallObject( ::UnrealCore::Object::Reader value);
  inline  ::UnrealCore::Object::Builder initCallObject();
  inline void adoptCallObject(::capnp::Orphan< ::UnrealCore::Object>&& value);
  inline ::capnp::Orphan< ::UnrealCore::Object> disownCallObject();

  inline bool hasClass();
  inline  ::UnrealCore::Class::Builder getClass();
  inline void setClass( ::UnrealCore::Class::Reader value);
  inline  ::UnrealCore::Class::Builder initClass();
  inline void adoptClass(::capnp::Orphan< ::UnrealCore::Class>&& value);
  inline ::capnp::Orphan< ::UnrealCore::Class> disownClass();

  inline bool hasFuncName();
  inline  ::capnp::Text::Builder getFuncName();
  inline void setFuncName( ::capnp::Text::Reader value);
  inline  ::capnp::Text::Builder initFuncName(unsigned int size);
  inline void adoptFuncName(::capnp::Orphan< ::capnp::Text>&& value);
  inline ::capnp::Orphan< ::capnp::Text> disownFuncName();

  inline bool hasParams();
  inline  ::capnp::List< ::UnrealCore::Argument,  ::capnp::Kind::STRUCT>::Builder getParams();
  inline void setParams( ::capnp::List< ::UnrealCore::Argument,  ::capnp::Kind::STRUCT>::Reader value);
  inline  ::capnp::List< ::UnrealCore::Argument,  ::capnp::Kind::STRUCT>::Builder initParams(unsigned int size);
  inline void adoptParams(::capnp::Orphan< ::capnp::List< ::UnrealCore::Argument,  ::capnp::Kind::STRUCT>>&& value);
  inline ::capnp::Orphan< ::capnp::List< ::UnrealCore::Argument,  ::capnp::Kind::STRUCT>> disownParams();

private:
  ::capnp::_::StructBuilder _builder;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  friend class ::capnp::Orphanage;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
};

#if !CAPNP_LITE
class UnrealCore::CallFunctionParams::Pipeline {
public:
  typedef CallFunctionParams Pipelines;

  inline Pipeline(decltype(nullptr)): _typeless(nullptr) {}
  inline explicit Pipeline(::capnp::AnyPointer::Pipeline&& typeless)
      : _typeless(kj::mv(typeless)) {}

  inline  ::UnrealCore::Object::Pipeline getOuter();
  inline  ::UnrealCore::Object::Pipeline getCallObject();
  inline  ::UnrealCore::Class::Pipeline getClass();
private:
  ::capnp::AnyPointer::Pipeline _typeless;
  friend class ::capnp::PipelineHook;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
};
#endif  // !CAPNP_LITE

class UnrealCore::CallFunctionResults::Reader {
public:
  typedef CallFunctionResults Reads;

  Reader() = default;
  inline explicit Reader(::capnp::_::StructReader base): _reader(base) {}

  inline ::capnp::MessageSize totalSize() const {
    return _reader.totalSize().asPublic();
  }

#if !CAPNP_LITE
  inline ::kj::StringTree toString() const {
    return ::capnp::_::structString(_reader, *_capnpPrivate::brand());
  }
#endif  // !CAPNP_LITE

  inline bool hasReturn() const;
  inline  ::UnrealCore::Argument::Reader getReturn() const;

  inline bool hasOutParams() const;
  inline  ::capnp::List< ::UnrealCore::Argument,  ::capnp::Kind::STRUCT>::Reader getOutParams() const;

private:
  ::capnp::_::StructReader _reader;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::List;
  friend class ::capnp::MessageBuilder;
  friend class ::capnp::Orphanage;
};

class UnrealCore::CallFunctionResults::Builder {
public:
  typedef CallFunctionResults Builds;

  Builder() = delete;  // Deleted to discourage incorrect usage.
                       // You can explicitly initialize to nullptr instead.
  inline Builder(decltype(nullptr)) {}
  inline explicit Builder(::capnp::_::StructBuilder base): _builder(base) {}
  inline operator Reader() const { return Reader(_builder.asReader()); }
  inline Reader asReader() const { return *this; }

  inline ::capnp::MessageSize totalSize() const { return asReader().totalSize(); }
#if !CAPNP_LITE
  inline ::kj::StringTree toString() const { return asReader().toString(); }
#endif  // !CAPNP_LITE

  inline bool hasReturn();
  inline  ::UnrealCore::Argument::Builder getReturn();
  inline void setReturn( ::UnrealCore::Argument::Reader value);
  inline  ::UnrealCore::Argument::Builder initReturn();
  inline void adoptReturn(::capnp::Orphan< ::UnrealCore::Argument>&& value);
  inline ::capnp::Orphan< ::UnrealCore::Argument> disownReturn();

  inline bool hasOutParams();
  inline  ::capnp::List< ::UnrealCore::Argument,  ::capnp::Kind::STRUCT>::Builder getOutParams();
  inline void setOutParams( ::capnp::List< ::UnrealCore::Argument,  ::capnp::Kind::STRUCT>::Reader value);
  inline  ::capnp::List< ::UnrealCore::Argument,  ::capnp::Kind::STRUCT>::Builder initOutParams(unsigned int size);
  inline void adoptOutParams(::capnp::Orphan< ::capnp::List< ::UnrealCore::Argument,  ::capnp::Kind::STRUCT>>&& value);
  inline ::capnp::Orphan< ::capnp::List< ::UnrealCore::Argument,  ::capnp::Kind::STRUCT>> disownOutParams();

private:
  ::capnp::_::StructBuilder _builder;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  friend class ::capnp::Orphanage;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
};

#if !CAPNP_LITE
class UnrealCore::CallFunctionResults::Pipeline {
public:
  typedef CallFunctionResults Pipelines;

  inline Pipeline(decltype(nullptr)): _typeless(nullptr) {}
  inline explicit Pipeline(::capnp::AnyPointer::Pipeline&& typeless)
      : _typeless(kj::mv(typeless)) {}

  inline  ::UnrealCore::Argument::Pipeline getReturn();
private:
  ::capnp::AnyPointer::Pipeline _typeless;
  friend class ::capnp::PipelineHook;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
};
#endif  // !CAPNP_LITE

class UnrealCore::CallStaticFunctionParams::Reader {
public:
  typedef CallStaticFunctionParams Reads;

  Reader() = default;
  inline explicit Reader(::capnp::_::StructReader base): _reader(base) {}

  inline ::capnp::MessageSize totalSize() const {
    return _reader.totalSize().asPublic();
  }

#if !CAPNP_LITE
  inline ::kj::StringTree toString() const {
    return ::capnp::_::structString(_reader, *_capnpPrivate::brand());
  }
#endif  // !CAPNP_LITE

  inline bool hasClass() const;
  inline  ::UnrealCore::Class::Reader getClass() const;

  inline bool hasFuncName() const;
  inline  ::capnp::Text::Reader getFuncName() const;

  inline bool hasParams() const;
  inline  ::capnp::List< ::UnrealCore::Argument,  ::capnp::Kind::STRUCT>::Reader getParams() const;

private:
  ::capnp::_::StructReader _reader;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::List;
  friend class ::capnp::MessageBuilder;
  friend class ::capnp::Orphanage;
};

class UnrealCore::CallStaticFunctionParams::Builder {
public:
  typedef CallStaticFunctionParams Builds;

  Builder() = delete;  // Deleted to discourage incorrect usage.
                       // You can explicitly initialize to nullptr instead.
  inline Builder(decltype(nullptr)) {}
  inline explicit Builder(::capnp::_::StructBuilder base): _builder(base) {}
  inline operator Reader() const { return Reader(_builder.asReader()); }
  inline Reader asReader() const { return *this; }

  inline ::capnp::MessageSize totalSize() const { return asReader().totalSize(); }
#if !CAPNP_LITE
  inline ::kj::StringTree toString() const { return asReader().toString(); }
#endif  // !CAPNP_LITE

  inline bool hasClass();
  inline  ::UnrealCore::Class::Builder getClass();
  inline void setClass( ::UnrealCore::Class::Reader value);
  inline  ::UnrealCore::Class::Builder initClass();
  inline void adoptClass(::capnp::Orphan< ::UnrealCore::Class>&& value);
  inline ::capnp::Orphan< ::UnrealCore::Class> disownClass();

  inline bool hasFuncName();
  inline  ::capnp::Text::Builder getFuncName();
  inline void setFuncName( ::capnp::Text::Reader value);
  inline  ::capnp::Text::Builder initFuncName(unsigned int size);
  inline void adoptFuncName(::capnp::Orphan< ::capnp::Text>&& value);
  inline ::capnp::Orphan< ::capnp::Text> disownFuncName();

  inline bool hasParams();
  inline  ::capnp::List< ::UnrealCore::Argument,  ::capnp::Kind::STRUCT>::Builder getParams();
  inline void setParams( ::capnp::List< ::UnrealCore::Argument,  ::capnp::Kind::STRUCT>::Reader value);
  inline  ::capnp::List< ::UnrealCore::Argument,  ::capnp::Kind::STRUCT>::Builder initParams(unsigned int size);
  inline void adoptParams(::capnp::Orphan< ::capnp::List< ::UnrealCore::Argument,  ::capnp::Kind::STRUCT>>&& value);
  inline ::capnp::Orphan< ::capnp::List< ::UnrealCore::Argument,  ::capnp::Kind::STRUCT>> disownParams();

private:
  ::capnp::_::StructBuilder _builder;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  friend class ::capnp::Orphanage;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
};

#if !CAPNP_LITE
class UnrealCore::CallStaticFunctionParams::Pipeline {
public:
  typedef CallStaticFunctionParams Pipelines;

  inline Pipeline(decltype(nullptr)): _typeless(nullptr) {}
  inline explicit Pipeline(::capnp::AnyPointer::Pipeline&& typeless)
      : _typeless(kj::mv(typeless)) {}

  inline  ::UnrealCore::Class::Pipeline getClass();
private:
  ::capnp::AnyPointer::Pipeline _typeless;
  friend class ::capnp::PipelineHook;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
};
#endif  // !CAPNP_LITE

class UnrealCore::CallStaticFunctionResults::Reader {
public:
  typedef CallStaticFunctionResults Reads;

  Reader() = default;
  inline explicit Reader(::capnp::_::StructReader base): _reader(base) {}

  inline ::capnp::MessageSize totalSize() const {
    return _reader.totalSize().asPublic();
  }

#if !CAPNP_LITE
  inline ::kj::StringTree toString() const {
    return ::capnp::_::structString(_reader, *_capnpPrivate::brand());
  }
#endif  // !CAPNP_LITE

  inline bool hasReturn() const;
  inline  ::UnrealCore::Argument::Reader getReturn() const;

  inline bool hasOutParams() const;
  inline  ::capnp::List< ::UnrealCore::Argument,  ::capnp::Kind::STRUCT>::Reader getOutParams() const;

private:
  ::capnp::_::StructReader _reader;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::List;
  friend class ::capnp::MessageBuilder;
  friend class ::capnp::Orphanage;
};

class UnrealCore::CallStaticFunctionResults::Builder {
public:
  typedef CallStaticFunctionResults Builds;

  Builder() = delete;  // Deleted to discourage incorrect usage.
                       // You can explicitly initialize to nullptr instead.
  inline Builder(decltype(nullptr)) {}
  inline explicit Builder(::capnp::_::StructBuilder base): _builder(base) {}
  inline operator Reader() const { return Reader(_builder.asReader()); }
  inline Reader asReader() const { return *this; }

  inline ::capnp::MessageSize totalSize() const { return asReader().totalSize(); }
#if !CAPNP_LITE
  inline ::kj::StringTree toString() const { return asReader().toString(); }
#endif  // !CAPNP_LITE

  inline bool hasReturn();
  inline  ::UnrealCore::Argument::Builder getReturn();
  inline void setReturn( ::UnrealCore::Argument::Reader value);
  inline  ::UnrealCore::Argument::Builder initReturn();
  inline void adoptReturn(::capnp::Orphan< ::UnrealCore::Argument>&& value);
  inline ::capnp::Orphan< ::UnrealCore::Argument> disownReturn();

  inline bool hasOutParams();
  inline  ::capnp::List< ::UnrealCore::Argument,  ::capnp::Kind::STRUCT>::Builder getOutParams();
  inline void setOutParams( ::capnp::List< ::UnrealCore::Argument,  ::capnp::Kind::STRUCT>::Reader value);
  inline  ::capnp::List< ::UnrealCore::Argument,  ::capnp::Kind::STRUCT>::Builder initOutParams(unsigned int size);
  inline void adoptOutParams(::capnp::Orphan< ::capnp::List< ::UnrealCore::Argument,  ::capnp::Kind::STRUCT>>&& value);
  inline ::capnp::Orphan< ::capnp::List< ::UnrealCore::Argument,  ::capnp::Kind::STRUCT>> disownOutParams();

private:
  ::capnp::_::StructBuilder _builder;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  friend class ::capnp::Orphanage;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
};

#if !CAPNP_LITE
class UnrealCore::CallStaticFunctionResults::Pipeline {
public:
  typedef CallStaticFunctionResults Pipelines;

  inline Pipeline(decltype(nullptr)): _typeless(nullptr) {}
  inline explicit Pipeline(::capnp::AnyPointer::Pipeline&& typeless)
      : _typeless(kj::mv(typeless)) {}

  inline  ::UnrealCore::Argument::Pipeline getReturn();
private:
  ::capnp::AnyPointer::Pipeline _typeless;
  friend class ::capnp::PipelineHook;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
};
#endif  // !CAPNP_LITE

class UnrealCore::FindClassParams::Reader {
public:
  typedef FindClassParams Reads;

  Reader() = default;
  inline explicit Reader(::capnp::_::StructReader base): _reader(base) {}

  inline ::capnp::MessageSize totalSize() const {
    return _reader.totalSize().asPublic();
  }

#if !CAPNP_LITE
  inline ::kj::StringTree toString() const {
    return ::capnp::_::structString(_reader, *_capnpPrivate::brand());
  }
#endif  // !CAPNP_LITE

  inline bool hasClass() const;
  inline  ::UnrealCore::Class::Reader getClass() const;

private:
  ::capnp::_::StructReader _reader;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::List;
  friend class ::capnp::MessageBuilder;
  friend class ::capnp::Orphanage;
};

class UnrealCore::FindClassParams::Builder {
public:
  typedef FindClassParams Builds;

  Builder() = delete;  // Deleted to discourage incorrect usage.
                       // You can explicitly initialize to nullptr instead.
  inline Builder(decltype(nullptr)) {}
  inline explicit Builder(::capnp::_::StructBuilder base): _builder(base) {}
  inline operator Reader() const { return Reader(_builder.asReader()); }
  inline Reader asReader() const { return *this; }

  inline ::capnp::MessageSize totalSize() const { return asReader().totalSize(); }
#if !CAPNP_LITE
  inline ::kj::StringTree toString() const { return asReader().toString(); }
#endif  // !CAPNP_LITE

  inline bool hasClass();
  inline  ::UnrealCore::Class::Builder getClass();
  inline void setClass( ::UnrealCore::Class::Reader value);
  inline  ::UnrealCore::Class::Builder initClass();
  inline void adoptClass(::capnp::Orphan< ::UnrealCore::Class>&& value);
  inline ::capnp::Orphan< ::UnrealCore::Class> disownClass();

private:
  ::capnp::_::StructBuilder _builder;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  friend class ::capnp::Orphanage;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
};

#if !CAPNP_LITE
class UnrealCore::FindClassParams::Pipeline {
public:
  typedef FindClassParams Pipelines;

  inline Pipeline(decltype(nullptr)): _typeless(nullptr) {}
  inline explicit Pipeline(::capnp::AnyPointer::Pipeline&& typeless)
      : _typeless(kj::mv(typeless)) {}

  inline  ::UnrealCore::Class::Pipeline getClass();
private:
  ::capnp::AnyPointer::Pipeline _typeless;
  friend class ::capnp::PipelineHook;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
};
#endif  // !CAPNP_LITE

class UnrealCore::FindClassResults::Reader {
public:
  typedef FindClassResults Reads;

  Reader() = default;
  inline explicit Reader(::capnp::_::StructReader base): _reader(base) {}

  inline ::capnp::MessageSize totalSize() const {
    return _reader.totalSize().asPublic();
  }

#if !CAPNP_LITE
  inline ::kj::StringTree toString() const {
    return ::capnp::_::structString(_reader, *_capnpPrivate::brand());
  }
#endif  // !CAPNP_LITE

  inline bool hasObject() const;
  inline  ::UnrealCore::Object::Reader getObject() const;

private:
  ::capnp::_::StructReader _reader;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::List;
  friend class ::capnp::MessageBuilder;
  friend class ::capnp::Orphanage;
};

class UnrealCore::FindClassResults::Builder {
public:
  typedef FindClassResults Builds;

  Builder() = delete;  // Deleted to discourage incorrect usage.
                       // You can explicitly initialize to nullptr instead.
  inline Builder(decltype(nullptr)) {}
  inline explicit Builder(::capnp::_::StructBuilder base): _builder(base) {}
  inline operator Reader() const { return Reader(_builder.asReader()); }
  inline Reader asReader() const { return *this; }

  inline ::capnp::MessageSize totalSize() const { return asReader().totalSize(); }
#if !CAPNP_LITE
  inline ::kj::StringTree toString() const { return asReader().toString(); }
#endif  // !CAPNP_LITE

  inline bool hasObject();
  inline  ::UnrealCore::Object::Builder getObject();
  inline void setObject( ::UnrealCore::Object::Reader value);
  inline  ::UnrealCore::Object::Builder initObject();
  inline void adoptObject(::capnp::Orphan< ::UnrealCore::Object>&& value);
  inline ::capnp::Orphan< ::UnrealCore::Object> disownObject();

private:
  ::capnp::_::StructBuilder _builder;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  friend class ::capnp::Orphanage;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
};

#if !CAPNP_LITE
class UnrealCore::FindClassResults::Pipeline {
public:
  typedef FindClassResults Pipelines;

  inline Pipeline(decltype(nullptr)): _typeless(nullptr) {}
  inline explicit Pipeline(::capnp::AnyPointer::Pipeline&& typeless)
      : _typeless(kj::mv(typeless)) {}

  inline  ::UnrealCore::Object::Pipeline getObject();
private:
  ::capnp::AnyPointer::Pipeline _typeless;
  friend class ::capnp::PipelineHook;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
};
#endif  // !CAPNP_LITE

class UnrealCore::LoadClassParams::Reader {
public:
  typedef LoadClassParams Reads;

  Reader() = default;
  inline explicit Reader(::capnp::_::StructReader base): _reader(base) {}

  inline ::capnp::MessageSize totalSize() const {
    return _reader.totalSize().asPublic();
  }

#if !CAPNP_LITE
  inline ::kj::StringTree toString() const {
    return ::capnp::_::structString(_reader, *_capnpPrivate::brand());
  }
#endif  // !CAPNP_LITE

  inline bool hasClass() const;
  inline  ::UnrealCore::Class::Reader getClass() const;

private:
  ::capnp::_::StructReader _reader;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::List;
  friend class ::capnp::MessageBuilder;
  friend class ::capnp::Orphanage;
};

class UnrealCore::LoadClassParams::Builder {
public:
  typedef LoadClassParams Builds;

  Builder() = delete;  // Deleted to discourage incorrect usage.
                       // You can explicitly initialize to nullptr instead.
  inline Builder(decltype(nullptr)) {}
  inline explicit Builder(::capnp::_::StructBuilder base): _builder(base) {}
  inline operator Reader() const { return Reader(_builder.asReader()); }
  inline Reader asReader() const { return *this; }

  inline ::capnp::MessageSize totalSize() const { return asReader().totalSize(); }
#if !CAPNP_LITE
  inline ::kj::StringTree toString() const { return asReader().toString(); }
#endif  // !CAPNP_LITE

  inline bool hasClass();
  inline  ::UnrealCore::Class::Builder getClass();
  inline void setClass( ::UnrealCore::Class::Reader value);
  inline  ::UnrealCore::Class::Builder initClass();
  inline void adoptClass(::capnp::Orphan< ::UnrealCore::Class>&& value);
  inline ::capnp::Orphan< ::UnrealCore::Class> disownClass();

private:
  ::capnp::_::StructBuilder _builder;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  friend class ::capnp::Orphanage;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
};

#if !CAPNP_LITE
class UnrealCore::LoadClassParams::Pipeline {
public:
  typedef LoadClassParams Pipelines;

  inline Pipeline(decltype(nullptr)): _typeless(nullptr) {}
  inline explicit Pipeline(::capnp::AnyPointer::Pipeline&& typeless)
      : _typeless(kj::mv(typeless)) {}

  inline  ::UnrealCore::Class::Pipeline getClass();
private:
  ::capnp::AnyPointer::Pipeline _typeless;
  friend class ::capnp::PipelineHook;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
};
#endif  // !CAPNP_LITE

class UnrealCore::LoadClassResults::Reader {
public:
  typedef LoadClassResults Reads;

  Reader() = default;
  inline explicit Reader(::capnp::_::StructReader base): _reader(base) {}

  inline ::capnp::MessageSize totalSize() const {
    return _reader.totalSize().asPublic();
  }

#if !CAPNP_LITE
  inline ::kj::StringTree toString() const {
    return ::capnp::_::structString(_reader, *_capnpPrivate::brand());
  }
#endif  // !CAPNP_LITE

  inline bool hasObject() const;
  inline  ::UnrealCore::Object::Reader getObject() const;

private:
  ::capnp::_::StructReader _reader;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::List;
  friend class ::capnp::MessageBuilder;
  friend class ::capnp::Orphanage;
};

class UnrealCore::LoadClassResults::Builder {
public:
  typedef LoadClassResults Builds;

  Builder() = delete;  // Deleted to discourage incorrect usage.
                       // You can explicitly initialize to nullptr instead.
  inline Builder(decltype(nullptr)) {}
  inline explicit Builder(::capnp::_::StructBuilder base): _builder(base) {}
  inline operator Reader() const { return Reader(_builder.asReader()); }
  inline Reader asReader() const { return *this; }

  inline ::capnp::MessageSize totalSize() const { return asReader().totalSize(); }
#if !CAPNP_LITE
  inline ::kj::StringTree toString() const { return asReader().toString(); }
#endif  // !CAPNP_LITE

  inline bool hasObject();
  inline  ::UnrealCore::Object::Builder getObject();
  inline void setObject( ::UnrealCore::Object::Reader value);
  inline  ::UnrealCore::Object::Builder initObject();
  inline void adoptObject(::capnp::Orphan< ::UnrealCore::Object>&& value);
  inline ::capnp::Orphan< ::UnrealCore::Object> disownObject();

private:
  ::capnp::_::StructBuilder _builder;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  friend class ::capnp::Orphanage;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
};

#if !CAPNP_LITE
class UnrealCore::LoadClassResults::Pipeline {
public:
  typedef LoadClassResults Pipelines;

  inline Pipeline(decltype(nullptr)): _typeless(nullptr) {}
  inline explicit Pipeline(::capnp::AnyPointer::Pipeline&& typeless)
      : _typeless(kj::mv(typeless)) {}

  inline  ::UnrealCore::Object::Pipeline getObject();
private:
  ::capnp::AnyPointer::Pipeline _typeless;
  friend class ::capnp::PipelineHook;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
};
#endif  // !CAPNP_LITE

class UnrealCore::StaticClassParams::Reader {
public:
  typedef StaticClassParams Reads;

  Reader() = default;
  inline explicit Reader(::capnp::_::StructReader base): _reader(base) {}

  inline ::capnp::MessageSize totalSize() const {
    return _reader.totalSize().asPublic();
  }

#if !CAPNP_LITE
  inline ::kj::StringTree toString() const {
    return ::capnp::_::structString(_reader, *_capnpPrivate::brand());
  }
#endif  // !CAPNP_LITE

  inline bool hasObject() const;
  inline  ::UnrealCore::Object::Reader getObject() const;

private:
  ::capnp::_::StructReader _reader;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::List;
  friend class ::capnp::MessageBuilder;
  friend class ::capnp::Orphanage;
};

class UnrealCore::StaticClassParams::Builder {
public:
  typedef StaticClassParams Builds;

  Builder() = delete;  // Deleted to discourage incorrect usage.
                       // You can explicitly initialize to nullptr instead.
  inline Builder(decltype(nullptr)) {}
  inline explicit Builder(::capnp::_::StructBuilder base): _builder(base) {}
  inline operator Reader() const { return Reader(_builder.asReader()); }
  inline Reader asReader() const { return *this; }

  inline ::capnp::MessageSize totalSize() const { return asReader().totalSize(); }
#if !CAPNP_LITE
  inline ::kj::StringTree toString() const { return asReader().toString(); }
#endif  // !CAPNP_LITE

  inline bool hasObject();
  inline  ::UnrealCore::Object::Builder getObject();
  inline void setObject( ::UnrealCore::Object::Reader value);
  inline  ::UnrealCore::Object::Builder initObject();
  inline void adoptObject(::capnp::Orphan< ::UnrealCore::Object>&& value);
  inline ::capnp::Orphan< ::UnrealCore::Object> disownObject();

private:
  ::capnp::_::StructBuilder _builder;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  friend class ::capnp::Orphanage;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
};

#if !CAPNP_LITE
class UnrealCore::StaticClassParams::Pipeline {
public:
  typedef StaticClassParams Pipelines;

  inline Pipeline(decltype(nullptr)): _typeless(nullptr) {}
  inline explicit Pipeline(::capnp::AnyPointer::Pipeline&& typeless)
      : _typeless(kj::mv(typeless)) {}

  inline  ::UnrealCore::Object::Pipeline getObject();
private:
  ::capnp::AnyPointer::Pipeline _typeless;
  friend class ::capnp::PipelineHook;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
};
#endif  // !CAPNP_LITE

class UnrealCore::StaticClassResults::Reader {
public:
  typedef StaticClassResults Reads;

  Reader() = default;
  inline explicit Reader(::capnp::_::StructReader base): _reader(base) {}

  inline ::capnp::MessageSize totalSize() const {
    return _reader.totalSize().asPublic();
  }

#if !CAPNP_LITE
  inline ::kj::StringTree toString() const {
    return ::capnp::_::structString(_reader, *_capnpPrivate::brand());
  }
#endif  // !CAPNP_LITE

  inline bool hasClass() const;
  inline  ::UnrealCore::Class::Reader getClass() const;

private:
  ::capnp::_::StructReader _reader;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::List;
  friend class ::capnp::MessageBuilder;
  friend class ::capnp::Orphanage;
};

class UnrealCore::StaticClassResults::Builder {
public:
  typedef StaticClassResults Builds;

  Builder() = delete;  // Deleted to discourage incorrect usage.
                       // You can explicitly initialize to nullptr instead.
  inline Builder(decltype(nullptr)) {}
  inline explicit Builder(::capnp::_::StructBuilder base): _builder(base) {}
  inline operator Reader() const { return Reader(_builder.asReader()); }
  inline Reader asReader() const { return *this; }

  inline ::capnp::MessageSize totalSize() const { return asReader().totalSize(); }
#if !CAPNP_LITE
  inline ::kj::StringTree toString() const { return asReader().toString(); }
#endif  // !CAPNP_LITE

  inline bool hasClass();
  inline  ::UnrealCore::Class::Builder getClass();
  inline void setClass( ::UnrealCore::Class::Reader value);
  inline  ::UnrealCore::Class::Builder initClass();
  inline void adoptClass(::capnp::Orphan< ::UnrealCore::Class>&& value);
  inline ::capnp::Orphan< ::UnrealCore::Class> disownClass();

private:
  ::capnp::_::StructBuilder _builder;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  friend class ::capnp::Orphanage;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
};

#if !CAPNP_LITE
class UnrealCore::StaticClassResults::Pipeline {
public:
  typedef StaticClassResults Pipelines;

  inline Pipeline(decltype(nullptr)): _typeless(nullptr) {}
  inline explicit Pipeline(::capnp::AnyPointer::Pipeline&& typeless)
      : _typeless(kj::mv(typeless)) {}

  inline  ::UnrealCore::Class::Pipeline getClass();
private:
  ::capnp::AnyPointer::Pipeline _typeless;
  friend class ::capnp::PipelineHook;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
};
#endif  // !CAPNP_LITE

class UnrealCore::BindDelegateParams::Reader {
public:
  typedef BindDelegateParams Reads;

  Reader() = default;
  inline explicit Reader(::capnp::_::StructReader base): _reader(base) {}

  inline ::capnp::MessageSize totalSize() const {
    return _reader.totalSize().asPublic();
  }

#if !CAPNP_LITE
  inline ::kj::StringTree toString() const {
    return ::capnp::_::structString(_reader, *_capnpPrivate::brand());
  }
#endif  // !CAPNP_LITE

  inline bool hasObject() const;
  inline  ::UnrealCore::Object::Reader getObject() const;

  inline bool hasCallback() const;
#if !CAPNP_LITE
  inline  ::UnrealCore::DelegateCallback::Client getCallback() const;
#endif  // !CAPNP_LITE

private:
  ::capnp::_::StructReader _reader;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::List;
  friend class ::capnp::MessageBuilder;
  friend class ::capnp::Orphanage;
};

class UnrealCore::BindDelegateParams::Builder {
public:
  typedef BindDelegateParams Builds;

  Builder() = delete;  // Deleted to discourage incorrect usage.
                       // You can explicitly initialize to nullptr instead.
  inline Builder(decltype(nullptr)) {}
  inline explicit Builder(::capnp::_::StructBuilder base): _builder(base) {}
  inline operator Reader() const { return Reader(_builder.asReader()); }
  inline Reader asReader() const { return *this; }

  inline ::capnp::MessageSize totalSize() const { return asReader().totalSize(); }
#if !CAPNP_LITE
  inline ::kj::StringTree toString() const { return asReader().toString(); }
#endif  // !CAPNP_LITE

  inline bool hasObject();
  inline  ::UnrealCore::Object::Builder getObject();
  inline void setObject( ::UnrealCore::Object::Reader value);
  inline  ::UnrealCore::Object::Builder initObject();
  inline void adoptObject(::capnp::Orphan< ::UnrealCore::Object>&& value);
  inline ::capnp::Orphan< ::UnrealCore::Object> disownObject();

  inline bool hasCallback();
#if !CAPNP_LITE
  inline  ::UnrealCore::DelegateCallback::Client getCallback();
  inline void setCallback( ::UnrealCore::DelegateCallback::Client&& value);
  inline void setCallback( ::UnrealCore::DelegateCallback::Client& value);
  inline void adoptCallback(::capnp::Orphan< ::UnrealCore::DelegateCallback>&& value);
  inline ::capnp::Orphan< ::UnrealCore::DelegateCallback> disownCallback();
#endif  // !CAPNP_LITE

private:
  ::capnp::_::StructBuilder _builder;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  friend class ::capnp::Orphanage;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
};

#if !CAPNP_LITE
class UnrealCore::BindDelegateParams::Pipeline {
public:
  typedef BindDelegateParams Pipelines;

  inline Pipeline(decltype(nullptr)): _typeless(nullptr) {}
  inline explicit Pipeline(::capnp::AnyPointer::Pipeline&& typeless)
      : _typeless(kj::mv(typeless)) {}

  inline  ::UnrealCore::Object::Pipeline getObject();
  inline  ::UnrealCore::DelegateCallback::Client getCallback();
private:
  ::capnp::AnyPointer::Pipeline _typeless;
  friend class ::capnp::PipelineHook;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
};
#endif  // !CAPNP_LITE

class UnrealCore::BindDelegateResults::Reader {
public:
  typedef BindDelegateResults Reads;

  Reader() = default;
  inline explicit Reader(::capnp::_::StructReader base): _reader(base) {}

  inline ::capnp::MessageSize totalSize() const {
    return _reader.totalSize().asPublic();
  }

#if !CAPNP_LITE
  inline ::kj::StringTree toString() const {
    return ::capnp::_::structString(_reader, *_capnpPrivate::brand());
  }
#endif  // !CAPNP_LITE

private:
  ::capnp::_::StructReader _reader;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::List;
  friend class ::capnp::MessageBuilder;
  friend class ::capnp::Orphanage;
};

class UnrealCore::BindDelegateResults::Builder {
public:
  typedef BindDelegateResults Builds;

  Builder() = delete;  // Deleted to discourage incorrect usage.
                       // You can explicitly initialize to nullptr instead.
  inline Builder(decltype(nullptr)) {}
  inline explicit Builder(::capnp::_::StructBuilder base): _builder(base) {}
  inline operator Reader() const { return Reader(_builder.asReader()); }
  inline Reader asReader() const { return *this; }

  inline ::capnp::MessageSize totalSize() const { return asReader().totalSize(); }
#if !CAPNP_LITE
  inline ::kj::StringTree toString() const { return asReader().toString(); }
#endif  // !CAPNP_LITE

private:
  ::capnp::_::StructBuilder _builder;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  friend class ::capnp::Orphanage;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
};

#if !CAPNP_LITE
class UnrealCore::BindDelegateResults::Pipeline {
public:
  typedef BindDelegateResults Pipelines;

  inline Pipeline(decltype(nullptr)): _typeless(nullptr) {}
  inline explicit Pipeline(::capnp::AnyPointer::Pipeline&& typeless)
      : _typeless(kj::mv(typeless)) {}

private:
  ::capnp::AnyPointer::Pipeline _typeless;
  friend class ::capnp::PipelineHook;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
};
#endif  // !CAPNP_LITE

class UnrealCore::UnbindDelegateParams::Reader {
public:
  typedef UnbindDelegateParams Reads;

  Reader() = default;
  inline explicit Reader(::capnp::_::StructReader base): _reader(base) {}

  inline ::capnp::MessageSize totalSize() const {
    return _reader.totalSize().asPublic();
  }

#if !CAPNP_LITE
  inline ::kj::StringTree toString() const {
    return ::capnp::_::structString(_reader, *_capnpPrivate::brand());
  }
#endif  // !CAPNP_LITE

  inline bool hasObject() const;
  inline  ::UnrealCore::Object::Reader getObject() const;

private:
  ::capnp::_::StructReader _reader;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::List;
  friend class ::capnp::MessageBuilder;
  friend class ::capnp::Orphanage;
};

class UnrealCore::UnbindDelegateParams::Builder {
public:
  typedef UnbindDelegateParams Builds;

  Builder() = delete;  // Deleted to discourage incorrect usage.
                       // You can explicitly initialize to nullptr instead.
  inline Builder(decltype(nullptr)) {}
  inline explicit Builder(::capnp::_::StructBuilder base): _builder(base) {}
  inline operator Reader() const { return Reader(_builder.asReader()); }
  inline Reader asReader() const { return *this; }

  inline ::capnp::MessageSize totalSize() const { return asReader().totalSize(); }
#if !CAPNP_LITE
  inline ::kj::StringTree toString() const { return asReader().toString(); }
#endif  // !CAPNP_LITE

  inline bool hasObject();
  inline  ::UnrealCore::Object::Builder getObject();
  inline void setObject( ::UnrealCore::Object::Reader value);
  inline  ::UnrealCore::Object::Builder initObject();
  inline void adoptObject(::capnp::Orphan< ::UnrealCore::Object>&& value);
  inline ::capnp::Orphan< ::UnrealCore::Object> disownObject();

private:
  ::capnp::_::StructBuilder _builder;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  friend class ::capnp::Orphanage;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
};

#if !CAPNP_LITE
class UnrealCore::UnbindDelegateParams::Pipeline {
public:
  typedef UnbindDelegateParams Pipelines;

  inline Pipeline(decltype(nullptr)): _typeless(nullptr) {}
  inline explicit Pipeline(::capnp::AnyPointer::Pipeline&& typeless)
      : _typeless(kj::mv(typeless)) {}

  inline  ::UnrealCore::Object::Pipeline getObject();
private:
  ::capnp::AnyPointer::Pipeline _typeless;
  friend class ::capnp::PipelineHook;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
};
#endif  // !CAPNP_LITE

class UnrealCore::UnbindDelegateResults::Reader {
public:
  typedef UnbindDelegateResults Reads;

  Reader() = default;
  inline explicit Reader(::capnp::_::StructReader base): _reader(base) {}

  inline ::capnp::MessageSize totalSize() const {
    return _reader.totalSize().asPublic();
  }

#if !CAPNP_LITE
  inline ::kj::StringTree toString() const {
    return ::capnp::_::structString(_reader, *_capnpPrivate::brand());
  }
#endif  // !CAPNP_LITE

private:
  ::capnp::_::StructReader _reader;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::List;
  friend class ::capnp::MessageBuilder;
  friend class ::capnp::Orphanage;
};

class UnrealCore::UnbindDelegateResults::Builder {
public:
  typedef UnbindDelegateResults Builds;

  Builder() = delete;  // Deleted to discourage incorrect usage.
                       // You can explicitly initialize to nullptr instead.
  inline Builder(decltype(nullptr)) {}
  inline explicit Builder(::capnp::_::StructBuilder base): _builder(base) {}
  inline operator Reader() const { return Reader(_builder.asReader()); }
  inline Reader asReader() const { return *this; }

  inline ::capnp::MessageSize totalSize() const { return asReader().totalSize(); }
#if !CAPNP_LITE
  inline ::kj::StringTree toString() const { return asReader().toString(); }
#endif  // !CAPNP_LITE

private:
  ::capnp::_::StructBuilder _builder;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  friend class ::capnp::Orphanage;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
};

#if !CAPNP_LITE
class UnrealCore::UnbindDelegateResults::Pipeline {
public:
  typedef UnbindDelegateResults Pipelines;

  inline Pipeline(decltype(nullptr)): _typeless(nullptr) {}
  inline explicit Pipeline(::capnp::AnyPointer::Pipeline&& typeless)
      : _typeless(kj::mv(typeless)) {}

private:
  ::capnp::AnyPointer::Pipeline _typeless;
  friend class ::capnp::PipelineHook;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
};
#endif  // !CAPNP_LITE

class UnrealCore::AddMultiDelegateParams::Reader {
public:
  typedef AddMultiDelegateParams Reads;

  Reader() = default;
  inline explicit Reader(::capnp::_::StructReader base): _reader(base) {}

  inline ::capnp::MessageSize totalSize() const {
    return _reader.totalSize().asPublic();
  }

#if !CAPNP_LITE
  inline ::kj::StringTree toString() const {
    return ::capnp::_::structString(_reader, *_capnpPrivate::brand());
  }
#endif  // !CAPNP_LITE

  inline bool hasObject() const;
  inline  ::UnrealCore::Object::Reader getObject() const;

  inline bool hasCallback() const;
#if !CAPNP_LITE
  inline  ::UnrealCore::DelegateCallback::Client getCallback() const;
#endif  // !CAPNP_LITE

private:
  ::capnp::_::StructReader _reader;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::List;
  friend class ::capnp::MessageBuilder;
  friend class ::capnp::Orphanage;
};

class UnrealCore::AddMultiDelegateParams::Builder {
public:
  typedef AddMultiDelegateParams Builds;

  Builder() = delete;  // Deleted to discourage incorrect usage.
                       // You can explicitly initialize to nullptr instead.
  inline Builder(decltype(nullptr)) {}
  inline explicit Builder(::capnp::_::StructBuilder base): _builder(base) {}
  inline operator Reader() const { return Reader(_builder.asReader()); }
  inline Reader asReader() const { return *this; }

  inline ::capnp::MessageSize totalSize() const { return asReader().totalSize(); }
#if !CAPNP_LITE
  inline ::kj::StringTree toString() const { return asReader().toString(); }
#endif  // !CAPNP_LITE

  inline bool hasObject();
  inline  ::UnrealCore::Object::Builder getObject();
  inline void setObject( ::UnrealCore::Object::Reader value);
  inline  ::UnrealCore::Object::Builder initObject();
  inline void adoptObject(::capnp::Orphan< ::UnrealCore::Object>&& value);
  inline ::capnp::Orphan< ::UnrealCore::Object> disownObject();

  inline bool hasCallback();
#if !CAPNP_LITE
  inline  ::UnrealCore::DelegateCallback::Client getCallback();
  inline void setCallback( ::UnrealCore::DelegateCallback::Client&& value);
  inline void setCallback( ::UnrealCore::DelegateCallback::Client& value);
  inline void adoptCallback(::capnp::Orphan< ::UnrealCore::DelegateCallback>&& value);
  inline ::capnp::Orphan< ::UnrealCore::DelegateCallback> disownCallback();
#endif  // !CAPNP_LITE

private:
  ::capnp::_::StructBuilder _builder;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  friend class ::capnp::Orphanage;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
};

#if !CAPNP_LITE
class UnrealCore::AddMultiDelegateParams::Pipeline {
public:
  typedef AddMultiDelegateParams Pipelines;

  inline Pipeline(decltype(nullptr)): _typeless(nullptr) {}
  inline explicit Pipeline(::capnp::AnyPointer::Pipeline&& typeless)
      : _typeless(kj::mv(typeless)) {}

  inline  ::UnrealCore::Object::Pipeline getObject();
  inline  ::UnrealCore::DelegateCallback::Client getCallback();
private:
  ::capnp::AnyPointer::Pipeline _typeless;
  friend class ::capnp::PipelineHook;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
};
#endif  // !CAPNP_LITE

class UnrealCore::AddMultiDelegateResults::Reader {
public:
  typedef AddMultiDelegateResults Reads;

  Reader() = default;
  inline explicit Reader(::capnp::_::StructReader base): _reader(base) {}

  inline ::capnp::MessageSize totalSize() const {
    return _reader.totalSize().asPublic();
  }

#if !CAPNP_LITE
  inline ::kj::StringTree toString() const {
    return ::capnp::_::structString(_reader, *_capnpPrivate::brand());
  }
#endif  // !CAPNP_LITE

  inline bool hasDelegateObject() const;
  inline  ::UnrealCore::Object::Reader getDelegateObject() const;

private:
  ::capnp::_::StructReader _reader;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::List;
  friend class ::capnp::MessageBuilder;
  friend class ::capnp::Orphanage;
};

class UnrealCore::AddMultiDelegateResults::Builder {
public:
  typedef AddMultiDelegateResults Builds;

  Builder() = delete;  // Deleted to discourage incorrect usage.
                       // You can explicitly initialize to nullptr instead.
  inline Builder(decltype(nullptr)) {}
  inline explicit Builder(::capnp::_::StructBuilder base): _builder(base) {}
  inline operator Reader() const { return Reader(_builder.asReader()); }
  inline Reader asReader() const { return *this; }

  inline ::capnp::MessageSize totalSize() const { return asReader().totalSize(); }
#if !CAPNP_LITE
  inline ::kj::StringTree toString() const { return asReader().toString(); }
#endif  // !CAPNP_LITE

  inline bool hasDelegateObject();
  inline  ::UnrealCore::Object::Builder getDelegateObject();
  inline void setDelegateObject( ::UnrealCore::Object::Reader value);
  inline  ::UnrealCore::Object::Builder initDelegateObject();
  inline void adoptDelegateObject(::capnp::Orphan< ::UnrealCore::Object>&& value);
  inline ::capnp::Orphan< ::UnrealCore::Object> disownDelegateObject();

private:
  ::capnp::_::StructBuilder _builder;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  friend class ::capnp::Orphanage;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
};

#if !CAPNP_LITE
class UnrealCore::AddMultiDelegateResults::Pipeline {
public:
  typedef AddMultiDelegateResults Pipelines;

  inline Pipeline(decltype(nullptr)): _typeless(nullptr) {}
  inline explicit Pipeline(::capnp::AnyPointer::Pipeline&& typeless)
      : _typeless(kj::mv(typeless)) {}

  inline  ::UnrealCore::Object::Pipeline getDelegateObject();
private:
  ::capnp::AnyPointer::Pipeline _typeless;
  friend class ::capnp::PipelineHook;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
};
#endif  // !CAPNP_LITE

class UnrealCore::RemoveMultiDelegateParams::Reader {
public:
  typedef RemoveMultiDelegateParams Reads;

  Reader() = default;
  inline explicit Reader(::capnp::_::StructReader base): _reader(base) {}

  inline ::capnp::MessageSize totalSize() const {
    return _reader.totalSize().asPublic();
  }

#if !CAPNP_LITE
  inline ::kj::StringTree toString() const {
    return ::capnp::_::structString(_reader, *_capnpPrivate::brand());
  }
#endif  // !CAPNP_LITE

  inline bool hasObject() const;
  inline  ::UnrealCore::Object::Reader getObject() const;

  inline bool hasDelegateObject() const;
  inline  ::UnrealCore::Object::Reader getDelegateObject() const;

private:
  ::capnp::_::StructReader _reader;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::List;
  friend class ::capnp::MessageBuilder;
  friend class ::capnp::Orphanage;
};

class UnrealCore::RemoveMultiDelegateParams::Builder {
public:
  typedef RemoveMultiDelegateParams Builds;

  Builder() = delete;  // Deleted to discourage incorrect usage.
                       // You can explicitly initialize to nullptr instead.
  inline Builder(decltype(nullptr)) {}
  inline explicit Builder(::capnp::_::StructBuilder base): _builder(base) {}
  inline operator Reader() const { return Reader(_builder.asReader()); }
  inline Reader asReader() const { return *this; }

  inline ::capnp::MessageSize totalSize() const { return asReader().totalSize(); }
#if !CAPNP_LITE
  inline ::kj::StringTree toString() const { return asReader().toString(); }
#endif  // !CAPNP_LITE

  inline bool hasObject();
  inline  ::UnrealCore::Object::Builder getObject();
  inline void setObject( ::UnrealCore::Object::Reader value);
  inline  ::UnrealCore::Object::Builder initObject();
  inline void adoptObject(::capnp::Orphan< ::UnrealCore::Object>&& value);
  inline ::capnp::Orphan< ::UnrealCore::Object> disownObject();

  inline bool hasDelegateObject();
  inline  ::UnrealCore::Object::Builder getDelegateObject();
  inline void setDelegateObject( ::UnrealCore::Object::Reader value);
  inline  ::UnrealCore::Object::Builder initDelegateObject();
  inline void adoptDelegateObject(::capnp::Orphan< ::UnrealCore::Object>&& value);
  inline ::capnp::Orphan< ::UnrealCore::Object> disownDelegateObject();

private:
  ::capnp::_::StructBuilder _builder;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  friend class ::capnp::Orphanage;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
};

#if !CAPNP_LITE
class UnrealCore::RemoveMultiDelegateParams::Pipeline {
public:
  typedef RemoveMultiDelegateParams Pipelines;

  inline Pipeline(decltype(nullptr)): _typeless(nullptr) {}
  inline explicit Pipeline(::capnp::AnyPointer::Pipeline&& typeless)
      : _typeless(kj::mv(typeless)) {}

  inline  ::UnrealCore::Object::Pipeline getObject();
  inline  ::UnrealCore::Object::Pipeline getDelegateObject();
private:
  ::capnp::AnyPointer::Pipeline _typeless;
  friend class ::capnp::PipelineHook;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
};
#endif  // !CAPNP_LITE

class UnrealCore::RemoveMultiDelegateResults::Reader {
public:
  typedef RemoveMultiDelegateResults Reads;

  Reader() = default;
  inline explicit Reader(::capnp::_::StructReader base): _reader(base) {}

  inline ::capnp::MessageSize totalSize() const {
    return _reader.totalSize().asPublic();
  }

#if !CAPNP_LITE
  inline ::kj::StringTree toString() const {
    return ::capnp::_::structString(_reader, *_capnpPrivate::brand());
  }
#endif  // !CAPNP_LITE

private:
  ::capnp::_::StructReader _reader;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::List;
  friend class ::capnp::MessageBuilder;
  friend class ::capnp::Orphanage;
};

class UnrealCore::RemoveMultiDelegateResults::Builder {
public:
  typedef RemoveMultiDelegateResults Builds;

  Builder() = delete;  // Deleted to discourage incorrect usage.
                       // You can explicitly initialize to nullptr instead.
  inline Builder(decltype(nullptr)) {}
  inline explicit Builder(::capnp::_::StructBuilder base): _builder(base) {}
  inline operator Reader() const { return Reader(_builder.asReader()); }
  inline Reader asReader() const { return *this; }

  inline ::capnp::MessageSize totalSize() const { return asReader().totalSize(); }
#if !CAPNP_LITE
  inline ::kj::StringTree toString() const { return asReader().toString(); }
#endif  // !CAPNP_LITE

private:
  ::capnp::_::StructBuilder _builder;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  friend class ::capnp::Orphanage;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
};

#if !CAPNP_LITE
class UnrealCore::RemoveMultiDelegateResults::Pipeline {
public:
  typedef RemoveMultiDelegateResults Pipelines;

  inline Pipeline(decltype(nullptr)): _typeless(nullptr) {}
  inline explicit Pipeline(::capnp::AnyPointer::Pipeline&& typeless)
      : _typeless(kj::mv(typeless)) {}

private:
  ::capnp::AnyPointer::Pipeline _typeless;
  friend class ::capnp::PipelineHook;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
};
#endif  // !CAPNP_LITE

class UnrealCore::RegisterOverrideClassParams::Reader {
public:
  typedef RegisterOverrideClassParams Reads;

  Reader() = default;
  inline explicit Reader(::capnp::_::StructReader base): _reader(base) {}

  inline ::capnp::MessageSize totalSize() const {
    return _reader.totalSize().asPublic();
  }

#if !CAPNP_LITE
  inline ::kj::StringTree toString() const {
    return ::capnp::_::structString(_reader, *_capnpPrivate::brand());
  }
#endif  // !CAPNP_LITE

  inline bool hasClass() const;
  inline  ::UnrealCore::Class::Reader getClass() const;

  inline bool hasParent() const;
  inline  ::UnrealCore::Class::Reader getParent() const;

  inline bool hasMethods() const;
  inline  ::capnp::List< ::UnrealCore::Method,  ::capnp::Kind::STRUCT>::Reader getMethods() const;

private:
  ::capnp::_::StructReader _reader;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::List;
  friend class ::capnp::MessageBuilder;
  friend class ::capnp::Orphanage;
};

class UnrealCore::RegisterOverrideClassParams::Builder {
public:
  typedef RegisterOverrideClassParams Builds;

  Builder() = delete;  // Deleted to discourage incorrect usage.
                       // You can explicitly initialize to nullptr instead.
  inline Builder(decltype(nullptr)) {}
  inline explicit Builder(::capnp::_::StructBuilder base): _builder(base) {}
  inline operator Reader() const { return Reader(_builder.asReader()); }
  inline Reader asReader() const { return *this; }

  inline ::capnp::MessageSize totalSize() const { return asReader().totalSize(); }
#if !CAPNP_LITE
  inline ::kj::StringTree toString() const { return asReader().toString(); }
#endif  // !CAPNP_LITE

  inline bool hasClass();
  inline  ::UnrealCore::Class::Builder getClass();
  inline void setClass( ::UnrealCore::Class::Reader value);
  inline  ::UnrealCore::Class::Builder initClass();
  inline void adoptClass(::capnp::Orphan< ::UnrealCore::Class>&& value);
  inline ::capnp::Orphan< ::UnrealCore::Class> disownClass();

  inline bool hasParent();
  inline  ::UnrealCore::Class::Builder getParent();
  inline void setParent( ::UnrealCore::Class::Reader value);
  inline  ::UnrealCore::Class::Builder initParent();
  inline void adoptParent(::capnp::Orphan< ::UnrealCore::Class>&& value);
  inline ::capnp::Orphan< ::UnrealCore::Class> disownParent();

  inline bool hasMethods();
  inline  ::capnp::List< ::UnrealCore::Method,  ::capnp::Kind::STRUCT>::Builder getMethods();
  inline void setMethods( ::capnp::List< ::UnrealCore::Method,  ::capnp::Kind::STRUCT>::Reader value);
  inline  ::capnp::List< ::UnrealCore::Method,  ::capnp::Kind::STRUCT>::Builder initMethods(unsigned int size);
  inline void adoptMethods(::capnp::Orphan< ::capnp::List< ::UnrealCore::Method,  ::capnp::Kind::STRUCT>>&& value);
  inline ::capnp::Orphan< ::capnp::List< ::UnrealCore::Method,  ::capnp::Kind::STRUCT>> disownMethods();

private:
  ::capnp::_::StructBuilder _builder;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  friend class ::capnp::Orphanage;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
};

#if !CAPNP_LITE
class UnrealCore::RegisterOverrideClassParams::Pipeline {
public:
  typedef RegisterOverrideClassParams Pipelines;

  inline Pipeline(decltype(nullptr)): _typeless(nullptr) {}
  inline explicit Pipeline(::capnp::AnyPointer::Pipeline&& typeless)
      : _typeless(kj::mv(typeless)) {}

  inline  ::UnrealCore::Class::Pipeline getClass();
  inline  ::UnrealCore::Class::Pipeline getParent();
private:
  ::capnp::AnyPointer::Pipeline _typeless;
  friend class ::capnp::PipelineHook;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
};
#endif  // !CAPNP_LITE

class UnrealCore::RegisterOverrideClassResults::Reader {
public:
  typedef RegisterOverrideClassResults Reads;

  Reader() = default;
  inline explicit Reader(::capnp::_::StructReader base): _reader(base) {}

  inline ::capnp::MessageSize totalSize() const {
    return _reader.totalSize().asPublic();
  }

#if !CAPNP_LITE
  inline ::kj::StringTree toString() const {
    return ::capnp::_::structString(_reader, *_capnpPrivate::brand());
  }
#endif  // !CAPNP_LITE

private:
  ::capnp::_::StructReader _reader;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::List;
  friend class ::capnp::MessageBuilder;
  friend class ::capnp::Orphanage;
};

class UnrealCore::RegisterOverrideClassResults::Builder {
public:
  typedef RegisterOverrideClassResults Builds;

  Builder() = delete;  // Deleted to discourage incorrect usage.
                       // You can explicitly initialize to nullptr instead.
  inline Builder(decltype(nullptr)) {}
  inline explicit Builder(::capnp::_::StructBuilder base): _builder(base) {}
  inline operator Reader() const { return Reader(_builder.asReader()); }
  inline Reader asReader() const { return *this; }

  inline ::capnp::MessageSize totalSize() const { return asReader().totalSize(); }
#if !CAPNP_LITE
  inline ::kj::StringTree toString() const { return asReader().toString(); }
#endif  // !CAPNP_LITE

private:
  ::capnp::_::StructBuilder _builder;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  friend class ::capnp::Orphanage;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
};

#if !CAPNP_LITE
class UnrealCore::RegisterOverrideClassResults::Pipeline {
public:
  typedef RegisterOverrideClassResults Pipelines;

  inline Pipeline(decltype(nullptr)): _typeless(nullptr) {}
  inline explicit Pipeline(::capnp::AnyPointer::Pipeline&& typeless)
      : _typeless(kj::mv(typeless)) {}

private:
  ::capnp::AnyPointer::Pipeline _typeless;
  friend class ::capnp::PipelineHook;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
};
#endif  // !CAPNP_LITE

class UnrealCore::UnregisterOverrideClassParams::Reader {
public:
  typedef UnregisterOverrideClassParams Reads;

  Reader() = default;
  inline explicit Reader(::capnp::_::StructReader base): _reader(base) {}

  inline ::capnp::MessageSize totalSize() const {
    return _reader.totalSize().asPublic();
  }

#if !CAPNP_LITE
  inline ::kj::StringTree toString() const {
    return ::capnp::_::structString(_reader, *_capnpPrivate::brand());
  }
#endif  // !CAPNP_LITE

  inline bool hasClass() const;
  inline  ::UnrealCore::Class::Reader getClass() const;

  inline bool hasParent() const;
  inline  ::UnrealCore::Class::Reader getParent() const;

private:
  ::capnp::_::StructReader _reader;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::List;
  friend class ::capnp::MessageBuilder;
  friend class ::capnp::Orphanage;
};

class UnrealCore::UnregisterOverrideClassParams::Builder {
public:
  typedef UnregisterOverrideClassParams Builds;

  Builder() = delete;  // Deleted to discourage incorrect usage.
                       // You can explicitly initialize to nullptr instead.
  inline Builder(decltype(nullptr)) {}
  inline explicit Builder(::capnp::_::StructBuilder base): _builder(base) {}
  inline operator Reader() const { return Reader(_builder.asReader()); }
  inline Reader asReader() const { return *this; }

  inline ::capnp::MessageSize totalSize() const { return asReader().totalSize(); }
#if !CAPNP_LITE
  inline ::kj::StringTree toString() const { return asReader().toString(); }
#endif  // !CAPNP_LITE

  inline bool hasClass();
  inline  ::UnrealCore::Class::Builder getClass();
  inline void setClass( ::UnrealCore::Class::Reader value);
  inline  ::UnrealCore::Class::Builder initClass();
  inline void adoptClass(::capnp::Orphan< ::UnrealCore::Class>&& value);
  inline ::capnp::Orphan< ::UnrealCore::Class> disownClass();

  inline bool hasParent();
  inline  ::UnrealCore::Class::Builder getParent();
  inline void setParent( ::UnrealCore::Class::Reader value);
  inline  ::UnrealCore::Class::Builder initParent();
  inline void adoptParent(::capnp::Orphan< ::UnrealCore::Class>&& value);
  inline ::capnp::Orphan< ::UnrealCore::Class> disownParent();

private:
  ::capnp::_::StructBuilder _builder;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  friend class ::capnp::Orphanage;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
};

#if !CAPNP_LITE
class UnrealCore::UnregisterOverrideClassParams::Pipeline {
public:
  typedef UnregisterOverrideClassParams Pipelines;

  inline Pipeline(decltype(nullptr)): _typeless(nullptr) {}
  inline explicit Pipeline(::capnp::AnyPointer::Pipeline&& typeless)
      : _typeless(kj::mv(typeless)) {}

  inline  ::UnrealCore::Class::Pipeline getClass();
  inline  ::UnrealCore::Class::Pipeline getParent();
private:
  ::capnp::AnyPointer::Pipeline _typeless;
  friend class ::capnp::PipelineHook;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
};
#endif  // !CAPNP_LITE

class UnrealCore::UnregisterOverrideClassResults::Reader {
public:
  typedef UnregisterOverrideClassResults Reads;

  Reader() = default;
  inline explicit Reader(::capnp::_::StructReader base): _reader(base) {}

  inline ::capnp::MessageSize totalSize() const {
    return _reader.totalSize().asPublic();
  }

#if !CAPNP_LITE
  inline ::kj::StringTree toString() const {
    return ::capnp::_::structString(_reader, *_capnpPrivate::brand());
  }
#endif  // !CAPNP_LITE

private:
  ::capnp::_::StructReader _reader;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::List;
  friend class ::capnp::MessageBuilder;
  friend class ::capnp::Orphanage;
};

class UnrealCore::UnregisterOverrideClassResults::Builder {
public:
  typedef UnregisterOverrideClassResults Builds;

  Builder() = delete;  // Deleted to discourage incorrect usage.
                       // You can explicitly initialize to nullptr instead.
  inline Builder(decltype(nullptr)) {}
  inline explicit Builder(::capnp::_::StructBuilder base): _builder(base) {}
  inline operator Reader() const { return Reader(_builder.asReader()); }
  inline Reader asReader() const { return *this; }

  inline ::capnp::MessageSize totalSize() const { return asReader().totalSize(); }
#if !CAPNP_LITE
  inline ::kj::StringTree toString() const { return asReader().toString(); }
#endif  // !CAPNP_LITE

private:
  ::capnp::_::StructBuilder _builder;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  friend class ::capnp::Orphanage;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
};

#if !CAPNP_LITE
class UnrealCore::UnregisterOverrideClassResults::Pipeline {
public:
  typedef UnregisterOverrideClassResults Pipelines;

  inline Pipeline(decltype(nullptr)): _typeless(nullptr) {}
  inline explicit Pipeline(::capnp::AnyPointer::Pipeline&& typeless)
      : _typeless(kj::mv(typeless)) {}

private:
  ::capnp::AnyPointer::Pipeline _typeless;
  friend class ::capnp::PipelineHook;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
};
#endif  // !CAPNP_LITE

class UnrealCore::SetPropertyParams::Reader {
public:
  typedef SetPropertyParams Reads;

  Reader() = default;
  inline explicit Reader(::capnp::_::StructReader base): _reader(base) {}

  inline ::capnp::MessageSize totalSize() const {
    return _reader.totalSize().asPublic();
  }

#if !CAPNP_LITE
  inline ::kj::StringTree toString() const {
    return ::capnp::_::structString(_reader, *_capnpPrivate::brand());
  }
#endif  // !CAPNP_LITE

  inline bool hasClass() const;
  inline  ::UnrealCore::Class::Reader getClass() const;

  inline bool hasOwner() const;
  inline  ::UnrealCore::Object::Reader getOwner() const;

  inline bool hasProperty() const;
  inline  ::UnrealCore::Property::Reader getProperty() const;

private:
  ::capnp::_::StructReader _reader;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::List;
  friend class ::capnp::MessageBuilder;
  friend class ::capnp::Orphanage;
};

class UnrealCore::SetPropertyParams::Builder {
public:
  typedef SetPropertyParams Builds;

  Builder() = delete;  // Deleted to discourage incorrect usage.
                       // You can explicitly initialize to nullptr instead.
  inline Builder(decltype(nullptr)) {}
  inline explicit Builder(::capnp::_::StructBuilder base): _builder(base) {}
  inline operator Reader() const { return Reader(_builder.asReader()); }
  inline Reader asReader() const { return *this; }

  inline ::capnp::MessageSize totalSize() const { return asReader().totalSize(); }
#if !CAPNP_LITE
  inline ::kj::StringTree toString() const { return asReader().toString(); }
#endif  // !CAPNP_LITE

  inline bool hasClass();
  inline  ::UnrealCore::Class::Builder getClass();
  inline void setClass( ::UnrealCore::Class::Reader value);
  inline  ::UnrealCore::Class::Builder initClass();
  inline void adoptClass(::capnp::Orphan< ::UnrealCore::Class>&& value);
  inline ::capnp::Orphan< ::UnrealCore::Class> disownClass();

  inline bool hasOwner();
  inline  ::UnrealCore::Object::Builder getOwner();
  inline void setOwner( ::UnrealCore::Object::Reader value);
  inline  ::UnrealCore::Object::Builder initOwner();
  inline void adoptOwner(::capnp::Orphan< ::UnrealCore::Object>&& value);
  inline ::capnp::Orphan< ::UnrealCore::Object> disownOwner();

  inline bool hasProperty();
  inline  ::UnrealCore::Property::Builder getProperty();
  inline void setProperty( ::UnrealCore::Property::Reader value);
  inline  ::UnrealCore::Property::Builder initProperty();
  inline void adoptProperty(::capnp::Orphan< ::UnrealCore::Property>&& value);
  inline ::capnp::Orphan< ::UnrealCore::Property> disownProperty();

private:
  ::capnp::_::StructBuilder _builder;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  friend class ::capnp::Orphanage;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
};

#if !CAPNP_LITE
class UnrealCore::SetPropertyParams::Pipeline {
public:
  typedef SetPropertyParams Pipelines;

  inline Pipeline(decltype(nullptr)): _typeless(nullptr) {}
  inline explicit Pipeline(::capnp::AnyPointer::Pipeline&& typeless)
      : _typeless(kj::mv(typeless)) {}

  inline  ::UnrealCore::Class::Pipeline getClass();
  inline  ::UnrealCore::Object::Pipeline getOwner();
  inline  ::UnrealCore::Property::Pipeline getProperty();
private:
  ::capnp::AnyPointer::Pipeline _typeless;
  friend class ::capnp::PipelineHook;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
};
#endif  // !CAPNP_LITE

class UnrealCore::SetPropertyResults::Reader {
public:
  typedef SetPropertyResults Reads;

  Reader() = default;
  inline explicit Reader(::capnp::_::StructReader base): _reader(base) {}

  inline ::capnp::MessageSize totalSize() const {
    return _reader.totalSize().asPublic();
  }

#if !CAPNP_LITE
  inline ::kj::StringTree toString() const {
    return ::capnp::_::structString(_reader, *_capnpPrivate::brand());
  }
#endif  // !CAPNP_LITE

private:
  ::capnp::_::StructReader _reader;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::List;
  friend class ::capnp::MessageBuilder;
  friend class ::capnp::Orphanage;
};

class UnrealCore::SetPropertyResults::Builder {
public:
  typedef SetPropertyResults Builds;

  Builder() = delete;  // Deleted to discourage incorrect usage.
                       // You can explicitly initialize to nullptr instead.
  inline Builder(decltype(nullptr)) {}
  inline explicit Builder(::capnp::_::StructBuilder base): _builder(base) {}
  inline operator Reader() const { return Reader(_builder.asReader()); }
  inline Reader asReader() const { return *this; }

  inline ::capnp::MessageSize totalSize() const { return asReader().totalSize(); }
#if !CAPNP_LITE
  inline ::kj::StringTree toString() const { return asReader().toString(); }
#endif  // !CAPNP_LITE

private:
  ::capnp::_::StructBuilder _builder;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  friend class ::capnp::Orphanage;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
};

#if !CAPNP_LITE
class UnrealCore::SetPropertyResults::Pipeline {
public:
  typedef SetPropertyResults Pipelines;

  inline Pipeline(decltype(nullptr)): _typeless(nullptr) {}
  inline explicit Pipeline(::capnp::AnyPointer::Pipeline&& typeless)
      : _typeless(kj::mv(typeless)) {}

private:
  ::capnp::AnyPointer::Pipeline _typeless;
  friend class ::capnp::PipelineHook;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
};
#endif  // !CAPNP_LITE

class UnrealCore::GetPropertyParams::Reader {
public:
  typedef GetPropertyParams Reads;

  Reader() = default;
  inline explicit Reader(::capnp::_::StructReader base): _reader(base) {}

  inline ::capnp::MessageSize totalSize() const {
    return _reader.totalSize().asPublic();
  }

#if !CAPNP_LITE
  inline ::kj::StringTree toString() const {
    return ::capnp::_::structString(_reader, *_capnpPrivate::brand());
  }
#endif  // !CAPNP_LITE

  inline bool hasClass() const;
  inline  ::UnrealCore::Class::Reader getClass() const;

  inline bool hasOwner() const;
  inline  ::UnrealCore::Object::Reader getOwner() const;

  inline bool hasPropertyName() const;
  inline  ::capnp::Text::Reader getPropertyName() const;

private:
  ::capnp::_::StructReader _reader;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::List;
  friend class ::capnp::MessageBuilder;
  friend class ::capnp::Orphanage;
};

class UnrealCore::GetPropertyParams::Builder {
public:
  typedef GetPropertyParams Builds;

  Builder() = delete;  // Deleted to discourage incorrect usage.
                       // You can explicitly initialize to nullptr instead.
  inline Builder(decltype(nullptr)) {}
  inline explicit Builder(::capnp::_::StructBuilder base): _builder(base) {}
  inline operator Reader() const { return Reader(_builder.asReader()); }
  inline Reader asReader() const { return *this; }

  inline ::capnp::MessageSize totalSize() const { return asReader().totalSize(); }
#if !CAPNP_LITE
  inline ::kj::StringTree toString() const { return asReader().toString(); }
#endif  // !CAPNP_LITE

  inline bool hasClass();
  inline  ::UnrealCore::Class::Builder getClass();
  inline void setClass( ::UnrealCore::Class::Reader value);
  inline  ::UnrealCore::Class::Builder initClass();
  inline void adoptClass(::capnp::Orphan< ::UnrealCore::Class>&& value);
  inline ::capnp::Orphan< ::UnrealCore::Class> disownClass();

  inline bool hasOwner();
  inline  ::UnrealCore::Object::Builder getOwner();
  inline void setOwner( ::UnrealCore::Object::Reader value);
  inline  ::UnrealCore::Object::Builder initOwner();
  inline void adoptOwner(::capnp::Orphan< ::UnrealCore::Object>&& value);
  inline ::capnp::Orphan< ::UnrealCore::Object> disownOwner();

  inline bool hasPropertyName();
  inline  ::capnp::Text::Builder getPropertyName();
  inline void setPropertyName( ::capnp::Text::Reader value);
  inline  ::capnp::Text::Builder initPropertyName(unsigned int size);
  inline void adoptPropertyName(::capnp::Orphan< ::capnp::Text>&& value);
  inline ::capnp::Orphan< ::capnp::Text> disownPropertyName();

private:
  ::capnp::_::StructBuilder _builder;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  friend class ::capnp::Orphanage;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
};

#if !CAPNP_LITE
class UnrealCore::GetPropertyParams::Pipeline {
public:
  typedef GetPropertyParams Pipelines;

  inline Pipeline(decltype(nullptr)): _typeless(nullptr) {}
  inline explicit Pipeline(::capnp::AnyPointer::Pipeline&& typeless)
      : _typeless(kj::mv(typeless)) {}

  inline  ::UnrealCore::Class::Pipeline getClass();
  inline  ::UnrealCore::Object::Pipeline getOwner();
private:
  ::capnp::AnyPointer::Pipeline _typeless;
  friend class ::capnp::PipelineHook;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
};
#endif  // !CAPNP_LITE

class UnrealCore::GetPropertyResults::Reader {
public:
  typedef GetPropertyResults Reads;

  Reader() = default;
  inline explicit Reader(::capnp::_::StructReader base): _reader(base) {}

  inline ::capnp::MessageSize totalSize() const {
    return _reader.totalSize().asPublic();
  }

#if !CAPNP_LITE
  inline ::kj::StringTree toString() const {
    return ::capnp::_::structString(_reader, *_capnpPrivate::brand());
  }
#endif  // !CAPNP_LITE

  inline bool hasProperty() const;
  inline  ::UnrealCore::Property::Reader getProperty() const;

private:
  ::capnp::_::StructReader _reader;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::List;
  friend class ::capnp::MessageBuilder;
  friend class ::capnp::Orphanage;
};

class UnrealCore::GetPropertyResults::Builder {
public:
  typedef GetPropertyResults Builds;

  Builder() = delete;  // Deleted to discourage incorrect usage.
                       // You can explicitly initialize to nullptr instead.
  inline Builder(decltype(nullptr)) {}
  inline explicit Builder(::capnp::_::StructBuilder base): _builder(base) {}
  inline operator Reader() const { return Reader(_builder.asReader()); }
  inline Reader asReader() const { return *this; }

  inline ::capnp::MessageSize totalSize() const { return asReader().totalSize(); }
#if !CAPNP_LITE
  inline ::kj::StringTree toString() const { return asReader().toString(); }
#endif  // !CAPNP_LITE

  inline bool hasProperty();
  inline  ::UnrealCore::Property::Builder getProperty();
  inline void setProperty( ::UnrealCore::Property::Reader value);
  inline  ::UnrealCore::Property::Builder initProperty();
  inline void adoptProperty(::capnp::Orphan< ::UnrealCore::Property>&& value);
  inline ::capnp::Orphan< ::UnrealCore::Property> disownProperty();

private:
  ::capnp::_::StructBuilder _builder;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  friend class ::capnp::Orphanage;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
};

#if !CAPNP_LITE
class UnrealCore::GetPropertyResults::Pipeline {
public:
  typedef GetPropertyResults Pipelines;

  inline Pipeline(decltype(nullptr)): _typeless(nullptr) {}
  inline explicit Pipeline(::capnp::AnyPointer::Pipeline&& typeless)
      : _typeless(kj::mv(typeless)) {}

  inline  ::UnrealCore::Property::Pipeline getProperty();
private:
  ::capnp::AnyPointer::Pipeline _typeless;
  friend class ::capnp::PipelineHook;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
};
#endif  // !CAPNP_LITE

// =======================================================================================

#if !CAPNP_LITE
inline UnrealCore::Client::Client(decltype(nullptr))
    : ::capnp::Capability::Client(nullptr) {}
inline UnrealCore::Client::Client(
    ::kj::Own< ::capnp::ClientHook>&& hook)
    : ::capnp::Capability::Client(::kj::mv(hook)) {}
template <typename _t, typename>
inline UnrealCore::Client::Client(::kj::Own<_t>&& server)
    : ::capnp::Capability::Client(::kj::mv(server)) {}
template <typename _t, typename>
inline UnrealCore::Client::Client(::kj::Promise<_t>&& promise)
    : ::capnp::Capability::Client(::kj::mv(promise)) {}
inline UnrealCore::Client::Client(::kj::Exception&& exception)
    : ::capnp::Capability::Client(::kj::mv(exception)) {}
inline  ::UnrealCore::Client& UnrealCore::Client::operator=(Client& other) {
  ::capnp::Capability::Client::operator=(other);
  return *this;
}
inline  ::UnrealCore::Client& UnrealCore::Client::operator=(Client&& other) {
  ::capnp::Capability::Client::operator=(kj::mv(other));
  return *this;
}

#endif  // !CAPNP_LITE
inline bool UnrealCore::Object::Reader::hasName() const {
  return !_reader.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
}
inline bool UnrealCore::Object::Builder::hasName() {
  return !_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
}
inline  ::capnp::Text::Reader UnrealCore::Object::Reader::getName() const {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::get(_reader.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline  ::capnp::Text::Builder UnrealCore::Object::Builder::getName() {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::get(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline void UnrealCore::Object::Builder::setName( ::capnp::Text::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::Text>::set(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), value);
}
inline  ::capnp::Text::Builder UnrealCore::Object::Builder::initName(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::init(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), size);
}
inline void UnrealCore::Object::Builder::adoptName(
    ::capnp::Orphan< ::capnp::Text>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::Text>::adopt(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::Text> UnrealCore::Object::Builder::disownName() {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::disown(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}

inline  ::uint64_t UnrealCore::Object::Reader::getAddress() const {
  return _reader.getDataField< ::uint64_t>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS);
}

inline  ::uint64_t UnrealCore::Object::Builder::getAddress() {
  return _builder.getDataField< ::uint64_t>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS);
}
inline void UnrealCore::Object::Builder::setAddress( ::uint64_t value) {
  _builder.setDataField< ::uint64_t>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS, value);
}

inline bool UnrealCore::Class::Reader::hasTypeName() const {
  return !_reader.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
}
inline bool UnrealCore::Class::Builder::hasTypeName() {
  return !_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
}
inline  ::capnp::Text::Reader UnrealCore::Class::Reader::getTypeName() const {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::get(_reader.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline  ::capnp::Text::Builder UnrealCore::Class::Builder::getTypeName() {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::get(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline void UnrealCore::Class::Builder::setTypeName( ::capnp::Text::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::Text>::set(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), value);
}
inline  ::capnp::Text::Builder UnrealCore::Class::Builder::initTypeName(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::init(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), size);
}
inline void UnrealCore::Class::Builder::adoptTypeName(
    ::capnp::Orphan< ::capnp::Text>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::Text>::adopt(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::Text> UnrealCore::Class::Builder::disownTypeName() {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::disown(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}

inline  ::UnrealCore::Argument::Which UnrealCore::Argument::Reader::which() const {
  return _reader.getDataField<Which>(
      ::capnp::bounded<1>() * ::capnp::ELEMENTS);
}
inline  ::UnrealCore::Argument::Which UnrealCore::Argument::Builder::which() {
  return _builder.getDataField<Which>(
      ::capnp::bounded<1>() * ::capnp::ELEMENTS);
}

inline bool UnrealCore::Argument::Reader::hasClass() const {
  return !_reader.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
}
inline bool UnrealCore::Argument::Builder::hasClass() {
  return !_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
}
inline  ::UnrealCore::Class::Reader UnrealCore::Argument::Reader::getClass() const {
  return ::capnp::_::PointerHelpers< ::UnrealCore::Class>::get(_reader.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline  ::UnrealCore::Class::Builder UnrealCore::Argument::Builder::getClass() {
  return ::capnp::_::PointerHelpers< ::UnrealCore::Class>::get(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
#if !CAPNP_LITE
inline  ::UnrealCore::Class::Pipeline UnrealCore::Argument::Pipeline::getClass() {
  return  ::UnrealCore::Class::Pipeline(_typeless.getPointerField(0));
}
#endif  // !CAPNP_LITE
inline void UnrealCore::Argument::Builder::setClass( ::UnrealCore::Class::Reader value) {
  ::capnp::_::PointerHelpers< ::UnrealCore::Class>::set(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), value);
}
inline  ::UnrealCore::Class::Builder UnrealCore::Argument::Builder::initClass() {
  return ::capnp::_::PointerHelpers< ::UnrealCore::Class>::init(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline void UnrealCore::Argument::Builder::adoptClass(
    ::capnp::Orphan< ::UnrealCore::Class>&& value) {
  ::capnp::_::PointerHelpers< ::UnrealCore::Class>::adopt(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::UnrealCore::Class> UnrealCore::Argument::Builder::disownClass() {
  return ::capnp::_::PointerHelpers< ::UnrealCore::Class>::disown(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}

inline bool UnrealCore::Argument::Reader::hasName() const {
  return !_reader.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS).isNull();
}
inline bool UnrealCore::Argument::Builder::hasName() {
  return !_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS).isNull();
}
inline  ::capnp::Text::Reader UnrealCore::Argument::Reader::getName() const {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::get(_reader.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS));
}
inline  ::capnp::Text::Builder UnrealCore::Argument::Builder::getName() {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::get(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS));
}
inline void UnrealCore::Argument::Builder::setName( ::capnp::Text::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::Text>::set(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS), value);
}
inline  ::capnp::Text::Builder UnrealCore::Argument::Builder::initName(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::init(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS), size);
}
inline void UnrealCore::Argument::Builder::adoptName(
    ::capnp::Orphan< ::capnp::Text>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::Text>::adopt(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::Text> UnrealCore::Argument::Builder::disownName() {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::disown(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS));
}

inline bool UnrealCore::Argument::Reader::isBoolValue() const {
  return which() == UnrealCore::Argument::BOOL_VALUE;
}
inline bool UnrealCore::Argument::Builder::isBoolValue() {
  return which() == UnrealCore::Argument::BOOL_VALUE;
}
inline bool UnrealCore::Argument::Reader::getBoolValue() const {
  KJ_IREQUIRE((which() == UnrealCore::Argument::BOOL_VALUE),
              "Must check which() before get()ing a union member.");
  return _reader.getDataField<bool>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS);
}

inline bool UnrealCore::Argument::Builder::getBoolValue() {
  KJ_IREQUIRE((which() == UnrealCore::Argument::BOOL_VALUE),
              "Must check which() before get()ing a union member.");
  return _builder.getDataField<bool>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS);
}
inline void UnrealCore::Argument::Builder::setBoolValue(bool value) {
  _builder.setDataField<UnrealCore::Argument::Which>(
      ::capnp::bounded<1>() * ::capnp::ELEMENTS, UnrealCore::Argument::BOOL_VALUE);
  _builder.setDataField<bool>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS, value);
}

inline bool UnrealCore::Argument::Reader::isUintValue() const {
  return which() == UnrealCore::Argument::UINT_VALUE;
}
inline bool UnrealCore::Argument::Builder::isUintValue() {
  return which() == UnrealCore::Argument::UINT_VALUE;
}
inline  ::uint64_t UnrealCore::Argument::Reader::getUintValue() const {
  KJ_IREQUIRE((which() == UnrealCore::Argument::UINT_VALUE),
              "Must check which() before get()ing a union member.");
  return _reader.getDataField< ::uint64_t>(
      ::capnp::bounded<1>() * ::capnp::ELEMENTS);
}

inline  ::uint64_t UnrealCore::Argument::Builder::getUintValue() {
  KJ_IREQUIRE((which() == UnrealCore::Argument::UINT_VALUE),
              "Must check which() before get()ing a union member.");
  return _builder.getDataField< ::uint64_t>(
      ::capnp::bounded<1>() * ::capnp::ELEMENTS);
}
inline void UnrealCore::Argument::Builder::setUintValue( ::uint64_t value) {
  _builder.setDataField<UnrealCore::Argument::Which>(
      ::capnp::bounded<1>() * ::capnp::ELEMENTS, UnrealCore::Argument::UINT_VALUE);
  _builder.setDataField< ::uint64_t>(
      ::capnp::bounded<1>() * ::capnp::ELEMENTS, value);
}

inline bool UnrealCore::Argument::Reader::isIntValue() const {
  return which() == UnrealCore::Argument::INT_VALUE;
}
inline bool UnrealCore::Argument::Builder::isIntValue() {
  return which() == UnrealCore::Argument::INT_VALUE;
}
inline  ::int64_t UnrealCore::Argument::Reader::getIntValue() const {
  KJ_IREQUIRE((which() == UnrealCore::Argument::INT_VALUE),
              "Must check which() before get()ing a union member.");
  return _reader.getDataField< ::int64_t>(
      ::capnp::bounded<1>() * ::capnp::ELEMENTS);
}

inline  ::int64_t UnrealCore::Argument::Builder::getIntValue() {
  KJ_IREQUIRE((which() == UnrealCore::Argument::INT_VALUE),
              "Must check which() before get()ing a union member.");
  return _builder.getDataField< ::int64_t>(
      ::capnp::bounded<1>() * ::capnp::ELEMENTS);
}
inline void UnrealCore::Argument::Builder::setIntValue( ::int64_t value) {
  _builder.setDataField<UnrealCore::Argument::Which>(
      ::capnp::bounded<1>() * ::capnp::ELEMENTS, UnrealCore::Argument::INT_VALUE);
  _builder.setDataField< ::int64_t>(
      ::capnp::bounded<1>() * ::capnp::ELEMENTS, value);
}

inline bool UnrealCore::Argument::Reader::isStrValue() const {
  return which() == UnrealCore::Argument::STR_VALUE;
}
inline bool UnrealCore::Argument::Builder::isStrValue() {
  return which() == UnrealCore::Argument::STR_VALUE;
}
inline bool UnrealCore::Argument::Reader::hasStrValue() const {
  if (which() != UnrealCore::Argument::STR_VALUE) return false;
  return !_reader.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS).isNull();
}
inline bool UnrealCore::Argument::Builder::hasStrValue() {
  if (which() != UnrealCore::Argument::STR_VALUE) return false;
  return !_builder.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS).isNull();
}
inline  ::capnp::Text::Reader UnrealCore::Argument::Reader::getStrValue() const {
  KJ_IREQUIRE((which() == UnrealCore::Argument::STR_VALUE),
              "Must check which() before get()ing a union member.");
  return ::capnp::_::PointerHelpers< ::capnp::Text>::get(_reader.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS));
}
inline  ::capnp::Text::Builder UnrealCore::Argument::Builder::getStrValue() {
  KJ_IREQUIRE((which() == UnrealCore::Argument::STR_VALUE),
              "Must check which() before get()ing a union member.");
  return ::capnp::_::PointerHelpers< ::capnp::Text>::get(_builder.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS));
}
inline void UnrealCore::Argument::Builder::setStrValue( ::capnp::Text::Reader value) {
  _builder.setDataField<UnrealCore::Argument::Which>(
      ::capnp::bounded<1>() * ::capnp::ELEMENTS, UnrealCore::Argument::STR_VALUE);
  ::capnp::_::PointerHelpers< ::capnp::Text>::set(_builder.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS), value);
}
inline  ::capnp::Text::Builder UnrealCore::Argument::Builder::initStrValue(unsigned int size) {
  _builder.setDataField<UnrealCore::Argument::Which>(
      ::capnp::bounded<1>() * ::capnp::ELEMENTS, UnrealCore::Argument::STR_VALUE);
  return ::capnp::_::PointerHelpers< ::capnp::Text>::init(_builder.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS), size);
}
inline void UnrealCore::Argument::Builder::adoptStrValue(
    ::capnp::Orphan< ::capnp::Text>&& value) {
  _builder.setDataField<UnrealCore::Argument::Which>(
      ::capnp::bounded<1>() * ::capnp::ELEMENTS, UnrealCore::Argument::STR_VALUE);
  ::capnp::_::PointerHelpers< ::capnp::Text>::adopt(_builder.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::Text> UnrealCore::Argument::Builder::disownStrValue() {
  KJ_IREQUIRE((which() == UnrealCore::Argument::STR_VALUE),
              "Must check which() before get()ing a union member.");
  return ::capnp::_::PointerHelpers< ::capnp::Text>::disown(_builder.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS));
}

inline bool UnrealCore::Argument::Reader::isFloatValue() const {
  return which() == UnrealCore::Argument::FLOAT_VALUE;
}
inline bool UnrealCore::Argument::Builder::isFloatValue() {
  return which() == UnrealCore::Argument::FLOAT_VALUE;
}
inline double UnrealCore::Argument::Reader::getFloatValue() const {
  KJ_IREQUIRE((which() == UnrealCore::Argument::FLOAT_VALUE),
              "Must check which() before get()ing a union member.");
  return _reader.getDataField<double>(
      ::capnp::bounded<1>() * ::capnp::ELEMENTS);
}

inline double UnrealCore::Argument::Builder::getFloatValue() {
  KJ_IREQUIRE((which() == UnrealCore::Argument::FLOAT_VALUE),
              "Must check which() before get()ing a union member.");
  return _builder.getDataField<double>(
      ::capnp::bounded<1>() * ::capnp::ELEMENTS);
}
inline void UnrealCore::Argument::Builder::setFloatValue(double value) {
  _builder.setDataField<UnrealCore::Argument::Which>(
      ::capnp::bounded<1>() * ::capnp::ELEMENTS, UnrealCore::Argument::FLOAT_VALUE);
  _builder.setDataField<double>(
      ::capnp::bounded<1>() * ::capnp::ELEMENTS, value);
}

inline bool UnrealCore::Argument::Reader::isObject() const {
  return which() == UnrealCore::Argument::OBJECT;
}
inline bool UnrealCore::Argument::Builder::isObject() {
  return which() == UnrealCore::Argument::OBJECT;
}
inline bool UnrealCore::Argument::Reader::hasObject() const {
  if (which() != UnrealCore::Argument::OBJECT) return false;
  return !_reader.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS).isNull();
}
inline bool UnrealCore::Argument::Builder::hasObject() {
  if (which() != UnrealCore::Argument::OBJECT) return false;
  return !_builder.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS).isNull();
}
inline  ::UnrealCore::Object::Reader UnrealCore::Argument::Reader::getObject() const {
  KJ_IREQUIRE((which() == UnrealCore::Argument::OBJECT),
              "Must check which() before get()ing a union member.");
  return ::capnp::_::PointerHelpers< ::UnrealCore::Object>::get(_reader.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS));
}
inline  ::UnrealCore::Object::Builder UnrealCore::Argument::Builder::getObject() {
  KJ_IREQUIRE((which() == UnrealCore::Argument::OBJECT),
              "Must check which() before get()ing a union member.");
  return ::capnp::_::PointerHelpers< ::UnrealCore::Object>::get(_builder.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS));
}
inline void UnrealCore::Argument::Builder::setObject( ::UnrealCore::Object::Reader value) {
  _builder.setDataField<UnrealCore::Argument::Which>(
      ::capnp::bounded<1>() * ::capnp::ELEMENTS, UnrealCore::Argument::OBJECT);
  ::capnp::_::PointerHelpers< ::UnrealCore::Object>::set(_builder.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS), value);
}
inline  ::UnrealCore::Object::Builder UnrealCore::Argument::Builder::initObject() {
  _builder.setDataField<UnrealCore::Argument::Which>(
      ::capnp::bounded<1>() * ::capnp::ELEMENTS, UnrealCore::Argument::OBJECT);
  return ::capnp::_::PointerHelpers< ::UnrealCore::Object>::init(_builder.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS));
}
inline void UnrealCore::Argument::Builder::adoptObject(
    ::capnp::Orphan< ::UnrealCore::Object>&& value) {
  _builder.setDataField<UnrealCore::Argument::Which>(
      ::capnp::bounded<1>() * ::capnp::ELEMENTS, UnrealCore::Argument::OBJECT);
  ::capnp::_::PointerHelpers< ::UnrealCore::Object>::adopt(_builder.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::UnrealCore::Object> UnrealCore::Argument::Builder::disownObject() {
  KJ_IREQUIRE((which() == UnrealCore::Argument::OBJECT),
              "Must check which() before get()ing a union member.");
  return ::capnp::_::PointerHelpers< ::UnrealCore::Object>::disown(_builder.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS));
}

inline bool UnrealCore::Argument::Reader::isEnumValue() const {
  return which() == UnrealCore::Argument::ENUM_VALUE;
}
inline bool UnrealCore::Argument::Builder::isEnumValue() {
  return which() == UnrealCore::Argument::ENUM_VALUE;
}
inline  ::int64_t UnrealCore::Argument::Reader::getEnumValue() const {
  KJ_IREQUIRE((which() == UnrealCore::Argument::ENUM_VALUE),
              "Must check which() before get()ing a union member.");
  return _reader.getDataField< ::int64_t>(
      ::capnp::bounded<1>() * ::capnp::ELEMENTS);
}

inline  ::int64_t UnrealCore::Argument::Builder::getEnumValue() {
  KJ_IREQUIRE((which() == UnrealCore::Argument::ENUM_VALUE),
              "Must check which() before get()ing a union member.");
  return _builder.getDataField< ::int64_t>(
      ::capnp::bounded<1>() * ::capnp::ELEMENTS);
}
inline void UnrealCore::Argument::Builder::setEnumValue( ::int64_t value) {
  _builder.setDataField<UnrealCore::Argument::Which>(
      ::capnp::bounded<1>() * ::capnp::ELEMENTS, UnrealCore::Argument::ENUM_VALUE);
  _builder.setDataField< ::int64_t>(
      ::capnp::bounded<1>() * ::capnp::ELEMENTS, value);
}

inline  ::UnrealCore::Property::Which UnrealCore::Property::Reader::which() const {
  return _reader.getDataField<Which>(
      ::capnp::bounded<1>() * ::capnp::ELEMENTS);
}
inline  ::UnrealCore::Property::Which UnrealCore::Property::Builder::which() {
  return _builder.getDataField<Which>(
      ::capnp::bounded<1>() * ::capnp::ELEMENTS);
}

inline bool UnrealCore::Property::Reader::hasClass() const {
  return !_reader.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
}
inline bool UnrealCore::Property::Builder::hasClass() {
  return !_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
}
inline  ::UnrealCore::Class::Reader UnrealCore::Property::Reader::getClass() const {
  return ::capnp::_::PointerHelpers< ::UnrealCore::Class>::get(_reader.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline  ::UnrealCore::Class::Builder UnrealCore::Property::Builder::getClass() {
  return ::capnp::_::PointerHelpers< ::UnrealCore::Class>::get(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
#if !CAPNP_LITE
inline  ::UnrealCore::Class::Pipeline UnrealCore::Property::Pipeline::getClass() {
  return  ::UnrealCore::Class::Pipeline(_typeless.getPointerField(0));
}
#endif  // !CAPNP_LITE
inline void UnrealCore::Property::Builder::setClass( ::UnrealCore::Class::Reader value) {
  ::capnp::_::PointerHelpers< ::UnrealCore::Class>::set(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), value);
}
inline  ::UnrealCore::Class::Builder UnrealCore::Property::Builder::initClass() {
  return ::capnp::_::PointerHelpers< ::UnrealCore::Class>::init(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline void UnrealCore::Property::Builder::adoptClass(
    ::capnp::Orphan< ::UnrealCore::Class>&& value) {
  ::capnp::_::PointerHelpers< ::UnrealCore::Class>::adopt(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::UnrealCore::Class> UnrealCore::Property::Builder::disownClass() {
  return ::capnp::_::PointerHelpers< ::UnrealCore::Class>::disown(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}

inline bool UnrealCore::Property::Reader::hasName() const {
  return !_reader.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS).isNull();
}
inline bool UnrealCore::Property::Builder::hasName() {
  return !_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS).isNull();
}
inline  ::capnp::Text::Reader UnrealCore::Property::Reader::getName() const {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::get(_reader.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS));
}
inline  ::capnp::Text::Builder UnrealCore::Property::Builder::getName() {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::get(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS));
}
inline void UnrealCore::Property::Builder::setName( ::capnp::Text::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::Text>::set(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS), value);
}
inline  ::capnp::Text::Builder UnrealCore::Property::Builder::initName(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::init(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS), size);
}
inline void UnrealCore::Property::Builder::adoptName(
    ::capnp::Orphan< ::capnp::Text>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::Text>::adopt(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::Text> UnrealCore::Property::Builder::disownName() {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::disown(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS));
}

inline bool UnrealCore::Property::Reader::isBoolValue() const {
  return which() == UnrealCore::Property::BOOL_VALUE;
}
inline bool UnrealCore::Property::Builder::isBoolValue() {
  return which() == UnrealCore::Property::BOOL_VALUE;
}
inline bool UnrealCore::Property::Reader::getBoolValue() const {
  KJ_IREQUIRE((which() == UnrealCore::Property::BOOL_VALUE),
              "Must check which() before get()ing a union member.");
  return _reader.getDataField<bool>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS);
}

inline bool UnrealCore::Property::Builder::getBoolValue() {
  KJ_IREQUIRE((which() == UnrealCore::Property::BOOL_VALUE),
              "Must check which() before get()ing a union member.");
  return _builder.getDataField<bool>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS);
}
inline void UnrealCore::Property::Builder::setBoolValue(bool value) {
  _builder.setDataField<UnrealCore::Property::Which>(
      ::capnp::bounded<1>() * ::capnp::ELEMENTS, UnrealCore::Property::BOOL_VALUE);
  _builder.setDataField<bool>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS, value);
}

inline bool UnrealCore::Property::Reader::isUintValue() const {
  return which() == UnrealCore::Property::UINT_VALUE;
}
inline bool UnrealCore::Property::Builder::isUintValue() {
  return which() == UnrealCore::Property::UINT_VALUE;
}
inline  ::uint64_t UnrealCore::Property::Reader::getUintValue() const {
  KJ_IREQUIRE((which() == UnrealCore::Property::UINT_VALUE),
              "Must check which() before get()ing a union member.");
  return _reader.getDataField< ::uint64_t>(
      ::capnp::bounded<1>() * ::capnp::ELEMENTS);
}

inline  ::uint64_t UnrealCore::Property::Builder::getUintValue() {
  KJ_IREQUIRE((which() == UnrealCore::Property::UINT_VALUE),
              "Must check which() before get()ing a union member.");
  return _builder.getDataField< ::uint64_t>(
      ::capnp::bounded<1>() * ::capnp::ELEMENTS);
}
inline void UnrealCore::Property::Builder::setUintValue( ::uint64_t value) {
  _builder.setDataField<UnrealCore::Property::Which>(
      ::capnp::bounded<1>() * ::capnp::ELEMENTS, UnrealCore::Property::UINT_VALUE);
  _builder.setDataField< ::uint64_t>(
      ::capnp::bounded<1>() * ::capnp::ELEMENTS, value);
}

inline bool UnrealCore::Property::Reader::isIntValue() const {
  return which() == UnrealCore::Property::INT_VALUE;
}
inline bool UnrealCore::Property::Builder::isIntValue() {
  return which() == UnrealCore::Property::INT_VALUE;
}
inline  ::int64_t UnrealCore::Property::Reader::getIntValue() const {
  KJ_IREQUIRE((which() == UnrealCore::Property::INT_VALUE),
              "Must check which() before get()ing a union member.");
  return _reader.getDataField< ::int64_t>(
      ::capnp::bounded<1>() * ::capnp::ELEMENTS);
}

inline  ::int64_t UnrealCore::Property::Builder::getIntValue() {
  KJ_IREQUIRE((which() == UnrealCore::Property::INT_VALUE),
              "Must check which() before get()ing a union member.");
  return _builder.getDataField< ::int64_t>(
      ::capnp::bounded<1>() * ::capnp::ELEMENTS);
}
inline void UnrealCore::Property::Builder::setIntValue( ::int64_t value) {
  _builder.setDataField<UnrealCore::Property::Which>(
      ::capnp::bounded<1>() * ::capnp::ELEMENTS, UnrealCore::Property::INT_VALUE);
  _builder.setDataField< ::int64_t>(
      ::capnp::bounded<1>() * ::capnp::ELEMENTS, value);
}

inline bool UnrealCore::Property::Reader::isStrValue() const {
  return which() == UnrealCore::Property::STR_VALUE;
}
inline bool UnrealCore::Property::Builder::isStrValue() {
  return which() == UnrealCore::Property::STR_VALUE;
}
inline bool UnrealCore::Property::Reader::hasStrValue() const {
  if (which() != UnrealCore::Property::STR_VALUE) return false;
  return !_reader.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS).isNull();
}
inline bool UnrealCore::Property::Builder::hasStrValue() {
  if (which() != UnrealCore::Property::STR_VALUE) return false;
  return !_builder.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS).isNull();
}
inline  ::capnp::Text::Reader UnrealCore::Property::Reader::getStrValue() const {
  KJ_IREQUIRE((which() == UnrealCore::Property::STR_VALUE),
              "Must check which() before get()ing a union member.");
  return ::capnp::_::PointerHelpers< ::capnp::Text>::get(_reader.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS));
}
inline  ::capnp::Text::Builder UnrealCore::Property::Builder::getStrValue() {
  KJ_IREQUIRE((which() == UnrealCore::Property::STR_VALUE),
              "Must check which() before get()ing a union member.");
  return ::capnp::_::PointerHelpers< ::capnp::Text>::get(_builder.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS));
}
inline void UnrealCore::Property::Builder::setStrValue( ::capnp::Text::Reader value) {
  _builder.setDataField<UnrealCore::Property::Which>(
      ::capnp::bounded<1>() * ::capnp::ELEMENTS, UnrealCore::Property::STR_VALUE);
  ::capnp::_::PointerHelpers< ::capnp::Text>::set(_builder.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS), value);
}
inline  ::capnp::Text::Builder UnrealCore::Property::Builder::initStrValue(unsigned int size) {
  _builder.setDataField<UnrealCore::Property::Which>(
      ::capnp::bounded<1>() * ::capnp::ELEMENTS, UnrealCore::Property::STR_VALUE);
  return ::capnp::_::PointerHelpers< ::capnp::Text>::init(_builder.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS), size);
}
inline void UnrealCore::Property::Builder::adoptStrValue(
    ::capnp::Orphan< ::capnp::Text>&& value) {
  _builder.setDataField<UnrealCore::Property::Which>(
      ::capnp::bounded<1>() * ::capnp::ELEMENTS, UnrealCore::Property::STR_VALUE);
  ::capnp::_::PointerHelpers< ::capnp::Text>::adopt(_builder.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::Text> UnrealCore::Property::Builder::disownStrValue() {
  KJ_IREQUIRE((which() == UnrealCore::Property::STR_VALUE),
              "Must check which() before get()ing a union member.");
  return ::capnp::_::PointerHelpers< ::capnp::Text>::disown(_builder.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS));
}

inline bool UnrealCore::Property::Reader::isFloatValue() const {
  return which() == UnrealCore::Property::FLOAT_VALUE;
}
inline bool UnrealCore::Property::Builder::isFloatValue() {
  return which() == UnrealCore::Property::FLOAT_VALUE;
}
inline double UnrealCore::Property::Reader::getFloatValue() const {
  KJ_IREQUIRE((which() == UnrealCore::Property::FLOAT_VALUE),
              "Must check which() before get()ing a union member.");
  return _reader.getDataField<double>(
      ::capnp::bounded<1>() * ::capnp::ELEMENTS);
}

inline double UnrealCore::Property::Builder::getFloatValue() {
  KJ_IREQUIRE((which() == UnrealCore::Property::FLOAT_VALUE),
              "Must check which() before get()ing a union member.");
  return _builder.getDataField<double>(
      ::capnp::bounded<1>() * ::capnp::ELEMENTS);
}
inline void UnrealCore::Property::Builder::setFloatValue(double value) {
  _builder.setDataField<UnrealCore::Property::Which>(
      ::capnp::bounded<1>() * ::capnp::ELEMENTS, UnrealCore::Property::FLOAT_VALUE);
  _builder.setDataField<double>(
      ::capnp::bounded<1>() * ::capnp::ELEMENTS, value);
}

inline bool UnrealCore::Property::Reader::isObject() const {
  return which() == UnrealCore::Property::OBJECT;
}
inline bool UnrealCore::Property::Builder::isObject() {
  return which() == UnrealCore::Property::OBJECT;
}
inline bool UnrealCore::Property::Reader::hasObject() const {
  if (which() != UnrealCore::Property::OBJECT) return false;
  return !_reader.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS).isNull();
}
inline bool UnrealCore::Property::Builder::hasObject() {
  if (which() != UnrealCore::Property::OBJECT) return false;
  return !_builder.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS).isNull();
}
inline  ::UnrealCore::Object::Reader UnrealCore::Property::Reader::getObject() const {
  KJ_IREQUIRE((which() == UnrealCore::Property::OBJECT),
              "Must check which() before get()ing a union member.");
  return ::capnp::_::PointerHelpers< ::UnrealCore::Object>::get(_reader.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS));
}
inline  ::UnrealCore::Object::Builder UnrealCore::Property::Builder::getObject() {
  KJ_IREQUIRE((which() == UnrealCore::Property::OBJECT),
              "Must check which() before get()ing a union member.");
  return ::capnp::_::PointerHelpers< ::UnrealCore::Object>::get(_builder.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS));
}
inline void UnrealCore::Property::Builder::setObject( ::UnrealCore::Object::Reader value) {
  _builder.setDataField<UnrealCore::Property::Which>(
      ::capnp::bounded<1>() * ::capnp::ELEMENTS, UnrealCore::Property::OBJECT);
  ::capnp::_::PointerHelpers< ::UnrealCore::Object>::set(_builder.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS), value);
}
inline  ::UnrealCore::Object::Builder UnrealCore::Property::Builder::initObject() {
  _builder.setDataField<UnrealCore::Property::Which>(
      ::capnp::bounded<1>() * ::capnp::ELEMENTS, UnrealCore::Property::OBJECT);
  return ::capnp::_::PointerHelpers< ::UnrealCore::Object>::init(_builder.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS));
}
inline void UnrealCore::Property::Builder::adoptObject(
    ::capnp::Orphan< ::UnrealCore::Object>&& value) {
  _builder.setDataField<UnrealCore::Property::Which>(
      ::capnp::bounded<1>() * ::capnp::ELEMENTS, UnrealCore::Property::OBJECT);
  ::capnp::_::PointerHelpers< ::UnrealCore::Object>::adopt(_builder.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::UnrealCore::Object> UnrealCore::Property::Builder::disownObject() {
  KJ_IREQUIRE((which() == UnrealCore::Property::OBJECT),
              "Must check which() before get()ing a union member.");
  return ::capnp::_::PointerHelpers< ::UnrealCore::Object>::disown(_builder.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS));
}

inline bool UnrealCore::Property::Reader::isEnumValue() const {
  return which() == UnrealCore::Property::ENUM_VALUE;
}
inline bool UnrealCore::Property::Builder::isEnumValue() {
  return which() == UnrealCore::Property::ENUM_VALUE;
}
inline  ::int64_t UnrealCore::Property::Reader::getEnumValue() const {
  KJ_IREQUIRE((which() == UnrealCore::Property::ENUM_VALUE),
              "Must check which() before get()ing a union member.");
  return _reader.getDataField< ::int64_t>(
      ::capnp::bounded<1>() * ::capnp::ELEMENTS);
}

inline  ::int64_t UnrealCore::Property::Builder::getEnumValue() {
  KJ_IREQUIRE((which() == UnrealCore::Property::ENUM_VALUE),
              "Must check which() before get()ing a union member.");
  return _builder.getDataField< ::int64_t>(
      ::capnp::bounded<1>() * ::capnp::ELEMENTS);
}
inline void UnrealCore::Property::Builder::setEnumValue( ::int64_t value) {
  _builder.setDataField<UnrealCore::Property::Which>(
      ::capnp::bounded<1>() * ::capnp::ELEMENTS, UnrealCore::Property::ENUM_VALUE);
  _builder.setDataField< ::int64_t>(
      ::capnp::bounded<1>() * ::capnp::ELEMENTS, value);
}

inline bool UnrealCore::Method::Reader::hasName() const {
  return !_reader.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
}
inline bool UnrealCore::Method::Builder::hasName() {
  return !_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
}
inline  ::capnp::Text::Reader UnrealCore::Method::Reader::getName() const {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::get(_reader.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline  ::capnp::Text::Builder UnrealCore::Method::Builder::getName() {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::get(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline void UnrealCore::Method::Builder::setName( ::capnp::Text::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::Text>::set(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), value);
}
inline  ::capnp::Text::Builder UnrealCore::Method::Builder::initName(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::init(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), size);
}
inline void UnrealCore::Method::Builder::adoptName(
    ::capnp::Orphan< ::capnp::Text>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::Text>::adopt(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::Text> UnrealCore::Method::Builder::disownName() {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::disown(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}

#if !CAPNP_LITE
inline UnrealCore::MethodCallable::Client::Client(decltype(nullptr))
    : ::capnp::Capability::Client(nullptr) {}
inline UnrealCore::MethodCallable::Client::Client(
    ::kj::Own< ::capnp::ClientHook>&& hook)
    : ::capnp::Capability::Client(::kj::mv(hook)) {}
template <typename _t, typename>
inline UnrealCore::MethodCallable::Client::Client(::kj::Own<_t>&& server)
    : ::capnp::Capability::Client(::kj::mv(server)) {}
template <typename _t, typename>
inline UnrealCore::MethodCallable::Client::Client(::kj::Promise<_t>&& promise)
    : ::capnp::Capability::Client(::kj::mv(promise)) {}
inline UnrealCore::MethodCallable::Client::Client(::kj::Exception&& exception)
    : ::capnp::Capability::Client(::kj::mv(exception)) {}
inline  ::UnrealCore::MethodCallable::Client& UnrealCore::MethodCallable::Client::operator=(Client& other) {
  ::capnp::Capability::Client::operator=(other);
  return *this;
}
inline  ::UnrealCore::MethodCallable::Client& UnrealCore::MethodCallable::Client::operator=(Client&& other) {
  ::capnp::Capability::Client::operator=(kj::mv(other));
  return *this;
}

#endif  // !CAPNP_LITE
inline bool UnrealCore::MethodCallable::InvokeParams::Reader::hasMethod() const {
  return !_reader.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
}
inline bool UnrealCore::MethodCallable::InvokeParams::Builder::hasMethod() {
  return !_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
}
inline  ::UnrealCore::Method::Reader UnrealCore::MethodCallable::InvokeParams::Reader::getMethod() const {
  return ::capnp::_::PointerHelpers< ::UnrealCore::Method>::get(_reader.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline  ::UnrealCore::Method::Builder UnrealCore::MethodCallable::InvokeParams::Builder::getMethod() {
  return ::capnp::_::PointerHelpers< ::UnrealCore::Method>::get(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
#if !CAPNP_LITE
inline  ::UnrealCore::Method::Pipeline UnrealCore::MethodCallable::InvokeParams::Pipeline::getMethod() {
  return  ::UnrealCore::Method::Pipeline(_typeless.getPointerField(0));
}
#endif  // !CAPNP_LITE
inline void UnrealCore::MethodCallable::InvokeParams::Builder::setMethod( ::UnrealCore::Method::Reader value) {
  ::capnp::_::PointerHelpers< ::UnrealCore::Method>::set(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), value);
}
inline  ::UnrealCore::Method::Builder UnrealCore::MethodCallable::InvokeParams::Builder::initMethod() {
  return ::capnp::_::PointerHelpers< ::UnrealCore::Method>::init(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline void UnrealCore::MethodCallable::InvokeParams::Builder::adoptMethod(
    ::capnp::Orphan< ::UnrealCore::Method>&& value) {
  ::capnp::_::PointerHelpers< ::UnrealCore::Method>::adopt(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::UnrealCore::Method> UnrealCore::MethodCallable::InvokeParams::Builder::disownMethod() {
  return ::capnp::_::PointerHelpers< ::UnrealCore::Method>::disown(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}

#if !CAPNP_LITE
inline UnrealCore::DelegateCallback::Client::Client(decltype(nullptr))
    : ::capnp::Capability::Client(nullptr) {}
inline UnrealCore::DelegateCallback::Client::Client(
    ::kj::Own< ::capnp::ClientHook>&& hook)
    : ::capnp::Capability::Client(::kj::mv(hook)) {}
template <typename _t, typename>
inline UnrealCore::DelegateCallback::Client::Client(::kj::Own<_t>&& server)
    : ::capnp::Capability::Client(::kj::mv(server)) {}
template <typename _t, typename>
inline UnrealCore::DelegateCallback::Client::Client(::kj::Promise<_t>&& promise)
    : ::capnp::Capability::Client(::kj::mv(promise)) {}
inline UnrealCore::DelegateCallback::Client::Client(::kj::Exception&& exception)
    : ::capnp::Capability::Client(::kj::mv(exception)) {}
inline  ::UnrealCore::DelegateCallback::Client& UnrealCore::DelegateCallback::Client::operator=(Client& other) {
  ::capnp::Capability::Client::operator=(other);
  return *this;
}
inline  ::UnrealCore::DelegateCallback::Client& UnrealCore::DelegateCallback::Client::operator=(Client&& other) {
  ::capnp::Capability::Client::operator=(kj::mv(other));
  return *this;
}

#endif  // !CAPNP_LITE
inline bool UnrealCore::DelegateCallback::OnCallParams::Reader::hasObject() const {
  return !_reader.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
}
inline bool UnrealCore::DelegateCallback::OnCallParams::Builder::hasObject() {
  return !_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
}
inline  ::UnrealCore::Object::Reader UnrealCore::DelegateCallback::OnCallParams::Reader::getObject() const {
  return ::capnp::_::PointerHelpers< ::UnrealCore::Object>::get(_reader.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline  ::UnrealCore::Object::Builder UnrealCore::DelegateCallback::OnCallParams::Builder::getObject() {
  return ::capnp::_::PointerHelpers< ::UnrealCore::Object>::get(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
#if !CAPNP_LITE
inline  ::UnrealCore::Object::Pipeline UnrealCore::DelegateCallback::OnCallParams::Pipeline::getObject() {
  return  ::UnrealCore::Object::Pipeline(_typeless.getPointerField(0));
}
#endif  // !CAPNP_LITE
inline void UnrealCore::DelegateCallback::OnCallParams::Builder::setObject( ::UnrealCore::Object::Reader value) {
  ::capnp::_::PointerHelpers< ::UnrealCore::Object>::set(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), value);
}
inline  ::UnrealCore::Object::Builder UnrealCore::DelegateCallback::OnCallParams::Builder::initObject() {
  return ::capnp::_::PointerHelpers< ::UnrealCore::Object>::init(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline void UnrealCore::DelegateCallback::OnCallParams::Builder::adoptObject(
    ::capnp::Orphan< ::UnrealCore::Object>&& value) {
  ::capnp::_::PointerHelpers< ::UnrealCore::Object>::adopt(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::UnrealCore::Object> UnrealCore::DelegateCallback::OnCallParams::Builder::disownObject() {
  return ::capnp::_::PointerHelpers< ::UnrealCore::Object>::disown(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}

inline bool UnrealCore::DelegateCallback::OnCallParams::Reader::hasParams() const {
  return !_reader.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS).isNull();
}
inline bool UnrealCore::DelegateCallback::OnCallParams::Builder::hasParams() {
  return !_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS).isNull();
}
inline  ::capnp::List< ::UnrealCore::Argument,  ::capnp::Kind::STRUCT>::Reader UnrealCore::DelegateCallback::OnCallParams::Reader::getParams() const {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::UnrealCore::Argument,  ::capnp::Kind::STRUCT>>::get(_reader.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS));
}
inline  ::capnp::List< ::UnrealCore::Argument,  ::capnp::Kind::STRUCT>::Builder UnrealCore::DelegateCallback::OnCallParams::Builder::getParams() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::UnrealCore::Argument,  ::capnp::Kind::STRUCT>>::get(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS));
}
inline void UnrealCore::DelegateCallback::OnCallParams::Builder::setParams( ::capnp::List< ::UnrealCore::Argument,  ::capnp::Kind::STRUCT>::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::UnrealCore::Argument,  ::capnp::Kind::STRUCT>>::set(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS), value);
}
inline  ::capnp::List< ::UnrealCore::Argument,  ::capnp::Kind::STRUCT>::Builder UnrealCore::DelegateCallback::OnCallParams::Builder::initParams(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::UnrealCore::Argument,  ::capnp::Kind::STRUCT>>::init(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS), size);
}
inline void UnrealCore::DelegateCallback::OnCallParams::Builder::adoptParams(
    ::capnp::Orphan< ::capnp::List< ::UnrealCore::Argument,  ::capnp::Kind::STRUCT>>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::UnrealCore::Argument,  ::capnp::Kind::STRUCT>>::adopt(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::List< ::UnrealCore::Argument,  ::capnp::Kind::STRUCT>> UnrealCore::DelegateCallback::OnCallParams::Builder::disownParams() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::UnrealCore::Argument,  ::capnp::Kind::STRUCT>>::disown(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS));
}

inline bool UnrealCore::NewObjectParams::Reader::hasOuter() const {
  return !_reader.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
}
inline bool UnrealCore::NewObjectParams::Builder::hasOuter() {
  return !_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
}
inline  ::UnrealCore::Object::Reader UnrealCore::NewObjectParams::Reader::getOuter() const {
  return ::capnp::_::PointerHelpers< ::UnrealCore::Object>::get(_reader.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline  ::UnrealCore::Object::Builder UnrealCore::NewObjectParams::Builder::getOuter() {
  return ::capnp::_::PointerHelpers< ::UnrealCore::Object>::get(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
#if !CAPNP_LITE
inline  ::UnrealCore::Object::Pipeline UnrealCore::NewObjectParams::Pipeline::getOuter() {
  return  ::UnrealCore::Object::Pipeline(_typeless.getPointerField(0));
}
#endif  // !CAPNP_LITE
inline void UnrealCore::NewObjectParams::Builder::setOuter( ::UnrealCore::Object::Reader value) {
  ::capnp::_::PointerHelpers< ::UnrealCore::Object>::set(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), value);
}
inline  ::UnrealCore::Object::Builder UnrealCore::NewObjectParams::Builder::initOuter() {
  return ::capnp::_::PointerHelpers< ::UnrealCore::Object>::init(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline void UnrealCore::NewObjectParams::Builder::adoptOuter(
    ::capnp::Orphan< ::UnrealCore::Object>&& value) {
  ::capnp::_::PointerHelpers< ::UnrealCore::Object>::adopt(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::UnrealCore::Object> UnrealCore::NewObjectParams::Builder::disownOuter() {
  return ::capnp::_::PointerHelpers< ::UnrealCore::Object>::disown(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}

inline bool UnrealCore::NewObjectParams::Reader::hasClass() const {
  return !_reader.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS).isNull();
}
inline bool UnrealCore::NewObjectParams::Builder::hasClass() {
  return !_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS).isNull();
}
inline  ::UnrealCore::Class::Reader UnrealCore::NewObjectParams::Reader::getClass() const {
  return ::capnp::_::PointerHelpers< ::UnrealCore::Class>::get(_reader.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS));
}
inline  ::UnrealCore::Class::Builder UnrealCore::NewObjectParams::Builder::getClass() {
  return ::capnp::_::PointerHelpers< ::UnrealCore::Class>::get(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS));
}
#if !CAPNP_LITE
inline  ::UnrealCore::Class::Pipeline UnrealCore::NewObjectParams::Pipeline::getClass() {
  return  ::UnrealCore::Class::Pipeline(_typeless.getPointerField(1));
}
#endif  // !CAPNP_LITE
inline void UnrealCore::NewObjectParams::Builder::setClass( ::UnrealCore::Class::Reader value) {
  ::capnp::_::PointerHelpers< ::UnrealCore::Class>::set(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS), value);
}
inline  ::UnrealCore::Class::Builder UnrealCore::NewObjectParams::Builder::initClass() {
  return ::capnp::_::PointerHelpers< ::UnrealCore::Class>::init(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS));
}
inline void UnrealCore::NewObjectParams::Builder::adoptClass(
    ::capnp::Orphan< ::UnrealCore::Class>&& value) {
  ::capnp::_::PointerHelpers< ::UnrealCore::Class>::adopt(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::UnrealCore::Class> UnrealCore::NewObjectParams::Builder::disownClass() {
  return ::capnp::_::PointerHelpers< ::UnrealCore::Class>::disown(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS));
}

inline bool UnrealCore::NewObjectParams::Reader::hasObjName() const {
  return !_reader.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS).isNull();
}
inline bool UnrealCore::NewObjectParams::Builder::hasObjName() {
  return !_builder.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS).isNull();
}
inline  ::capnp::Text::Reader UnrealCore::NewObjectParams::Reader::getObjName() const {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::get(_reader.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS));
}
inline  ::capnp::Text::Builder UnrealCore::NewObjectParams::Builder::getObjName() {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::get(_builder.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS));
}
inline void UnrealCore::NewObjectParams::Builder::setObjName( ::capnp::Text::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::Text>::set(_builder.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS), value);
}
inline  ::capnp::Text::Builder UnrealCore::NewObjectParams::Builder::initObjName(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::init(_builder.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS), size);
}
inline void UnrealCore::NewObjectParams::Builder::adoptObjName(
    ::capnp::Orphan< ::capnp::Text>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::Text>::adopt(_builder.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::Text> UnrealCore::NewObjectParams::Builder::disownObjName() {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::disown(_builder.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS));
}

inline  ::uint64_t UnrealCore::NewObjectParams::Reader::getFlags() const {
  return _reader.getDataField< ::uint64_t>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS);
}

inline  ::uint64_t UnrealCore::NewObjectParams::Builder::getFlags() {
  return _builder.getDataField< ::uint64_t>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS);
}
inline void UnrealCore::NewObjectParams::Builder::setFlags( ::uint64_t value) {
  _builder.setDataField< ::uint64_t>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS, value);
}

inline bool UnrealCore::NewObjectParams::Reader::hasConstructArgs() const {
  return !_reader.getPointerField(
      ::capnp::bounded<3>() * ::capnp::POINTERS).isNull();
}
inline bool UnrealCore::NewObjectParams::Builder::hasConstructArgs() {
  return !_builder.getPointerField(
      ::capnp::bounded<3>() * ::capnp::POINTERS).isNull();
}
inline  ::capnp::List< ::UnrealCore::Argument,  ::capnp::Kind::STRUCT>::Reader UnrealCore::NewObjectParams::Reader::getConstructArgs() const {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::UnrealCore::Argument,  ::capnp::Kind::STRUCT>>::get(_reader.getPointerField(
      ::capnp::bounded<3>() * ::capnp::POINTERS));
}
inline  ::capnp::List< ::UnrealCore::Argument,  ::capnp::Kind::STRUCT>::Builder UnrealCore::NewObjectParams::Builder::getConstructArgs() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::UnrealCore::Argument,  ::capnp::Kind::STRUCT>>::get(_builder.getPointerField(
      ::capnp::bounded<3>() * ::capnp::POINTERS));
}
inline void UnrealCore::NewObjectParams::Builder::setConstructArgs( ::capnp::List< ::UnrealCore::Argument,  ::capnp::Kind::STRUCT>::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::UnrealCore::Argument,  ::capnp::Kind::STRUCT>>::set(_builder.getPointerField(
      ::capnp::bounded<3>() * ::capnp::POINTERS), value);
}
inline  ::capnp::List< ::UnrealCore::Argument,  ::capnp::Kind::STRUCT>::Builder UnrealCore::NewObjectParams::Builder::initConstructArgs(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::UnrealCore::Argument,  ::capnp::Kind::STRUCT>>::init(_builder.getPointerField(
      ::capnp::bounded<3>() * ::capnp::POINTERS), size);
}
inline void UnrealCore::NewObjectParams::Builder::adoptConstructArgs(
    ::capnp::Orphan< ::capnp::List< ::UnrealCore::Argument,  ::capnp::Kind::STRUCT>>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::UnrealCore::Argument,  ::capnp::Kind::STRUCT>>::adopt(_builder.getPointerField(
      ::capnp::bounded<3>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::List< ::UnrealCore::Argument,  ::capnp::Kind::STRUCT>> UnrealCore::NewObjectParams::Builder::disownConstructArgs() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::UnrealCore::Argument,  ::capnp::Kind::STRUCT>>::disown(_builder.getPointerField(
      ::capnp::bounded<3>() * ::capnp::POINTERS));
}

inline bool UnrealCore::NewObjectResults::Reader::hasObject() const {
  return !_reader.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
}
inline bool UnrealCore::NewObjectResults::Builder::hasObject() {
  return !_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
}
inline  ::UnrealCore::Object::Reader UnrealCore::NewObjectResults::Reader::getObject() const {
  return ::capnp::_::PointerHelpers< ::UnrealCore::Object>::get(_reader.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline  ::UnrealCore::Object::Builder UnrealCore::NewObjectResults::Builder::getObject() {
  return ::capnp::_::PointerHelpers< ::UnrealCore::Object>::get(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
#if !CAPNP_LITE
inline  ::UnrealCore::Object::Pipeline UnrealCore::NewObjectResults::Pipeline::getObject() {
  return  ::UnrealCore::Object::Pipeline(_typeless.getPointerField(0));
}
#endif  // !CAPNP_LITE
inline void UnrealCore::NewObjectResults::Builder::setObject( ::UnrealCore::Object::Reader value) {
  ::capnp::_::PointerHelpers< ::UnrealCore::Object>::set(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), value);
}
inline  ::UnrealCore::Object::Builder UnrealCore::NewObjectResults::Builder::initObject() {
  return ::capnp::_::PointerHelpers< ::UnrealCore::Object>::init(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline void UnrealCore::NewObjectResults::Builder::adoptObject(
    ::capnp::Orphan< ::UnrealCore::Object>&& value) {
  ::capnp::_::PointerHelpers< ::UnrealCore::Object>::adopt(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::UnrealCore::Object> UnrealCore::NewObjectResults::Builder::disownObject() {
  return ::capnp::_::PointerHelpers< ::UnrealCore::Object>::disown(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}

inline bool UnrealCore::DestroyObjectParams::Reader::hasOuter() const {
  return !_reader.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
}
inline bool UnrealCore::DestroyObjectParams::Builder::hasOuter() {
  return !_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
}
inline  ::UnrealCore::Object::Reader UnrealCore::DestroyObjectParams::Reader::getOuter() const {
  return ::capnp::_::PointerHelpers< ::UnrealCore::Object>::get(_reader.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline  ::UnrealCore::Object::Builder UnrealCore::DestroyObjectParams::Builder::getOuter() {
  return ::capnp::_::PointerHelpers< ::UnrealCore::Object>::get(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
#if !CAPNP_LITE
inline  ::UnrealCore::Object::Pipeline UnrealCore::DestroyObjectParams::Pipeline::getOuter() {
  return  ::UnrealCore::Object::Pipeline(_typeless.getPointerField(0));
}
#endif  // !CAPNP_LITE
inline void UnrealCore::DestroyObjectParams::Builder::setOuter( ::UnrealCore::Object::Reader value) {
  ::capnp::_::PointerHelpers< ::UnrealCore::Object>::set(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), value);
}
inline  ::UnrealCore::Object::Builder UnrealCore::DestroyObjectParams::Builder::initOuter() {
  return ::capnp::_::PointerHelpers< ::UnrealCore::Object>::init(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline void UnrealCore::DestroyObjectParams::Builder::adoptOuter(
    ::capnp::Orphan< ::UnrealCore::Object>&& value) {
  ::capnp::_::PointerHelpers< ::UnrealCore::Object>::adopt(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::UnrealCore::Object> UnrealCore::DestroyObjectParams::Builder::disownOuter() {
  return ::capnp::_::PointerHelpers< ::UnrealCore::Object>::disown(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}

inline bool UnrealCore::DestroyObjectResults::Reader::getResult() const {
  return _reader.getDataField<bool>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS);
}

inline bool UnrealCore::DestroyObjectResults::Builder::getResult() {
  return _builder.getDataField<bool>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS);
}
inline void UnrealCore::DestroyObjectResults::Builder::setResult(bool value) {
  _builder.setDataField<bool>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS, value);
}

inline bool UnrealCore::CallFunctionParams::Reader::hasOuter() const {
  return !_reader.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
}
inline bool UnrealCore::CallFunctionParams::Builder::hasOuter() {
  return !_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
}
inline  ::UnrealCore::Object::Reader UnrealCore::CallFunctionParams::Reader::getOuter() const {
  return ::capnp::_::PointerHelpers< ::UnrealCore::Object>::get(_reader.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline  ::UnrealCore::Object::Builder UnrealCore::CallFunctionParams::Builder::getOuter() {
  return ::capnp::_::PointerHelpers< ::UnrealCore::Object>::get(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
#if !CAPNP_LITE
inline  ::UnrealCore::Object::Pipeline UnrealCore::CallFunctionParams::Pipeline::getOuter() {
  return  ::UnrealCore::Object::Pipeline(_typeless.getPointerField(0));
}
#endif  // !CAPNP_LITE
inline void UnrealCore::CallFunctionParams::Builder::setOuter( ::UnrealCore::Object::Reader value) {
  ::capnp::_::PointerHelpers< ::UnrealCore::Object>::set(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), value);
}
inline  ::UnrealCore::Object::Builder UnrealCore::CallFunctionParams::Builder::initOuter() {
  return ::capnp::_::PointerHelpers< ::UnrealCore::Object>::init(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline void UnrealCore::CallFunctionParams::Builder::adoptOuter(
    ::capnp::Orphan< ::UnrealCore::Object>&& value) {
  ::capnp::_::PointerHelpers< ::UnrealCore::Object>::adopt(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::UnrealCore::Object> UnrealCore::CallFunctionParams::Builder::disownOuter() {
  return ::capnp::_::PointerHelpers< ::UnrealCore::Object>::disown(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}

inline bool UnrealCore::CallFunctionParams::Reader::hasCallObject() const {
  return !_reader.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS).isNull();
}
inline bool UnrealCore::CallFunctionParams::Builder::hasCallObject() {
  return !_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS).isNull();
}
inline  ::UnrealCore::Object::Reader UnrealCore::CallFunctionParams::Reader::getCallObject() const {
  return ::capnp::_::PointerHelpers< ::UnrealCore::Object>::get(_reader.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS));
}
inline  ::UnrealCore::Object::Builder UnrealCore::CallFunctionParams::Builder::getCallObject() {
  return ::capnp::_::PointerHelpers< ::UnrealCore::Object>::get(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS));
}
#if !CAPNP_LITE
inline  ::UnrealCore::Object::Pipeline UnrealCore::CallFunctionParams::Pipeline::getCallObject() {
  return  ::UnrealCore::Object::Pipeline(_typeless.getPointerField(1));
}
#endif  // !CAPNP_LITE
inline void UnrealCore::CallFunctionParams::Builder::setCallObject( ::UnrealCore::Object::Reader value) {
  ::capnp::_::PointerHelpers< ::UnrealCore::Object>::set(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS), value);
}
inline  ::UnrealCore::Object::Builder UnrealCore::CallFunctionParams::Builder::initCallObject() {
  return ::capnp::_::PointerHelpers< ::UnrealCore::Object>::init(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS));
}
inline void UnrealCore::CallFunctionParams::Builder::adoptCallObject(
    ::capnp::Orphan< ::UnrealCore::Object>&& value) {
  ::capnp::_::PointerHelpers< ::UnrealCore::Object>::adopt(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::UnrealCore::Object> UnrealCore::CallFunctionParams::Builder::disownCallObject() {
  return ::capnp::_::PointerHelpers< ::UnrealCore::Object>::disown(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS));
}

inline bool UnrealCore::CallFunctionParams::Reader::hasClass() const {
  return !_reader.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS).isNull();
}
inline bool UnrealCore::CallFunctionParams::Builder::hasClass() {
  return !_builder.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS).isNull();
}
inline  ::UnrealCore::Class::Reader UnrealCore::CallFunctionParams::Reader::getClass() const {
  return ::capnp::_::PointerHelpers< ::UnrealCore::Class>::get(_reader.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS));
}
inline  ::UnrealCore::Class::Builder UnrealCore::CallFunctionParams::Builder::getClass() {
  return ::capnp::_::PointerHelpers< ::UnrealCore::Class>::get(_builder.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS));
}
#if !CAPNP_LITE
inline  ::UnrealCore::Class::Pipeline UnrealCore::CallFunctionParams::Pipeline::getClass() {
  return  ::UnrealCore::Class::Pipeline(_typeless.getPointerField(2));
}
#endif  // !CAPNP_LITE
inline void UnrealCore::CallFunctionParams::Builder::setClass( ::UnrealCore::Class::Reader value) {
  ::capnp::_::PointerHelpers< ::UnrealCore::Class>::set(_builder.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS), value);
}
inline  ::UnrealCore::Class::Builder UnrealCore::CallFunctionParams::Builder::initClass() {
  return ::capnp::_::PointerHelpers< ::UnrealCore::Class>::init(_builder.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS));
}
inline void UnrealCore::CallFunctionParams::Builder::adoptClass(
    ::capnp::Orphan< ::UnrealCore::Class>&& value) {
  ::capnp::_::PointerHelpers< ::UnrealCore::Class>::adopt(_builder.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::UnrealCore::Class> UnrealCore::CallFunctionParams::Builder::disownClass() {
  return ::capnp::_::PointerHelpers< ::UnrealCore::Class>::disown(_builder.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS));
}

inline bool UnrealCore::CallFunctionParams::Reader::hasFuncName() const {
  return !_reader.getPointerField(
      ::capnp::bounded<3>() * ::capnp::POINTERS).isNull();
}
inline bool UnrealCore::CallFunctionParams::Builder::hasFuncName() {
  return !_builder.getPointerField(
      ::capnp::bounded<3>() * ::capnp::POINTERS).isNull();
}
inline  ::capnp::Text::Reader UnrealCore::CallFunctionParams::Reader::getFuncName() const {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::get(_reader.getPointerField(
      ::capnp::bounded<3>() * ::capnp::POINTERS));
}
inline  ::capnp::Text::Builder UnrealCore::CallFunctionParams::Builder::getFuncName() {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::get(_builder.getPointerField(
      ::capnp::bounded<3>() * ::capnp::POINTERS));
}
inline void UnrealCore::CallFunctionParams::Builder::setFuncName( ::capnp::Text::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::Text>::set(_builder.getPointerField(
      ::capnp::bounded<3>() * ::capnp::POINTERS), value);
}
inline  ::capnp::Text::Builder UnrealCore::CallFunctionParams::Builder::initFuncName(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::init(_builder.getPointerField(
      ::capnp::bounded<3>() * ::capnp::POINTERS), size);
}
inline void UnrealCore::CallFunctionParams::Builder::adoptFuncName(
    ::capnp::Orphan< ::capnp::Text>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::Text>::adopt(_builder.getPointerField(
      ::capnp::bounded<3>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::Text> UnrealCore::CallFunctionParams::Builder::disownFuncName() {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::disown(_builder.getPointerField(
      ::capnp::bounded<3>() * ::capnp::POINTERS));
}

inline bool UnrealCore::CallFunctionParams::Reader::hasParams() const {
  return !_reader.getPointerField(
      ::capnp::bounded<4>() * ::capnp::POINTERS).isNull();
}
inline bool UnrealCore::CallFunctionParams::Builder::hasParams() {
  return !_builder.getPointerField(
      ::capnp::bounded<4>() * ::capnp::POINTERS).isNull();
}
inline  ::capnp::List< ::UnrealCore::Argument,  ::capnp::Kind::STRUCT>::Reader UnrealCore::CallFunctionParams::Reader::getParams() const {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::UnrealCore::Argument,  ::capnp::Kind::STRUCT>>::get(_reader.getPointerField(
      ::capnp::bounded<4>() * ::capnp::POINTERS));
}
inline  ::capnp::List< ::UnrealCore::Argument,  ::capnp::Kind::STRUCT>::Builder UnrealCore::CallFunctionParams::Builder::getParams() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::UnrealCore::Argument,  ::capnp::Kind::STRUCT>>::get(_builder.getPointerField(
      ::capnp::bounded<4>() * ::capnp::POINTERS));
}
inline void UnrealCore::CallFunctionParams::Builder::setParams( ::capnp::List< ::UnrealCore::Argument,  ::capnp::Kind::STRUCT>::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::UnrealCore::Argument,  ::capnp::Kind::STRUCT>>::set(_builder.getPointerField(
      ::capnp::bounded<4>() * ::capnp::POINTERS), value);
}
inline  ::capnp::List< ::UnrealCore::Argument,  ::capnp::Kind::STRUCT>::Builder UnrealCore::CallFunctionParams::Builder::initParams(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::UnrealCore::Argument,  ::capnp::Kind::STRUCT>>::init(_builder.getPointerField(
      ::capnp::bounded<4>() * ::capnp::POINTERS), size);
}
inline void UnrealCore::CallFunctionParams::Builder::adoptParams(
    ::capnp::Orphan< ::capnp::List< ::UnrealCore::Argument,  ::capnp::Kind::STRUCT>>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::UnrealCore::Argument,  ::capnp::Kind::STRUCT>>::adopt(_builder.getPointerField(
      ::capnp::bounded<4>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::List< ::UnrealCore::Argument,  ::capnp::Kind::STRUCT>> UnrealCore::CallFunctionParams::Builder::disownParams() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::UnrealCore::Argument,  ::capnp::Kind::STRUCT>>::disown(_builder.getPointerField(
      ::capnp::bounded<4>() * ::capnp::POINTERS));
}

inline bool UnrealCore::CallFunctionResults::Reader::hasReturn() const {
  return !_reader.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
}
inline bool UnrealCore::CallFunctionResults::Builder::hasReturn() {
  return !_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
}
inline  ::UnrealCore::Argument::Reader UnrealCore::CallFunctionResults::Reader::getReturn() const {
  return ::capnp::_::PointerHelpers< ::UnrealCore::Argument>::get(_reader.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline  ::UnrealCore::Argument::Builder UnrealCore::CallFunctionResults::Builder::getReturn() {
  return ::capnp::_::PointerHelpers< ::UnrealCore::Argument>::get(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
#if !CAPNP_LITE
inline  ::UnrealCore::Argument::Pipeline UnrealCore::CallFunctionResults::Pipeline::getReturn() {
  return  ::UnrealCore::Argument::Pipeline(_typeless.getPointerField(0));
}
#endif  // !CAPNP_LITE
inline void UnrealCore::CallFunctionResults::Builder::setReturn( ::UnrealCore::Argument::Reader value) {
  ::capnp::_::PointerHelpers< ::UnrealCore::Argument>::set(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), value);
}
inline  ::UnrealCore::Argument::Builder UnrealCore::CallFunctionResults::Builder::initReturn() {
  return ::capnp::_::PointerHelpers< ::UnrealCore::Argument>::init(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline void UnrealCore::CallFunctionResults::Builder::adoptReturn(
    ::capnp::Orphan< ::UnrealCore::Argument>&& value) {
  ::capnp::_::PointerHelpers< ::UnrealCore::Argument>::adopt(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::UnrealCore::Argument> UnrealCore::CallFunctionResults::Builder::disownReturn() {
  return ::capnp::_::PointerHelpers< ::UnrealCore::Argument>::disown(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}

inline bool UnrealCore::CallFunctionResults::Reader::hasOutParams() const {
  return !_reader.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS).isNull();
}
inline bool UnrealCore::CallFunctionResults::Builder::hasOutParams() {
  return !_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS).isNull();
}
inline  ::capnp::List< ::UnrealCore::Argument,  ::capnp::Kind::STRUCT>::Reader UnrealCore::CallFunctionResults::Reader::getOutParams() const {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::UnrealCore::Argument,  ::capnp::Kind::STRUCT>>::get(_reader.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS));
}
inline  ::capnp::List< ::UnrealCore::Argument,  ::capnp::Kind::STRUCT>::Builder UnrealCore::CallFunctionResults::Builder::getOutParams() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::UnrealCore::Argument,  ::capnp::Kind::STRUCT>>::get(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS));
}
inline void UnrealCore::CallFunctionResults::Builder::setOutParams( ::capnp::List< ::UnrealCore::Argument,  ::capnp::Kind::STRUCT>::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::UnrealCore::Argument,  ::capnp::Kind::STRUCT>>::set(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS), value);
}
inline  ::capnp::List< ::UnrealCore::Argument,  ::capnp::Kind::STRUCT>::Builder UnrealCore::CallFunctionResults::Builder::initOutParams(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::UnrealCore::Argument,  ::capnp::Kind::STRUCT>>::init(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS), size);
}
inline void UnrealCore::CallFunctionResults::Builder::adoptOutParams(
    ::capnp::Orphan< ::capnp::List< ::UnrealCore::Argument,  ::capnp::Kind::STRUCT>>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::UnrealCore::Argument,  ::capnp::Kind::STRUCT>>::adopt(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::List< ::UnrealCore::Argument,  ::capnp::Kind::STRUCT>> UnrealCore::CallFunctionResults::Builder::disownOutParams() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::UnrealCore::Argument,  ::capnp::Kind::STRUCT>>::disown(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS));
}

inline bool UnrealCore::CallStaticFunctionParams::Reader::hasClass() const {
  return !_reader.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
}
inline bool UnrealCore::CallStaticFunctionParams::Builder::hasClass() {
  return !_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
}
inline  ::UnrealCore::Class::Reader UnrealCore::CallStaticFunctionParams::Reader::getClass() const {
  return ::capnp::_::PointerHelpers< ::UnrealCore::Class>::get(_reader.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline  ::UnrealCore::Class::Builder UnrealCore::CallStaticFunctionParams::Builder::getClass() {
  return ::capnp::_::PointerHelpers< ::UnrealCore::Class>::get(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
#if !CAPNP_LITE
inline  ::UnrealCore::Class::Pipeline UnrealCore::CallStaticFunctionParams::Pipeline::getClass() {
  return  ::UnrealCore::Class::Pipeline(_typeless.getPointerField(0));
}
#endif  // !CAPNP_LITE
inline void UnrealCore::CallStaticFunctionParams::Builder::setClass( ::UnrealCore::Class::Reader value) {
  ::capnp::_::PointerHelpers< ::UnrealCore::Class>::set(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), value);
}
inline  ::UnrealCore::Class::Builder UnrealCore::CallStaticFunctionParams::Builder::initClass() {
  return ::capnp::_::PointerHelpers< ::UnrealCore::Class>::init(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline void UnrealCore::CallStaticFunctionParams::Builder::adoptClass(
    ::capnp::Orphan< ::UnrealCore::Class>&& value) {
  ::capnp::_::PointerHelpers< ::UnrealCore::Class>::adopt(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::UnrealCore::Class> UnrealCore::CallStaticFunctionParams::Builder::disownClass() {
  return ::capnp::_::PointerHelpers< ::UnrealCore::Class>::disown(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}

inline bool UnrealCore::CallStaticFunctionParams::Reader::hasFuncName() const {
  return !_reader.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS).isNull();
}
inline bool UnrealCore::CallStaticFunctionParams::Builder::hasFuncName() {
  return !_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS).isNull();
}
inline  ::capnp::Text::Reader UnrealCore::CallStaticFunctionParams::Reader::getFuncName() const {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::get(_reader.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS));
}
inline  ::capnp::Text::Builder UnrealCore::CallStaticFunctionParams::Builder::getFuncName() {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::get(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS));
}
inline void UnrealCore::CallStaticFunctionParams::Builder::setFuncName( ::capnp::Text::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::Text>::set(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS), value);
}
inline  ::capnp::Text::Builder UnrealCore::CallStaticFunctionParams::Builder::initFuncName(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::init(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS), size);
}
inline void UnrealCore::CallStaticFunctionParams::Builder::adoptFuncName(
    ::capnp::Orphan< ::capnp::Text>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::Text>::adopt(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::Text> UnrealCore::CallStaticFunctionParams::Builder::disownFuncName() {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::disown(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS));
}

inline bool UnrealCore::CallStaticFunctionParams::Reader::hasParams() const {
  return !_reader.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS).isNull();
}
inline bool UnrealCore::CallStaticFunctionParams::Builder::hasParams() {
  return !_builder.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS).isNull();
}
inline  ::capnp::List< ::UnrealCore::Argument,  ::capnp::Kind::STRUCT>::Reader UnrealCore::CallStaticFunctionParams::Reader::getParams() const {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::UnrealCore::Argument,  ::capnp::Kind::STRUCT>>::get(_reader.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS));
}
inline  ::capnp::List< ::UnrealCore::Argument,  ::capnp::Kind::STRUCT>::Builder UnrealCore::CallStaticFunctionParams::Builder::getParams() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::UnrealCore::Argument,  ::capnp::Kind::STRUCT>>::get(_builder.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS));
}
inline void UnrealCore::CallStaticFunctionParams::Builder::setParams( ::capnp::List< ::UnrealCore::Argument,  ::capnp::Kind::STRUCT>::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::UnrealCore::Argument,  ::capnp::Kind::STRUCT>>::set(_builder.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS), value);
}
inline  ::capnp::List< ::UnrealCore::Argument,  ::capnp::Kind::STRUCT>::Builder UnrealCore::CallStaticFunctionParams::Builder::initParams(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::UnrealCore::Argument,  ::capnp::Kind::STRUCT>>::init(_builder.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS), size);
}
inline void UnrealCore::CallStaticFunctionParams::Builder::adoptParams(
    ::capnp::Orphan< ::capnp::List< ::UnrealCore::Argument,  ::capnp::Kind::STRUCT>>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::UnrealCore::Argument,  ::capnp::Kind::STRUCT>>::adopt(_builder.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::List< ::UnrealCore::Argument,  ::capnp::Kind::STRUCT>> UnrealCore::CallStaticFunctionParams::Builder::disownParams() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::UnrealCore::Argument,  ::capnp::Kind::STRUCT>>::disown(_builder.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS));
}

inline bool UnrealCore::CallStaticFunctionResults::Reader::hasReturn() const {
  return !_reader.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
}
inline bool UnrealCore::CallStaticFunctionResults::Builder::hasReturn() {
  return !_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
}
inline  ::UnrealCore::Argument::Reader UnrealCore::CallStaticFunctionResults::Reader::getReturn() const {
  return ::capnp::_::PointerHelpers< ::UnrealCore::Argument>::get(_reader.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline  ::UnrealCore::Argument::Builder UnrealCore::CallStaticFunctionResults::Builder::getReturn() {
  return ::capnp::_::PointerHelpers< ::UnrealCore::Argument>::get(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
#if !CAPNP_LITE
inline  ::UnrealCore::Argument::Pipeline UnrealCore::CallStaticFunctionResults::Pipeline::getReturn() {
  return  ::UnrealCore::Argument::Pipeline(_typeless.getPointerField(0));
}
#endif  // !CAPNP_LITE
inline void UnrealCore::CallStaticFunctionResults::Builder::setReturn( ::UnrealCore::Argument::Reader value) {
  ::capnp::_::PointerHelpers< ::UnrealCore::Argument>::set(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), value);
}
inline  ::UnrealCore::Argument::Builder UnrealCore::CallStaticFunctionResults::Builder::initReturn() {
  return ::capnp::_::PointerHelpers< ::UnrealCore::Argument>::init(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline void UnrealCore::CallStaticFunctionResults::Builder::adoptReturn(
    ::capnp::Orphan< ::UnrealCore::Argument>&& value) {
  ::capnp::_::PointerHelpers< ::UnrealCore::Argument>::adopt(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::UnrealCore::Argument> UnrealCore::CallStaticFunctionResults::Builder::disownReturn() {
  return ::capnp::_::PointerHelpers< ::UnrealCore::Argument>::disown(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}

inline bool UnrealCore::CallStaticFunctionResults::Reader::hasOutParams() const {
  return !_reader.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS).isNull();
}
inline bool UnrealCore::CallStaticFunctionResults::Builder::hasOutParams() {
  return !_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS).isNull();
}
inline  ::capnp::List< ::UnrealCore::Argument,  ::capnp::Kind::STRUCT>::Reader UnrealCore::CallStaticFunctionResults::Reader::getOutParams() const {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::UnrealCore::Argument,  ::capnp::Kind::STRUCT>>::get(_reader.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS));
}
inline  ::capnp::List< ::UnrealCore::Argument,  ::capnp::Kind::STRUCT>::Builder UnrealCore::CallStaticFunctionResults::Builder::getOutParams() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::UnrealCore::Argument,  ::capnp::Kind::STRUCT>>::get(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS));
}
inline void UnrealCore::CallStaticFunctionResults::Builder::setOutParams( ::capnp::List< ::UnrealCore::Argument,  ::capnp::Kind::STRUCT>::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::UnrealCore::Argument,  ::capnp::Kind::STRUCT>>::set(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS), value);
}
inline  ::capnp::List< ::UnrealCore::Argument,  ::capnp::Kind::STRUCT>::Builder UnrealCore::CallStaticFunctionResults::Builder::initOutParams(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::UnrealCore::Argument,  ::capnp::Kind::STRUCT>>::init(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS), size);
}
inline void UnrealCore::CallStaticFunctionResults::Builder::adoptOutParams(
    ::capnp::Orphan< ::capnp::List< ::UnrealCore::Argument,  ::capnp::Kind::STRUCT>>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::UnrealCore::Argument,  ::capnp::Kind::STRUCT>>::adopt(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::List< ::UnrealCore::Argument,  ::capnp::Kind::STRUCT>> UnrealCore::CallStaticFunctionResults::Builder::disownOutParams() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::UnrealCore::Argument,  ::capnp::Kind::STRUCT>>::disown(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS));
}

inline bool UnrealCore::FindClassParams::Reader::hasClass() const {
  return !_reader.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
}
inline bool UnrealCore::FindClassParams::Builder::hasClass() {
  return !_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
}
inline  ::UnrealCore::Class::Reader UnrealCore::FindClassParams::Reader::getClass() const {
  return ::capnp::_::PointerHelpers< ::UnrealCore::Class>::get(_reader.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline  ::UnrealCore::Class::Builder UnrealCore::FindClassParams::Builder::getClass() {
  return ::capnp::_::PointerHelpers< ::UnrealCore::Class>::get(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
#if !CAPNP_LITE
inline  ::UnrealCore::Class::Pipeline UnrealCore::FindClassParams::Pipeline::getClass() {
  return  ::UnrealCore::Class::Pipeline(_typeless.getPointerField(0));
}
#endif  // !CAPNP_LITE
inline void UnrealCore::FindClassParams::Builder::setClass( ::UnrealCore::Class::Reader value) {
  ::capnp::_::PointerHelpers< ::UnrealCore::Class>::set(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), value);
}
inline  ::UnrealCore::Class::Builder UnrealCore::FindClassParams::Builder::initClass() {
  return ::capnp::_::PointerHelpers< ::UnrealCore::Class>::init(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline void UnrealCore::FindClassParams::Builder::adoptClass(
    ::capnp::Orphan< ::UnrealCore::Class>&& value) {
  ::capnp::_::PointerHelpers< ::UnrealCore::Class>::adopt(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::UnrealCore::Class> UnrealCore::FindClassParams::Builder::disownClass() {
  return ::capnp::_::PointerHelpers< ::UnrealCore::Class>::disown(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}

inline bool UnrealCore::FindClassResults::Reader::hasObject() const {
  return !_reader.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
}
inline bool UnrealCore::FindClassResults::Builder::hasObject() {
  return !_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
}
inline  ::UnrealCore::Object::Reader UnrealCore::FindClassResults::Reader::getObject() const {
  return ::capnp::_::PointerHelpers< ::UnrealCore::Object>::get(_reader.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline  ::UnrealCore::Object::Builder UnrealCore::FindClassResults::Builder::getObject() {
  return ::capnp::_::PointerHelpers< ::UnrealCore::Object>::get(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
#if !CAPNP_LITE
inline  ::UnrealCore::Object::Pipeline UnrealCore::FindClassResults::Pipeline::getObject() {
  return  ::UnrealCore::Object::Pipeline(_typeless.getPointerField(0));
}
#endif  // !CAPNP_LITE
inline void UnrealCore::FindClassResults::Builder::setObject( ::UnrealCore::Object::Reader value) {
  ::capnp::_::PointerHelpers< ::UnrealCore::Object>::set(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), value);
}
inline  ::UnrealCore::Object::Builder UnrealCore::FindClassResults::Builder::initObject() {
  return ::capnp::_::PointerHelpers< ::UnrealCore::Object>::init(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline void UnrealCore::FindClassResults::Builder::adoptObject(
    ::capnp::Orphan< ::UnrealCore::Object>&& value) {
  ::capnp::_::PointerHelpers< ::UnrealCore::Object>::adopt(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::UnrealCore::Object> UnrealCore::FindClassResults::Builder::disownObject() {
  return ::capnp::_::PointerHelpers< ::UnrealCore::Object>::disown(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}

inline bool UnrealCore::LoadClassParams::Reader::hasClass() const {
  return !_reader.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
}
inline bool UnrealCore::LoadClassParams::Builder::hasClass() {
  return !_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
}
inline  ::UnrealCore::Class::Reader UnrealCore::LoadClassParams::Reader::getClass() const {
  return ::capnp::_::PointerHelpers< ::UnrealCore::Class>::get(_reader.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline  ::UnrealCore::Class::Builder UnrealCore::LoadClassParams::Builder::getClass() {
  return ::capnp::_::PointerHelpers< ::UnrealCore::Class>::get(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
#if !CAPNP_LITE
inline  ::UnrealCore::Class::Pipeline UnrealCore::LoadClassParams::Pipeline::getClass() {
  return  ::UnrealCore::Class::Pipeline(_typeless.getPointerField(0));
}
#endif  // !CAPNP_LITE
inline void UnrealCore::LoadClassParams::Builder::setClass( ::UnrealCore::Class::Reader value) {
  ::capnp::_::PointerHelpers< ::UnrealCore::Class>::set(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), value);
}
inline  ::UnrealCore::Class::Builder UnrealCore::LoadClassParams::Builder::initClass() {
  return ::capnp::_::PointerHelpers< ::UnrealCore::Class>::init(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline void UnrealCore::LoadClassParams::Builder::adoptClass(
    ::capnp::Orphan< ::UnrealCore::Class>&& value) {
  ::capnp::_::PointerHelpers< ::UnrealCore::Class>::adopt(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::UnrealCore::Class> UnrealCore::LoadClassParams::Builder::disownClass() {
  return ::capnp::_::PointerHelpers< ::UnrealCore::Class>::disown(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}

inline bool UnrealCore::LoadClassResults::Reader::hasObject() const {
  return !_reader.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
}
inline bool UnrealCore::LoadClassResults::Builder::hasObject() {
  return !_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
}
inline  ::UnrealCore::Object::Reader UnrealCore::LoadClassResults::Reader::getObject() const {
  return ::capnp::_::PointerHelpers< ::UnrealCore::Object>::get(_reader.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline  ::UnrealCore::Object::Builder UnrealCore::LoadClassResults::Builder::getObject() {
  return ::capnp::_::PointerHelpers< ::UnrealCore::Object>::get(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
#if !CAPNP_LITE
inline  ::UnrealCore::Object::Pipeline UnrealCore::LoadClassResults::Pipeline::getObject() {
  return  ::UnrealCore::Object::Pipeline(_typeless.getPointerField(0));
}
#endif  // !CAPNP_LITE
inline void UnrealCore::LoadClassResults::Builder::setObject( ::UnrealCore::Object::Reader value) {
  ::capnp::_::PointerHelpers< ::UnrealCore::Object>::set(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), value);
}
inline  ::UnrealCore::Object::Builder UnrealCore::LoadClassResults::Builder::initObject() {
  return ::capnp::_::PointerHelpers< ::UnrealCore::Object>::init(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline void UnrealCore::LoadClassResults::Builder::adoptObject(
    ::capnp::Orphan< ::UnrealCore::Object>&& value) {
  ::capnp::_::PointerHelpers< ::UnrealCore::Object>::adopt(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::UnrealCore::Object> UnrealCore::LoadClassResults::Builder::disownObject() {
  return ::capnp::_::PointerHelpers< ::UnrealCore::Object>::disown(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}

inline bool UnrealCore::StaticClassParams::Reader::hasObject() const {
  return !_reader.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
}
inline bool UnrealCore::StaticClassParams::Builder::hasObject() {
  return !_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
}
inline  ::UnrealCore::Object::Reader UnrealCore::StaticClassParams::Reader::getObject() const {
  return ::capnp::_::PointerHelpers< ::UnrealCore::Object>::get(_reader.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline  ::UnrealCore::Object::Builder UnrealCore::StaticClassParams::Builder::getObject() {
  return ::capnp::_::PointerHelpers< ::UnrealCore::Object>::get(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
#if !CAPNP_LITE
inline  ::UnrealCore::Object::Pipeline UnrealCore::StaticClassParams::Pipeline::getObject() {
  return  ::UnrealCore::Object::Pipeline(_typeless.getPointerField(0));
}
#endif  // !CAPNP_LITE
inline void UnrealCore::StaticClassParams::Builder::setObject( ::UnrealCore::Object::Reader value) {
  ::capnp::_::PointerHelpers< ::UnrealCore::Object>::set(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), value);
}
inline  ::UnrealCore::Object::Builder UnrealCore::StaticClassParams::Builder::initObject() {
  return ::capnp::_::PointerHelpers< ::UnrealCore::Object>::init(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline void UnrealCore::StaticClassParams::Builder::adoptObject(
    ::capnp::Orphan< ::UnrealCore::Object>&& value) {
  ::capnp::_::PointerHelpers< ::UnrealCore::Object>::adopt(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::UnrealCore::Object> UnrealCore::StaticClassParams::Builder::disownObject() {
  return ::capnp::_::PointerHelpers< ::UnrealCore::Object>::disown(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}

inline bool UnrealCore::StaticClassResults::Reader::hasClass() const {
  return !_reader.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
}
inline bool UnrealCore::StaticClassResults::Builder::hasClass() {
  return !_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
}
inline  ::UnrealCore::Class::Reader UnrealCore::StaticClassResults::Reader::getClass() const {
  return ::capnp::_::PointerHelpers< ::UnrealCore::Class>::get(_reader.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline  ::UnrealCore::Class::Builder UnrealCore::StaticClassResults::Builder::getClass() {
  return ::capnp::_::PointerHelpers< ::UnrealCore::Class>::get(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
#if !CAPNP_LITE
inline  ::UnrealCore::Class::Pipeline UnrealCore::StaticClassResults::Pipeline::getClass() {
  return  ::UnrealCore::Class::Pipeline(_typeless.getPointerField(0));
}
#endif  // !CAPNP_LITE
inline void UnrealCore::StaticClassResults::Builder::setClass( ::UnrealCore::Class::Reader value) {
  ::capnp::_::PointerHelpers< ::UnrealCore::Class>::set(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), value);
}
inline  ::UnrealCore::Class::Builder UnrealCore::StaticClassResults::Builder::initClass() {
  return ::capnp::_::PointerHelpers< ::UnrealCore::Class>::init(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline void UnrealCore::StaticClassResults::Builder::adoptClass(
    ::capnp::Orphan< ::UnrealCore::Class>&& value) {
  ::capnp::_::PointerHelpers< ::UnrealCore::Class>::adopt(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::UnrealCore::Class> UnrealCore::StaticClassResults::Builder::disownClass() {
  return ::capnp::_::PointerHelpers< ::UnrealCore::Class>::disown(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}

inline bool UnrealCore::BindDelegateParams::Reader::hasObject() const {
  return !_reader.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
}
inline bool UnrealCore::BindDelegateParams::Builder::hasObject() {
  return !_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
}
inline  ::UnrealCore::Object::Reader UnrealCore::BindDelegateParams::Reader::getObject() const {
  return ::capnp::_::PointerHelpers< ::UnrealCore::Object>::get(_reader.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline  ::UnrealCore::Object::Builder UnrealCore::BindDelegateParams::Builder::getObject() {
  return ::capnp::_::PointerHelpers< ::UnrealCore::Object>::get(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
#if !CAPNP_LITE
inline  ::UnrealCore::Object::Pipeline UnrealCore::BindDelegateParams::Pipeline::getObject() {
  return  ::UnrealCore::Object::Pipeline(_typeless.getPointerField(0));
}
#endif  // !CAPNP_LITE
inline void UnrealCore::BindDelegateParams::Builder::setObject( ::UnrealCore::Object::Reader value) {
  ::capnp::_::PointerHelpers< ::UnrealCore::Object>::set(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), value);
}
inline  ::UnrealCore::Object::Builder UnrealCore::BindDelegateParams::Builder::initObject() {
  return ::capnp::_::PointerHelpers< ::UnrealCore::Object>::init(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline void UnrealCore::BindDelegateParams::Builder::adoptObject(
    ::capnp::Orphan< ::UnrealCore::Object>&& value) {
  ::capnp::_::PointerHelpers< ::UnrealCore::Object>::adopt(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::UnrealCore::Object> UnrealCore::BindDelegateParams::Builder::disownObject() {
  return ::capnp::_::PointerHelpers< ::UnrealCore::Object>::disown(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}

inline bool UnrealCore::BindDelegateParams::Reader::hasCallback() const {
  return !_reader.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS).isNull();
}
inline bool UnrealCore::BindDelegateParams::Builder::hasCallback() {
  return !_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS).isNull();
}
#if !CAPNP_LITE
inline  ::UnrealCore::DelegateCallback::Client UnrealCore::BindDelegateParams::Reader::getCallback() const {
  return ::capnp::_::PointerHelpers< ::UnrealCore::DelegateCallback>::get(_reader.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS));
}
inline  ::UnrealCore::DelegateCallback::Client UnrealCore::BindDelegateParams::Builder::getCallback() {
  return ::capnp::_::PointerHelpers< ::UnrealCore::DelegateCallback>::get(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS));
}
inline  ::UnrealCore::DelegateCallback::Client UnrealCore::BindDelegateParams::Pipeline::getCallback() {
  return  ::UnrealCore::DelegateCallback::Client(_typeless.getPointerField(1).asCap());
}
inline void UnrealCore::BindDelegateParams::Builder::setCallback( ::UnrealCore::DelegateCallback::Client&& cap) {
  ::capnp::_::PointerHelpers< ::UnrealCore::DelegateCallback>::set(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS), kj::mv(cap));
}
inline void UnrealCore::BindDelegateParams::Builder::setCallback( ::UnrealCore::DelegateCallback::Client& cap) {
  ::capnp::_::PointerHelpers< ::UnrealCore::DelegateCallback>::set(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS), cap);
}
inline void UnrealCore::BindDelegateParams::Builder::adoptCallback(
    ::capnp::Orphan< ::UnrealCore::DelegateCallback>&& value) {
  ::capnp::_::PointerHelpers< ::UnrealCore::DelegateCallback>::adopt(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::UnrealCore::DelegateCallback> UnrealCore::BindDelegateParams::Builder::disownCallback() {
  return ::capnp::_::PointerHelpers< ::UnrealCore::DelegateCallback>::disown(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS));
}
#endif  // !CAPNP_LITE

inline bool UnrealCore::UnbindDelegateParams::Reader::hasObject() const {
  return !_reader.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
}
inline bool UnrealCore::UnbindDelegateParams::Builder::hasObject() {
  return !_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
}
inline  ::UnrealCore::Object::Reader UnrealCore::UnbindDelegateParams::Reader::getObject() const {
  return ::capnp::_::PointerHelpers< ::UnrealCore::Object>::get(_reader.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline  ::UnrealCore::Object::Builder UnrealCore::UnbindDelegateParams::Builder::getObject() {
  return ::capnp::_::PointerHelpers< ::UnrealCore::Object>::get(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
#if !CAPNP_LITE
inline  ::UnrealCore::Object::Pipeline UnrealCore::UnbindDelegateParams::Pipeline::getObject() {
  return  ::UnrealCore::Object::Pipeline(_typeless.getPointerField(0));
}
#endif  // !CAPNP_LITE
inline void UnrealCore::UnbindDelegateParams::Builder::setObject( ::UnrealCore::Object::Reader value) {
  ::capnp::_::PointerHelpers< ::UnrealCore::Object>::set(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), value);
}
inline  ::UnrealCore::Object::Builder UnrealCore::UnbindDelegateParams::Builder::initObject() {
  return ::capnp::_::PointerHelpers< ::UnrealCore::Object>::init(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline void UnrealCore::UnbindDelegateParams::Builder::adoptObject(
    ::capnp::Orphan< ::UnrealCore::Object>&& value) {
  ::capnp::_::PointerHelpers< ::UnrealCore::Object>::adopt(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::UnrealCore::Object> UnrealCore::UnbindDelegateParams::Builder::disownObject() {
  return ::capnp::_::PointerHelpers< ::UnrealCore::Object>::disown(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}

inline bool UnrealCore::AddMultiDelegateParams::Reader::hasObject() const {
  return !_reader.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
}
inline bool UnrealCore::AddMultiDelegateParams::Builder::hasObject() {
  return !_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
}
inline  ::UnrealCore::Object::Reader UnrealCore::AddMultiDelegateParams::Reader::getObject() const {
  return ::capnp::_::PointerHelpers< ::UnrealCore::Object>::get(_reader.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline  ::UnrealCore::Object::Builder UnrealCore::AddMultiDelegateParams::Builder::getObject() {
  return ::capnp::_::PointerHelpers< ::UnrealCore::Object>::get(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
#if !CAPNP_LITE
inline  ::UnrealCore::Object::Pipeline UnrealCore::AddMultiDelegateParams::Pipeline::getObject() {
  return  ::UnrealCore::Object::Pipeline(_typeless.getPointerField(0));
}
#endif  // !CAPNP_LITE
inline void UnrealCore::AddMultiDelegateParams::Builder::setObject( ::UnrealCore::Object::Reader value) {
  ::capnp::_::PointerHelpers< ::UnrealCore::Object>::set(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), value);
}
inline  ::UnrealCore::Object::Builder UnrealCore::AddMultiDelegateParams::Builder::initObject() {
  return ::capnp::_::PointerHelpers< ::UnrealCore::Object>::init(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline void UnrealCore::AddMultiDelegateParams::Builder::adoptObject(
    ::capnp::Orphan< ::UnrealCore::Object>&& value) {
  ::capnp::_::PointerHelpers< ::UnrealCore::Object>::adopt(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::UnrealCore::Object> UnrealCore::AddMultiDelegateParams::Builder::disownObject() {
  return ::capnp::_::PointerHelpers< ::UnrealCore::Object>::disown(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}

inline bool UnrealCore::AddMultiDelegateParams::Reader::hasCallback() const {
  return !_reader.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS).isNull();
}
inline bool UnrealCore::AddMultiDelegateParams::Builder::hasCallback() {
  return !_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS).isNull();
}
#if !CAPNP_LITE
inline  ::UnrealCore::DelegateCallback::Client UnrealCore::AddMultiDelegateParams::Reader::getCallback() const {
  return ::capnp::_::PointerHelpers< ::UnrealCore::DelegateCallback>::get(_reader.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS));
}
inline  ::UnrealCore::DelegateCallback::Client UnrealCore::AddMultiDelegateParams::Builder::getCallback() {
  return ::capnp::_::PointerHelpers< ::UnrealCore::DelegateCallback>::get(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS));
}
inline  ::UnrealCore::DelegateCallback::Client UnrealCore::AddMultiDelegateParams::Pipeline::getCallback() {
  return  ::UnrealCore::DelegateCallback::Client(_typeless.getPointerField(1).asCap());
}
inline void UnrealCore::AddMultiDelegateParams::Builder::setCallback( ::UnrealCore::DelegateCallback::Client&& cap) {
  ::capnp::_::PointerHelpers< ::UnrealCore::DelegateCallback>::set(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS), kj::mv(cap));
}
inline void UnrealCore::AddMultiDelegateParams::Builder::setCallback( ::UnrealCore::DelegateCallback::Client& cap) {
  ::capnp::_::PointerHelpers< ::UnrealCore::DelegateCallback>::set(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS), cap);
}
inline void UnrealCore::AddMultiDelegateParams::Builder::adoptCallback(
    ::capnp::Orphan< ::UnrealCore::DelegateCallback>&& value) {
  ::capnp::_::PointerHelpers< ::UnrealCore::DelegateCallback>::adopt(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::UnrealCore::DelegateCallback> UnrealCore::AddMultiDelegateParams::Builder::disownCallback() {
  return ::capnp::_::PointerHelpers< ::UnrealCore::DelegateCallback>::disown(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS));
}
#endif  // !CAPNP_LITE

inline bool UnrealCore::AddMultiDelegateResults::Reader::hasDelegateObject() const {
  return !_reader.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
}
inline bool UnrealCore::AddMultiDelegateResults::Builder::hasDelegateObject() {
  return !_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
}
inline  ::UnrealCore::Object::Reader UnrealCore::AddMultiDelegateResults::Reader::getDelegateObject() const {
  return ::capnp::_::PointerHelpers< ::UnrealCore::Object>::get(_reader.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline  ::UnrealCore::Object::Builder UnrealCore::AddMultiDelegateResults::Builder::getDelegateObject() {
  return ::capnp::_::PointerHelpers< ::UnrealCore::Object>::get(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
#if !CAPNP_LITE
inline  ::UnrealCore::Object::Pipeline UnrealCore::AddMultiDelegateResults::Pipeline::getDelegateObject() {
  return  ::UnrealCore::Object::Pipeline(_typeless.getPointerField(0));
}
#endif  // !CAPNP_LITE
inline void UnrealCore::AddMultiDelegateResults::Builder::setDelegateObject( ::UnrealCore::Object::Reader value) {
  ::capnp::_::PointerHelpers< ::UnrealCore::Object>::set(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), value);
}
inline  ::UnrealCore::Object::Builder UnrealCore::AddMultiDelegateResults::Builder::initDelegateObject() {
  return ::capnp::_::PointerHelpers< ::UnrealCore::Object>::init(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline void UnrealCore::AddMultiDelegateResults::Builder::adoptDelegateObject(
    ::capnp::Orphan< ::UnrealCore::Object>&& value) {
  ::capnp::_::PointerHelpers< ::UnrealCore::Object>::adopt(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::UnrealCore::Object> UnrealCore::AddMultiDelegateResults::Builder::disownDelegateObject() {
  return ::capnp::_::PointerHelpers< ::UnrealCore::Object>::disown(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}

inline bool UnrealCore::RemoveMultiDelegateParams::Reader::hasObject() const {
  return !_reader.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
}
inline bool UnrealCore::RemoveMultiDelegateParams::Builder::hasObject() {
  return !_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
}
inline  ::UnrealCore::Object::Reader UnrealCore::RemoveMultiDelegateParams::Reader::getObject() const {
  return ::capnp::_::PointerHelpers< ::UnrealCore::Object>::get(_reader.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline  ::UnrealCore::Object::Builder UnrealCore::RemoveMultiDelegateParams::Builder::getObject() {
  return ::capnp::_::PointerHelpers< ::UnrealCore::Object>::get(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
#if !CAPNP_LITE
inline  ::UnrealCore::Object::Pipeline UnrealCore::RemoveMultiDelegateParams::Pipeline::getObject() {
  return  ::UnrealCore::Object::Pipeline(_typeless.getPointerField(0));
}
#endif  // !CAPNP_LITE
inline void UnrealCore::RemoveMultiDelegateParams::Builder::setObject( ::UnrealCore::Object::Reader value) {
  ::capnp::_::PointerHelpers< ::UnrealCore::Object>::set(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), value);
}
inline  ::UnrealCore::Object::Builder UnrealCore::RemoveMultiDelegateParams::Builder::initObject() {
  return ::capnp::_::PointerHelpers< ::UnrealCore::Object>::init(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline void UnrealCore::RemoveMultiDelegateParams::Builder::adoptObject(
    ::capnp::Orphan< ::UnrealCore::Object>&& value) {
  ::capnp::_::PointerHelpers< ::UnrealCore::Object>::adopt(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::UnrealCore::Object> UnrealCore::RemoveMultiDelegateParams::Builder::disownObject() {
  return ::capnp::_::PointerHelpers< ::UnrealCore::Object>::disown(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}

inline bool UnrealCore::RemoveMultiDelegateParams::Reader::hasDelegateObject() const {
  return !_reader.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS).isNull();
}
inline bool UnrealCore::RemoveMultiDelegateParams::Builder::hasDelegateObject() {
  return !_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS).isNull();
}
inline  ::UnrealCore::Object::Reader UnrealCore::RemoveMultiDelegateParams::Reader::getDelegateObject() const {
  return ::capnp::_::PointerHelpers< ::UnrealCore::Object>::get(_reader.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS));
}
inline  ::UnrealCore::Object::Builder UnrealCore::RemoveMultiDelegateParams::Builder::getDelegateObject() {
  return ::capnp::_::PointerHelpers< ::UnrealCore::Object>::get(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS));
}
#if !CAPNP_LITE
inline  ::UnrealCore::Object::Pipeline UnrealCore::RemoveMultiDelegateParams::Pipeline::getDelegateObject() {
  return  ::UnrealCore::Object::Pipeline(_typeless.getPointerField(1));
}
#endif  // !CAPNP_LITE
inline void UnrealCore::RemoveMultiDelegateParams::Builder::setDelegateObject( ::UnrealCore::Object::Reader value) {
  ::capnp::_::PointerHelpers< ::UnrealCore::Object>::set(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS), value);
}
inline  ::UnrealCore::Object::Builder UnrealCore::RemoveMultiDelegateParams::Builder::initDelegateObject() {
  return ::capnp::_::PointerHelpers< ::UnrealCore::Object>::init(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS));
}
inline void UnrealCore::RemoveMultiDelegateParams::Builder::adoptDelegateObject(
    ::capnp::Orphan< ::UnrealCore::Object>&& value) {
  ::capnp::_::PointerHelpers< ::UnrealCore::Object>::adopt(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::UnrealCore::Object> UnrealCore::RemoveMultiDelegateParams::Builder::disownDelegateObject() {
  return ::capnp::_::PointerHelpers< ::UnrealCore::Object>::disown(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS));
}

inline bool UnrealCore::RegisterOverrideClassParams::Reader::hasClass() const {
  return !_reader.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
}
inline bool UnrealCore::RegisterOverrideClassParams::Builder::hasClass() {
  return !_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
}
inline  ::UnrealCore::Class::Reader UnrealCore::RegisterOverrideClassParams::Reader::getClass() const {
  return ::capnp::_::PointerHelpers< ::UnrealCore::Class>::get(_reader.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline  ::UnrealCore::Class::Builder UnrealCore::RegisterOverrideClassParams::Builder::getClass() {
  return ::capnp::_::PointerHelpers< ::UnrealCore::Class>::get(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
#if !CAPNP_LITE
inline  ::UnrealCore::Class::Pipeline UnrealCore::RegisterOverrideClassParams::Pipeline::getClass() {
  return  ::UnrealCore::Class::Pipeline(_typeless.getPointerField(0));
}
#endif  // !CAPNP_LITE
inline void UnrealCore::RegisterOverrideClassParams::Builder::setClass( ::UnrealCore::Class::Reader value) {
  ::capnp::_::PointerHelpers< ::UnrealCore::Class>::set(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), value);
}
inline  ::UnrealCore::Class::Builder UnrealCore::RegisterOverrideClassParams::Builder::initClass() {
  return ::capnp::_::PointerHelpers< ::UnrealCore::Class>::init(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline void UnrealCore::RegisterOverrideClassParams::Builder::adoptClass(
    ::capnp::Orphan< ::UnrealCore::Class>&& value) {
  ::capnp::_::PointerHelpers< ::UnrealCore::Class>::adopt(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::UnrealCore::Class> UnrealCore::RegisterOverrideClassParams::Builder::disownClass() {
  return ::capnp::_::PointerHelpers< ::UnrealCore::Class>::disown(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}

inline bool UnrealCore::RegisterOverrideClassParams::Reader::hasParent() const {
  return !_reader.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS).isNull();
}
inline bool UnrealCore::RegisterOverrideClassParams::Builder::hasParent() {
  return !_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS).isNull();
}
inline  ::UnrealCore::Class::Reader UnrealCore::RegisterOverrideClassParams::Reader::getParent() const {
  return ::capnp::_::PointerHelpers< ::UnrealCore::Class>::get(_reader.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS));
}
inline  ::UnrealCore::Class::Builder UnrealCore::RegisterOverrideClassParams::Builder::getParent() {
  return ::capnp::_::PointerHelpers< ::UnrealCore::Class>::get(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS));
}
#if !CAPNP_LITE
inline  ::UnrealCore::Class::Pipeline UnrealCore::RegisterOverrideClassParams::Pipeline::getParent() {
  return  ::UnrealCore::Class::Pipeline(_typeless.getPointerField(1));
}
#endif  // !CAPNP_LITE
inline void UnrealCore::RegisterOverrideClassParams::Builder::setParent( ::UnrealCore::Class::Reader value) {
  ::capnp::_::PointerHelpers< ::UnrealCore::Class>::set(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS), value);
}
inline  ::UnrealCore::Class::Builder UnrealCore::RegisterOverrideClassParams::Builder::initParent() {
  return ::capnp::_::PointerHelpers< ::UnrealCore::Class>::init(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS));
}
inline void UnrealCore::RegisterOverrideClassParams::Builder::adoptParent(
    ::capnp::Orphan< ::UnrealCore::Class>&& value) {
  ::capnp::_::PointerHelpers< ::UnrealCore::Class>::adopt(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::UnrealCore::Class> UnrealCore::RegisterOverrideClassParams::Builder::disownParent() {
  return ::capnp::_::PointerHelpers< ::UnrealCore::Class>::disown(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS));
}

inline bool UnrealCore::RegisterOverrideClassParams::Reader::hasMethods() const {
  return !_reader.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS).isNull();
}
inline bool UnrealCore::RegisterOverrideClassParams::Builder::hasMethods() {
  return !_builder.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS).isNull();
}
inline  ::capnp::List< ::UnrealCore::Method,  ::capnp::Kind::STRUCT>::Reader UnrealCore::RegisterOverrideClassParams::Reader::getMethods() const {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::UnrealCore::Method,  ::capnp::Kind::STRUCT>>::get(_reader.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS));
}
inline  ::capnp::List< ::UnrealCore::Method,  ::capnp::Kind::STRUCT>::Builder UnrealCore::RegisterOverrideClassParams::Builder::getMethods() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::UnrealCore::Method,  ::capnp::Kind::STRUCT>>::get(_builder.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS));
}
inline void UnrealCore::RegisterOverrideClassParams::Builder::setMethods( ::capnp::List< ::UnrealCore::Method,  ::capnp::Kind::STRUCT>::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::UnrealCore::Method,  ::capnp::Kind::STRUCT>>::set(_builder.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS), value);
}
inline  ::capnp::List< ::UnrealCore::Method,  ::capnp::Kind::STRUCT>::Builder UnrealCore::RegisterOverrideClassParams::Builder::initMethods(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::UnrealCore::Method,  ::capnp::Kind::STRUCT>>::init(_builder.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS), size);
}
inline void UnrealCore::RegisterOverrideClassParams::Builder::adoptMethods(
    ::capnp::Orphan< ::capnp::List< ::UnrealCore::Method,  ::capnp::Kind::STRUCT>>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::UnrealCore::Method,  ::capnp::Kind::STRUCT>>::adopt(_builder.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::List< ::UnrealCore::Method,  ::capnp::Kind::STRUCT>> UnrealCore::RegisterOverrideClassParams::Builder::disownMethods() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::UnrealCore::Method,  ::capnp::Kind::STRUCT>>::disown(_builder.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS));
}

inline bool UnrealCore::UnregisterOverrideClassParams::Reader::hasClass() const {
  return !_reader.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
}
inline bool UnrealCore::UnregisterOverrideClassParams::Builder::hasClass() {
  return !_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
}
inline  ::UnrealCore::Class::Reader UnrealCore::UnregisterOverrideClassParams::Reader::getClass() const {
  return ::capnp::_::PointerHelpers< ::UnrealCore::Class>::get(_reader.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline  ::UnrealCore::Class::Builder UnrealCore::UnregisterOverrideClassParams::Builder::getClass() {
  return ::capnp::_::PointerHelpers< ::UnrealCore::Class>::get(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
#if !CAPNP_LITE
inline  ::UnrealCore::Class::Pipeline UnrealCore::UnregisterOverrideClassParams::Pipeline::getClass() {
  return  ::UnrealCore::Class::Pipeline(_typeless.getPointerField(0));
}
#endif  // !CAPNP_LITE
inline void UnrealCore::UnregisterOverrideClassParams::Builder::setClass( ::UnrealCore::Class::Reader value) {
  ::capnp::_::PointerHelpers< ::UnrealCore::Class>::set(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), value);
}
inline  ::UnrealCore::Class::Builder UnrealCore::UnregisterOverrideClassParams::Builder::initClass() {
  return ::capnp::_::PointerHelpers< ::UnrealCore::Class>::init(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline void UnrealCore::UnregisterOverrideClassParams::Builder::adoptClass(
    ::capnp::Orphan< ::UnrealCore::Class>&& value) {
  ::capnp::_::PointerHelpers< ::UnrealCore::Class>::adopt(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::UnrealCore::Class> UnrealCore::UnregisterOverrideClassParams::Builder::disownClass() {
  return ::capnp::_::PointerHelpers< ::UnrealCore::Class>::disown(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}

inline bool UnrealCore::UnregisterOverrideClassParams::Reader::hasParent() const {
  return !_reader.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS).isNull();
}
inline bool UnrealCore::UnregisterOverrideClassParams::Builder::hasParent() {
  return !_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS).isNull();
}
inline  ::UnrealCore::Class::Reader UnrealCore::UnregisterOverrideClassParams::Reader::getParent() const {
  return ::capnp::_::PointerHelpers< ::UnrealCore::Class>::get(_reader.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS));
}
inline  ::UnrealCore::Class::Builder UnrealCore::UnregisterOverrideClassParams::Builder::getParent() {
  return ::capnp::_::PointerHelpers< ::UnrealCore::Class>::get(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS));
}
#if !CAPNP_LITE
inline  ::UnrealCore::Class::Pipeline UnrealCore::UnregisterOverrideClassParams::Pipeline::getParent() {
  return  ::UnrealCore::Class::Pipeline(_typeless.getPointerField(1));
}
#endif  // !CAPNP_LITE
inline void UnrealCore::UnregisterOverrideClassParams::Builder::setParent( ::UnrealCore::Class::Reader value) {
  ::capnp::_::PointerHelpers< ::UnrealCore::Class>::set(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS), value);
}
inline  ::UnrealCore::Class::Builder UnrealCore::UnregisterOverrideClassParams::Builder::initParent() {
  return ::capnp::_::PointerHelpers< ::UnrealCore::Class>::init(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS));
}
inline void UnrealCore::UnregisterOverrideClassParams::Builder::adoptParent(
    ::capnp::Orphan< ::UnrealCore::Class>&& value) {
  ::capnp::_::PointerHelpers< ::UnrealCore::Class>::adopt(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::UnrealCore::Class> UnrealCore::UnregisterOverrideClassParams::Builder::disownParent() {
  return ::capnp::_::PointerHelpers< ::UnrealCore::Class>::disown(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS));
}

inline bool UnrealCore::SetPropertyParams::Reader::hasClass() const {
  return !_reader.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
}
inline bool UnrealCore::SetPropertyParams::Builder::hasClass() {
  return !_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
}
inline  ::UnrealCore::Class::Reader UnrealCore::SetPropertyParams::Reader::getClass() const {
  return ::capnp::_::PointerHelpers< ::UnrealCore::Class>::get(_reader.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline  ::UnrealCore::Class::Builder UnrealCore::SetPropertyParams::Builder::getClass() {
  return ::capnp::_::PointerHelpers< ::UnrealCore::Class>::get(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
#if !CAPNP_LITE
inline  ::UnrealCore::Class::Pipeline UnrealCore::SetPropertyParams::Pipeline::getClass() {
  return  ::UnrealCore::Class::Pipeline(_typeless.getPointerField(0));
}
#endif  // !CAPNP_LITE
inline void UnrealCore::SetPropertyParams::Builder::setClass( ::UnrealCore::Class::Reader value) {
  ::capnp::_::PointerHelpers< ::UnrealCore::Class>::set(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), value);
}
inline  ::UnrealCore::Class::Builder UnrealCore::SetPropertyParams::Builder::initClass() {
  return ::capnp::_::PointerHelpers< ::UnrealCore::Class>::init(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline void UnrealCore::SetPropertyParams::Builder::adoptClass(
    ::capnp::Orphan< ::UnrealCore::Class>&& value) {
  ::capnp::_::PointerHelpers< ::UnrealCore::Class>::adopt(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::UnrealCore::Class> UnrealCore::SetPropertyParams::Builder::disownClass() {
  return ::capnp::_::PointerHelpers< ::UnrealCore::Class>::disown(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}

inline bool UnrealCore::SetPropertyParams::Reader::hasOwner() const {
  return !_reader.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS).isNull();
}
inline bool UnrealCore::SetPropertyParams::Builder::hasOwner() {
  return !_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS).isNull();
}
inline  ::UnrealCore::Object::Reader UnrealCore::SetPropertyParams::Reader::getOwner() const {
  return ::capnp::_::PointerHelpers< ::UnrealCore::Object>::get(_reader.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS));
}
inline  ::UnrealCore::Object::Builder UnrealCore::SetPropertyParams::Builder::getOwner() {
  return ::capnp::_::PointerHelpers< ::UnrealCore::Object>::get(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS));
}
#if !CAPNP_LITE
inline  ::UnrealCore::Object::Pipeline UnrealCore::SetPropertyParams::Pipeline::getOwner() {
  return  ::UnrealCore::Object::Pipeline(_typeless.getPointerField(1));
}
#endif  // !CAPNP_LITE
inline void UnrealCore::SetPropertyParams::Builder::setOwner( ::UnrealCore::Object::Reader value) {
  ::capnp::_::PointerHelpers< ::UnrealCore::Object>::set(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS), value);
}
inline  ::UnrealCore::Object::Builder UnrealCore::SetPropertyParams::Builder::initOwner() {
  return ::capnp::_::PointerHelpers< ::UnrealCore::Object>::init(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS));
}
inline void UnrealCore::SetPropertyParams::Builder::adoptOwner(
    ::capnp::Orphan< ::UnrealCore::Object>&& value) {
  ::capnp::_::PointerHelpers< ::UnrealCore::Object>::adopt(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::UnrealCore::Object> UnrealCore::SetPropertyParams::Builder::disownOwner() {
  return ::capnp::_::PointerHelpers< ::UnrealCore::Object>::disown(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS));
}

inline bool UnrealCore::SetPropertyParams::Reader::hasProperty() const {
  return !_reader.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS).isNull();
}
inline bool UnrealCore::SetPropertyParams::Builder::hasProperty() {
  return !_builder.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS).isNull();
}
inline  ::UnrealCore::Property::Reader UnrealCore::SetPropertyParams::Reader::getProperty() const {
  return ::capnp::_::PointerHelpers< ::UnrealCore::Property>::get(_reader.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS));
}
inline  ::UnrealCore::Property::Builder UnrealCore::SetPropertyParams::Builder::getProperty() {
  return ::capnp::_::PointerHelpers< ::UnrealCore::Property>::get(_builder.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS));
}
#if !CAPNP_LITE
inline  ::UnrealCore::Property::Pipeline UnrealCore::SetPropertyParams::Pipeline::getProperty() {
  return  ::UnrealCore::Property::Pipeline(_typeless.getPointerField(2));
}
#endif  // !CAPNP_LITE
inline void UnrealCore::SetPropertyParams::Builder::setProperty( ::UnrealCore::Property::Reader value) {
  ::capnp::_::PointerHelpers< ::UnrealCore::Property>::set(_builder.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS), value);
}
inline  ::UnrealCore::Property::Builder UnrealCore::SetPropertyParams::Builder::initProperty() {
  return ::capnp::_::PointerHelpers< ::UnrealCore::Property>::init(_builder.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS));
}
inline void UnrealCore::SetPropertyParams::Builder::adoptProperty(
    ::capnp::Orphan< ::UnrealCore::Property>&& value) {
  ::capnp::_::PointerHelpers< ::UnrealCore::Property>::adopt(_builder.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::UnrealCore::Property> UnrealCore::SetPropertyParams::Builder::disownProperty() {
  return ::capnp::_::PointerHelpers< ::UnrealCore::Property>::disown(_builder.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS));
}

inline bool UnrealCore::GetPropertyParams::Reader::hasClass() const {
  return !_reader.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
}
inline bool UnrealCore::GetPropertyParams::Builder::hasClass() {
  return !_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
}
inline  ::UnrealCore::Class::Reader UnrealCore::GetPropertyParams::Reader::getClass() const {
  return ::capnp::_::PointerHelpers< ::UnrealCore::Class>::get(_reader.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline  ::UnrealCore::Class::Builder UnrealCore::GetPropertyParams::Builder::getClass() {
  return ::capnp::_::PointerHelpers< ::UnrealCore::Class>::get(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
#if !CAPNP_LITE
inline  ::UnrealCore::Class::Pipeline UnrealCore::GetPropertyParams::Pipeline::getClass() {
  return  ::UnrealCore::Class::Pipeline(_typeless.getPointerField(0));
}
#endif  // !CAPNP_LITE
inline void UnrealCore::GetPropertyParams::Builder::setClass( ::UnrealCore::Class::Reader value) {
  ::capnp::_::PointerHelpers< ::UnrealCore::Class>::set(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), value);
}
inline  ::UnrealCore::Class::Builder UnrealCore::GetPropertyParams::Builder::initClass() {
  return ::capnp::_::PointerHelpers< ::UnrealCore::Class>::init(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline void UnrealCore::GetPropertyParams::Builder::adoptClass(
    ::capnp::Orphan< ::UnrealCore::Class>&& value) {
  ::capnp::_::PointerHelpers< ::UnrealCore::Class>::adopt(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::UnrealCore::Class> UnrealCore::GetPropertyParams::Builder::disownClass() {
  return ::capnp::_::PointerHelpers< ::UnrealCore::Class>::disown(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}

inline bool UnrealCore::GetPropertyParams::Reader::hasOwner() const {
  return !_reader.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS).isNull();
}
inline bool UnrealCore::GetPropertyParams::Builder::hasOwner() {
  return !_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS).isNull();
}
inline  ::UnrealCore::Object::Reader UnrealCore::GetPropertyParams::Reader::getOwner() const {
  return ::capnp::_::PointerHelpers< ::UnrealCore::Object>::get(_reader.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS));
}
inline  ::UnrealCore::Object::Builder UnrealCore::GetPropertyParams::Builder::getOwner() {
  return ::capnp::_::PointerHelpers< ::UnrealCore::Object>::get(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS));
}
#if !CAPNP_LITE
inline  ::UnrealCore::Object::Pipeline UnrealCore::GetPropertyParams::Pipeline::getOwner() {
  return  ::UnrealCore::Object::Pipeline(_typeless.getPointerField(1));
}
#endif  // !CAPNP_LITE
inline void UnrealCore::GetPropertyParams::Builder::setOwner( ::UnrealCore::Object::Reader value) {
  ::capnp::_::PointerHelpers< ::UnrealCore::Object>::set(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS), value);
}
inline  ::UnrealCore::Object::Builder UnrealCore::GetPropertyParams::Builder::initOwner() {
  return ::capnp::_::PointerHelpers< ::UnrealCore::Object>::init(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS));
}
inline void UnrealCore::GetPropertyParams::Builder::adoptOwner(
    ::capnp::Orphan< ::UnrealCore::Object>&& value) {
  ::capnp::_::PointerHelpers< ::UnrealCore::Object>::adopt(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::UnrealCore::Object> UnrealCore::GetPropertyParams::Builder::disownOwner() {
  return ::capnp::_::PointerHelpers< ::UnrealCore::Object>::disown(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS));
}

inline bool UnrealCore::GetPropertyParams::Reader::hasPropertyName() const {
  return !_reader.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS).isNull();
}
inline bool UnrealCore::GetPropertyParams::Builder::hasPropertyName() {
  return !_builder.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS).isNull();
}
inline  ::capnp::Text::Reader UnrealCore::GetPropertyParams::Reader::getPropertyName() const {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::get(_reader.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS));
}
inline  ::capnp::Text::Builder UnrealCore::GetPropertyParams::Builder::getPropertyName() {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::get(_builder.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS));
}
inline void UnrealCore::GetPropertyParams::Builder::setPropertyName( ::capnp::Text::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::Text>::set(_builder.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS), value);
}
inline  ::capnp::Text::Builder UnrealCore::GetPropertyParams::Builder::initPropertyName(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::init(_builder.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS), size);
}
inline void UnrealCore::GetPropertyParams::Builder::adoptPropertyName(
    ::capnp::Orphan< ::capnp::Text>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::Text>::adopt(_builder.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::Text> UnrealCore::GetPropertyParams::Builder::disownPropertyName() {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::disown(_builder.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS));
}

inline bool UnrealCore::GetPropertyResults::Reader::hasProperty() const {
  return !_reader.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
}
inline bool UnrealCore::GetPropertyResults::Builder::hasProperty() {
  return !_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
}
inline  ::UnrealCore::Property::Reader UnrealCore::GetPropertyResults::Reader::getProperty() const {
  return ::capnp::_::PointerHelpers< ::UnrealCore::Property>::get(_reader.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline  ::UnrealCore::Property::Builder UnrealCore::GetPropertyResults::Builder::getProperty() {
  return ::capnp::_::PointerHelpers< ::UnrealCore::Property>::get(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
#if !CAPNP_LITE
inline  ::UnrealCore::Property::Pipeline UnrealCore::GetPropertyResults::Pipeline::getProperty() {
  return  ::UnrealCore::Property::Pipeline(_typeless.getPointerField(0));
}
#endif  // !CAPNP_LITE
inline void UnrealCore::GetPropertyResults::Builder::setProperty( ::UnrealCore::Property::Reader value) {
  ::capnp::_::PointerHelpers< ::UnrealCore::Property>::set(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), value);
}
inline  ::UnrealCore::Property::Builder UnrealCore::GetPropertyResults::Builder::initProperty() {
  return ::capnp::_::PointerHelpers< ::UnrealCore::Property>::init(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline void UnrealCore::GetPropertyResults::Builder::adoptProperty(
    ::capnp::Orphan< ::UnrealCore::Property>&& value) {
  ::capnp::_::PointerHelpers< ::UnrealCore::Property>::adopt(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::UnrealCore::Property> UnrealCore::GetPropertyResults::Builder::disownProperty() {
  return ::capnp::_::PointerHelpers< ::UnrealCore::Property>::disown(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}


CAPNP_END_HEADER

