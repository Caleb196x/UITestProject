// Generated by Cap'n Proto compiler, DO NOT EDIT
// source: ue_log.capnp

#include "ue_log.capnp.h"

namespace capnp {
namespace schemas {
static const ::capnp::_::AlignedData<68> b_912f1ae5c70096e6 = {
  {   0,   0,   0,   0,   5,   0,   6,   0,
    230, 150,   0, 199, 229,  26,  47, 145,
     13,   0,   0,   0,   3,   0,   0,   0,
    140, 119, 252,  60,  22, 147, 232, 187,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     21,   0,   0,   0, 154,   0,   0,   0,
     29,   0,   0,   0,   7,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     25,   0,   0,   0,  71,   1,   0,   0,
    225,   0,   0,   0,   7,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
    117, 101,  95, 108, 111, 103,  46,  99,
     97, 112, 110, 112,  58,  85,  69,  76,
    111, 103,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   1,   0,   1,   0,
     20,   0,   0,   0,   3,   0,   5,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
    108, 162, 138,  18,  52,  82,  34, 197,
    125,  24,  11,  60, 146, 178, 239, 200,
    145,   0,   0,   0,  50,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
    133,   0,   0,   0,   7,   0,   0,   0,
      1,   0,   0,   0,   0,   0,   0,   0,
    214, 236, 230,  98, 132, 194, 248, 137,
      9,  77,  78,  96, 187, 187, 157, 156,
    121,   0,   0,   0,  42,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
    109,   0,   0,   0,   7,   0,   0,   0,
      2,   0,   0,   0,   0,   0,   0,   0,
    228, 183, 242, 135, 218, 107,  50, 171,
    224, 225,  45,  79, 137, 154,  42, 224,
     97,   0,   0,   0,  42,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     85,   0,   0,   0,   7,   0,   0,   0,
      3,   0,   0,   0,   0,   0,   0,   0,
     39,  45, 108, 202,  81,  39,  61, 230,
    157, 229,   4, 124, 228,  60,   0, 174,
     73,   0,   0,   0,  50,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     61,   0,   0,   0,   7,   0,   0,   0,
      4,   0,   0,   0,   0,   0,   0,   0,
     18,  58, 203, 104,  91, 143,  43, 140,
     74, 251,  30, 244,  99, 236, 180, 188,
     49,   0,   0,   0,  50,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     37,   0,   0,   0,   7,   0,   0,   0,
    100, 101,  98, 117, 103,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   1,   0,
    105, 110, 102, 111,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   1,   0,
    119,  97, 114, 110,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   1,   0,
    101, 114, 114, 111, 114,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   1,   0,
    102,  97, 116,  97, 108,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   1,   0,
      0,   0,   0,   0,   1,   0,   1,   0, }
};
::capnp::word const* const bp_912f1ae5c70096e6 = b_912f1ae5c70096e6.words;
#if !CAPNP_LITE
static const ::capnp::_::RawSchema* const d_912f1ae5c70096e6[] = {
  &s_89f8c28462e6ecd6,
  &s_8c2b8f5b68cb3a12,
  &s_9c9dbbbb604e4d09,
  &s_ab326bda87f2b7e4,
  &s_ae003ce47c04e59d,
  &s_bcb4ec63f41efb4a,
  &s_c5225234128aa26c,
  &s_c8efb2923c0b187d,
  &s_e02a9a894f2de1e0,
  &s_e63d2751ca6c2d27,
};
static const uint16_t m_912f1ae5c70096e6[] = {0, 3, 4, 1, 2};
const ::capnp::_::RawSchema s_912f1ae5c70096e6 = {
  0x912f1ae5c70096e6, b_912f1ae5c70096e6.words, 68, d_912f1ae5c70096e6, m_912f1ae5c70096e6,
  10, 5, nullptr, nullptr, nullptr, { &s_912f1ae5c70096e6, nullptr, nullptr, 0, 0, nullptr }, false
};
#endif  // !CAPNP_LITE
static const ::capnp::_::AlignedData<32> b_c5225234128aa26c = {
  {   0,   0,   0,   0,   5,   0,   6,   0,
    108, 162, 138,  18,  52,  82,  34, 197,
     19,   0,   0,   0,   1,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      1,   0,   7,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     21,   0,   0,   0,   2,   1,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     25,   0,   0,   0,  63,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
    117, 101,  95, 108, 111, 103,  46,  99,
     97, 112, 110, 112,  58,  85,  69,  76,
    111, 103,  46, 100, 101,  98, 117, 103,
     36,  80,  97, 114,  97, 109, 115,   0,
      4,   0,   0,   0,   3,   0,   4,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   1,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     13,   0,   0,   0,  66,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      8,   0,   0,   0,   3,   0,   1,   0,
     20,   0,   0,   0,   2,   0,   1,   0,
    109, 101, 115, 115,  97, 103, 101,   0,
     12,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     12,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0, }
};
::capnp::word const* const bp_c5225234128aa26c = b_c5225234128aa26c.words;
#if !CAPNP_LITE
static const uint16_t m_c5225234128aa26c[] = {0};
static const uint16_t i_c5225234128aa26c[] = {0};
const ::capnp::_::RawSchema s_c5225234128aa26c = {
  0xc5225234128aa26c, b_c5225234128aa26c.words, 32, nullptr, m_c5225234128aa26c,
  0, 1, i_c5225234128aa26c, nullptr, nullptr, { &s_c5225234128aa26c, nullptr, nullptr, 0, 0, nullptr }, false
};
#endif  // !CAPNP_LITE
static const ::capnp::_::AlignedData<17> b_c8efb2923c0b187d = {
  {   0,   0,   0,   0,   5,   0,   6,   0,
    125,  24,  11,  60, 146, 178, 239, 200,
     19,   0,   0,   0,   1,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   7,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     21,   0,   0,   0,  10,   1,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
    117, 101,  95, 108, 111, 103,  46,  99,
     97, 112, 110, 112,  58,  85,  69,  76,
    111, 103,  46, 100, 101,  98, 117, 103,
     36,  82, 101, 115, 117, 108, 116, 115,
      0,   0,   0,   0,   0,   0,   0,   0, }
};
::capnp::word const* const bp_c8efb2923c0b187d = b_c8efb2923c0b187d.words;
#if !CAPNP_LITE
const ::capnp::_::RawSchema s_c8efb2923c0b187d = {
  0xc8efb2923c0b187d, b_c8efb2923c0b187d.words, 17, nullptr, nullptr,
  0, 0, nullptr, nullptr, nullptr, { &s_c8efb2923c0b187d, nullptr, nullptr, 0, 0, nullptr }, false
};
#endif  // !CAPNP_LITE
static const ::capnp::_::AlignedData<32> b_89f8c28462e6ecd6 = {
  {   0,   0,   0,   0,   5,   0,   6,   0,
    214, 236, 230,  98, 132, 194, 248, 137,
     19,   0,   0,   0,   1,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      1,   0,   7,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     21,   0,   0,   0, 250,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     25,   0,   0,   0,  63,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
    117, 101,  95, 108, 111, 103,  46,  99,
     97, 112, 110, 112,  58,  85,  69,  76,
    111, 103,  46, 105, 110, 102, 111,  36,
     80,  97, 114,  97, 109, 115,   0,   0,
      4,   0,   0,   0,   3,   0,   4,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   1,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     13,   0,   0,   0,  66,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      8,   0,   0,   0,   3,   0,   1,   0,
     20,   0,   0,   0,   2,   0,   1,   0,
    109, 101, 115, 115,  97, 103, 101,   0,
     12,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     12,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0, }
};
::capnp::word const* const bp_89f8c28462e6ecd6 = b_89f8c28462e6ecd6.words;
#if !CAPNP_LITE
static const uint16_t m_89f8c28462e6ecd6[] = {0};
static const uint16_t i_89f8c28462e6ecd6[] = {0};
const ::capnp::_::RawSchema s_89f8c28462e6ecd6 = {
  0x89f8c28462e6ecd6, b_89f8c28462e6ecd6.words, 32, nullptr, m_89f8c28462e6ecd6,
  0, 1, i_89f8c28462e6ecd6, nullptr, nullptr, { &s_89f8c28462e6ecd6, nullptr, nullptr, 0, 0, nullptr }, false
};
#endif  // !CAPNP_LITE
static const ::capnp::_::AlignedData<16> b_9c9dbbbb604e4d09 = {
  {   0,   0,   0,   0,   5,   0,   6,   0,
      9,  77,  78,  96, 187, 187, 157, 156,
     19,   0,   0,   0,   1,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   7,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     21,   0,   0,   0,   2,   1,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
    117, 101,  95, 108, 111, 103,  46,  99,
     97, 112, 110, 112,  58,  85,  69,  76,
    111, 103,  46, 105, 110, 102, 111,  36,
     82, 101, 115, 117, 108, 116, 115,   0, }
};
::capnp::word const* const bp_9c9dbbbb604e4d09 = b_9c9dbbbb604e4d09.words;
#if !CAPNP_LITE
const ::capnp::_::RawSchema s_9c9dbbbb604e4d09 = {
  0x9c9dbbbb604e4d09, b_9c9dbbbb604e4d09.words, 16, nullptr, nullptr,
  0, 0, nullptr, nullptr, nullptr, { &s_9c9dbbbb604e4d09, nullptr, nullptr, 0, 0, nullptr }, false
};
#endif  // !CAPNP_LITE
static const ::capnp::_::AlignedData<32> b_ab326bda87f2b7e4 = {
  {   0,   0,   0,   0,   5,   0,   6,   0,
    228, 183, 242, 135, 218, 107,  50, 171,
     19,   0,   0,   0,   1,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      1,   0,   7,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     21,   0,   0,   0, 250,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     25,   0,   0,   0,  63,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
    117, 101,  95, 108, 111, 103,  46,  99,
     97, 112, 110, 112,  58,  85,  69,  76,
    111, 103,  46, 119,  97, 114, 110,  36,
     80,  97, 114,  97, 109, 115,   0,   0,
      4,   0,   0,   0,   3,   0,   4,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   1,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     13,   0,   0,   0,  66,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      8,   0,   0,   0,   3,   0,   1,   0,
     20,   0,   0,   0,   2,   0,   1,   0,
    109, 101, 115, 115,  97, 103, 101,   0,
     12,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     12,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0, }
};
::capnp::word const* const bp_ab326bda87f2b7e4 = b_ab326bda87f2b7e4.words;
#if !CAPNP_LITE
static const uint16_t m_ab326bda87f2b7e4[] = {0};
static const uint16_t i_ab326bda87f2b7e4[] = {0};
const ::capnp::_::RawSchema s_ab326bda87f2b7e4 = {
  0xab326bda87f2b7e4, b_ab326bda87f2b7e4.words, 32, nullptr, m_ab326bda87f2b7e4,
  0, 1, i_ab326bda87f2b7e4, nullptr, nullptr, { &s_ab326bda87f2b7e4, nullptr, nullptr, 0, 0, nullptr }, false
};
#endif  // !CAPNP_LITE
static const ::capnp::_::AlignedData<16> b_e02a9a894f2de1e0 = {
  {   0,   0,   0,   0,   5,   0,   6,   0,
    224, 225,  45,  79, 137, 154,  42, 224,
     19,   0,   0,   0,   1,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   7,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     21,   0,   0,   0,   2,   1,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
    117, 101,  95, 108, 111, 103,  46,  99,
     97, 112, 110, 112,  58,  85,  69,  76,
    111, 103,  46, 119,  97, 114, 110,  36,
     82, 101, 115, 117, 108, 116, 115,   0, }
};
::capnp::word const* const bp_e02a9a894f2de1e0 = b_e02a9a894f2de1e0.words;
#if !CAPNP_LITE
const ::capnp::_::RawSchema s_e02a9a894f2de1e0 = {
  0xe02a9a894f2de1e0, b_e02a9a894f2de1e0.words, 16, nullptr, nullptr,
  0, 0, nullptr, nullptr, nullptr, { &s_e02a9a894f2de1e0, nullptr, nullptr, 0, 0, nullptr }, false
};
#endif  // !CAPNP_LITE
static const ::capnp::_::AlignedData<32> b_e63d2751ca6c2d27 = {
  {   0,   0,   0,   0,   5,   0,   6,   0,
     39,  45, 108, 202,  81,  39,  61, 230,
     19,   0,   0,   0,   1,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      1,   0,   7,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     21,   0,   0,   0,   2,   1,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     25,   0,   0,   0,  63,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
    117, 101,  95, 108, 111, 103,  46,  99,
     97, 112, 110, 112,  58,  85,  69,  76,
    111, 103,  46, 101, 114, 114, 111, 114,
     36,  80,  97, 114,  97, 109, 115,   0,
      4,   0,   0,   0,   3,   0,   4,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   1,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     13,   0,   0,   0,  66,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      8,   0,   0,   0,   3,   0,   1,   0,
     20,   0,   0,   0,   2,   0,   1,   0,
    109, 101, 115, 115,  97, 103, 101,   0,
     12,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     12,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0, }
};
::capnp::word const* const bp_e63d2751ca6c2d27 = b_e63d2751ca6c2d27.words;
#if !CAPNP_LITE
static const uint16_t m_e63d2751ca6c2d27[] = {0};
static const uint16_t i_e63d2751ca6c2d27[] = {0};
const ::capnp::_::RawSchema s_e63d2751ca6c2d27 = {
  0xe63d2751ca6c2d27, b_e63d2751ca6c2d27.words, 32, nullptr, m_e63d2751ca6c2d27,
  0, 1, i_e63d2751ca6c2d27, nullptr, nullptr, { &s_e63d2751ca6c2d27, nullptr, nullptr, 0, 0, nullptr }, false
};
#endif  // !CAPNP_LITE
static const ::capnp::_::AlignedData<17> b_ae003ce47c04e59d = {
  {   0,   0,   0,   0,   5,   0,   6,   0,
    157, 229,   4, 124, 228,  60,   0, 174,
     19,   0,   0,   0,   1,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   7,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     21,   0,   0,   0,  10,   1,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
    117, 101,  95, 108, 111, 103,  46,  99,
     97, 112, 110, 112,  58,  85,  69,  76,
    111, 103,  46, 101, 114, 114, 111, 114,
     36,  82, 101, 115, 117, 108, 116, 115,
      0,   0,   0,   0,   0,   0,   0,   0, }
};
::capnp::word const* const bp_ae003ce47c04e59d = b_ae003ce47c04e59d.words;
#if !CAPNP_LITE
const ::capnp::_::RawSchema s_ae003ce47c04e59d = {
  0xae003ce47c04e59d, b_ae003ce47c04e59d.words, 17, nullptr, nullptr,
  0, 0, nullptr, nullptr, nullptr, { &s_ae003ce47c04e59d, nullptr, nullptr, 0, 0, nullptr }, false
};
#endif  // !CAPNP_LITE
static const ::capnp::_::AlignedData<32> b_8c2b8f5b68cb3a12 = {
  {   0,   0,   0,   0,   5,   0,   6,   0,
     18,  58, 203, 104,  91, 143,  43, 140,
     19,   0,   0,   0,   1,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      1,   0,   7,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     21,   0,   0,   0,   2,   1,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     25,   0,   0,   0,  63,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
    117, 101,  95, 108, 111, 103,  46,  99,
     97, 112, 110, 112,  58,  85,  69,  76,
    111, 103,  46, 102,  97, 116,  97, 108,
     36,  80,  97, 114,  97, 109, 115,   0,
      4,   0,   0,   0,   3,   0,   4,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   1,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     13,   0,   0,   0,  66,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      8,   0,   0,   0,   3,   0,   1,   0,
     20,   0,   0,   0,   2,   0,   1,   0,
    109, 101, 115, 115,  97, 103, 101,   0,
     12,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     12,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0, }
};
::capnp::word const* const bp_8c2b8f5b68cb3a12 = b_8c2b8f5b68cb3a12.words;
#if !CAPNP_LITE
static const uint16_t m_8c2b8f5b68cb3a12[] = {0};
static const uint16_t i_8c2b8f5b68cb3a12[] = {0};
const ::capnp::_::RawSchema s_8c2b8f5b68cb3a12 = {
  0x8c2b8f5b68cb3a12, b_8c2b8f5b68cb3a12.words, 32, nullptr, m_8c2b8f5b68cb3a12,
  0, 1, i_8c2b8f5b68cb3a12, nullptr, nullptr, { &s_8c2b8f5b68cb3a12, nullptr, nullptr, 0, 0, nullptr }, false
};
#endif  // !CAPNP_LITE
static const ::capnp::_::AlignedData<17> b_bcb4ec63f41efb4a = {
  {   0,   0,   0,   0,   5,   0,   6,   0,
     74, 251,  30, 244,  99, 236, 180, 188,
     19,   0,   0,   0,   1,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   7,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     21,   0,   0,   0,  10,   1,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
    117, 101,  95, 108, 111, 103,  46,  99,
     97, 112, 110, 112,  58,  85,  69,  76,
    111, 103,  46, 102,  97, 116,  97, 108,
     36,  82, 101, 115, 117, 108, 116, 115,
      0,   0,   0,   0,   0,   0,   0,   0, }
};
::capnp::word const* const bp_bcb4ec63f41efb4a = b_bcb4ec63f41efb4a.words;
#if !CAPNP_LITE
const ::capnp::_::RawSchema s_bcb4ec63f41efb4a = {
  0xbcb4ec63f41efb4a, b_bcb4ec63f41efb4a.words, 17, nullptr, nullptr,
  0, 0, nullptr, nullptr, nullptr, { &s_bcb4ec63f41efb4a, nullptr, nullptr, 0, 0, nullptr }, false
};
#endif  // !CAPNP_LITE
}  // namespace schemas
}  // namespace capnp

// =======================================================================================


#if !CAPNP_LITE
::capnp::Request< ::UELog::DebugParams,  ::UELog::DebugResults>
UELog::Client::debugRequest(::kj::Maybe< ::capnp::MessageSize> sizeHint) {
  return newCall< ::UELog::DebugParams,  ::UELog::DebugResults>(
      0x912f1ae5c70096e6ull, 0, sizeHint, {true});
}
::kj::Promise<void> UELog::Server::debug(DebugContext) {
  return ::capnp::Capability::Server::internalUnimplemented(
      "ue_log.capnp:UELog", "debug",
      0x912f1ae5c70096e6ull, 0);
}
::capnp::Request< ::UELog::InfoParams,  ::UELog::InfoResults>
UELog::Client::infoRequest(::kj::Maybe< ::capnp::MessageSize> sizeHint) {
  return newCall< ::UELog::InfoParams,  ::UELog::InfoResults>(
      0x912f1ae5c70096e6ull, 1, sizeHint, {true});
}
::kj::Promise<void> UELog::Server::info(InfoContext) {
  return ::capnp::Capability::Server::internalUnimplemented(
      "ue_log.capnp:UELog", "info",
      0x912f1ae5c70096e6ull, 1);
}
::capnp::Request< ::UELog::WarnParams,  ::UELog::WarnResults>
UELog::Client::warnRequest(::kj::Maybe< ::capnp::MessageSize> sizeHint) {
  return newCall< ::UELog::WarnParams,  ::UELog::WarnResults>(
      0x912f1ae5c70096e6ull, 2, sizeHint, {true});
}
::kj::Promise<void> UELog::Server::warn(WarnContext) {
  return ::capnp::Capability::Server::internalUnimplemented(
      "ue_log.capnp:UELog", "warn",
      0x912f1ae5c70096e6ull, 2);
}
::capnp::Request< ::UELog::ErrorParams,  ::UELog::ErrorResults>
UELog::Client::errorRequest(::kj::Maybe< ::capnp::MessageSize> sizeHint) {
  return newCall< ::UELog::ErrorParams,  ::UELog::ErrorResults>(
      0x912f1ae5c70096e6ull, 3, sizeHint, {true});
}
::kj::Promise<void> UELog::Server::error(ErrorContext) {
  return ::capnp::Capability::Server::internalUnimplemented(
      "ue_log.capnp:UELog", "error",
      0x912f1ae5c70096e6ull, 3);
}
::capnp::Request< ::UELog::FatalParams,  ::UELog::FatalResults>
UELog::Client::fatalRequest(::kj::Maybe< ::capnp::MessageSize> sizeHint) {
  return newCall< ::UELog::FatalParams,  ::UELog::FatalResults>(
      0x912f1ae5c70096e6ull, 4, sizeHint, {true});
}
::kj::Promise<void> UELog::Server::fatal(FatalContext) {
  return ::capnp::Capability::Server::internalUnimplemented(
      "ue_log.capnp:UELog", "fatal",
      0x912f1ae5c70096e6ull, 4);
}
::capnp::Capability::Server::DispatchCallResult UELog::Server::dispatchCall(
    uint64_t interfaceId, uint16_t methodId,
    ::capnp::CallContext< ::capnp::AnyPointer, ::capnp::AnyPointer> context) {
  switch (interfaceId) {
    case 0x912f1ae5c70096e6ull:
      return dispatchCallInternal(methodId, context);
    default:
      return internalUnimplemented("ue_log.capnp:UELog", interfaceId);
  }
}
::capnp::Capability::Server::DispatchCallResult UELog::Server::dispatchCallInternal(
    uint16_t methodId,
    ::capnp::CallContext< ::capnp::AnyPointer, ::capnp::AnyPointer> context) {
  switch (methodId) {
    case 0:
      return {
        debug(::capnp::Capability::Server::internalGetTypedContext<
             ::UELog::DebugParams,  ::UELog::DebugResults>(context)),
        false,
        false
      };
    case 1:
      return {
        info(::capnp::Capability::Server::internalGetTypedContext<
             ::UELog::InfoParams,  ::UELog::InfoResults>(context)),
        false,
        false
      };
    case 2:
      return {
        warn(::capnp::Capability::Server::internalGetTypedContext<
             ::UELog::WarnParams,  ::UELog::WarnResults>(context)),
        false,
        false
      };
    case 3:
      return {
        error(::capnp::Capability::Server::internalGetTypedContext<
             ::UELog::ErrorParams,  ::UELog::ErrorResults>(context)),
        false,
        false
      };
    case 4:
      return {
        fatal(::capnp::Capability::Server::internalGetTypedContext<
             ::UELog::FatalParams,  ::UELog::FatalResults>(context)),
        false,
        false
      };
    default:
      (void)context;
      return ::capnp::Capability::Server::internalUnimplemented(
          "ue_log.capnp:UELog",
          0x912f1ae5c70096e6ull, methodId);
  }
}
#endif  // !CAPNP_LITE

// UELog
#if !CAPNP_LITE
#if CAPNP_NEED_REDUNDANT_CONSTEXPR_DECL
constexpr ::capnp::Kind UELog::_capnpPrivate::kind;
constexpr ::capnp::_::RawSchema const* UELog::_capnpPrivate::schema;
#endif  // !CAPNP_NEED_REDUNDANT_CONSTEXPR_DECL
#endif  // !CAPNP_LITE

// UELog::DebugParams
#if CAPNP_NEED_REDUNDANT_CONSTEXPR_DECL
constexpr uint16_t UELog::DebugParams::_capnpPrivate::dataWordSize;
constexpr uint16_t UELog::DebugParams::_capnpPrivate::pointerCount;
#endif  // !CAPNP_NEED_REDUNDANT_CONSTEXPR_DECL
#if !CAPNP_LITE
#if CAPNP_NEED_REDUNDANT_CONSTEXPR_DECL
constexpr ::capnp::Kind UELog::DebugParams::_capnpPrivate::kind;
constexpr ::capnp::_::RawSchema const* UELog::DebugParams::_capnpPrivate::schema;
#endif  // !CAPNP_NEED_REDUNDANT_CONSTEXPR_DECL
#endif  // !CAPNP_LITE

// UELog::DebugResults
#if CAPNP_NEED_REDUNDANT_CONSTEXPR_DECL
constexpr uint16_t UELog::DebugResults::_capnpPrivate::dataWordSize;
constexpr uint16_t UELog::DebugResults::_capnpPrivate::pointerCount;
#endif  // !CAPNP_NEED_REDUNDANT_CONSTEXPR_DECL
#if !CAPNP_LITE
#if CAPNP_NEED_REDUNDANT_CONSTEXPR_DECL
constexpr ::capnp::Kind UELog::DebugResults::_capnpPrivate::kind;
constexpr ::capnp::_::RawSchema const* UELog::DebugResults::_capnpPrivate::schema;
#endif  // !CAPNP_NEED_REDUNDANT_CONSTEXPR_DECL
#endif  // !CAPNP_LITE

// UELog::InfoParams
#if CAPNP_NEED_REDUNDANT_CONSTEXPR_DECL
constexpr uint16_t UELog::InfoParams::_capnpPrivate::dataWordSize;
constexpr uint16_t UELog::InfoParams::_capnpPrivate::pointerCount;
#endif  // !CAPNP_NEED_REDUNDANT_CONSTEXPR_DECL
#if !CAPNP_LITE
#if CAPNP_NEED_REDUNDANT_CONSTEXPR_DECL
constexpr ::capnp::Kind UELog::InfoParams::_capnpPrivate::kind;
constexpr ::capnp::_::RawSchema const* UELog::InfoParams::_capnpPrivate::schema;
#endif  // !CAPNP_NEED_REDUNDANT_CONSTEXPR_DECL
#endif  // !CAPNP_LITE

// UELog::InfoResults
#if CAPNP_NEED_REDUNDANT_CONSTEXPR_DECL
constexpr uint16_t UELog::InfoResults::_capnpPrivate::dataWordSize;
constexpr uint16_t UELog::InfoResults::_capnpPrivate::pointerCount;
#endif  // !CAPNP_NEED_REDUNDANT_CONSTEXPR_DECL
#if !CAPNP_LITE
#if CAPNP_NEED_REDUNDANT_CONSTEXPR_DECL
constexpr ::capnp::Kind UELog::InfoResults::_capnpPrivate::kind;
constexpr ::capnp::_::RawSchema const* UELog::InfoResults::_capnpPrivate::schema;
#endif  // !CAPNP_NEED_REDUNDANT_CONSTEXPR_DECL
#endif  // !CAPNP_LITE

// UELog::WarnParams
#if CAPNP_NEED_REDUNDANT_CONSTEXPR_DECL
constexpr uint16_t UELog::WarnParams::_capnpPrivate::dataWordSize;
constexpr uint16_t UELog::WarnParams::_capnpPrivate::pointerCount;
#endif  // !CAPNP_NEED_REDUNDANT_CONSTEXPR_DECL
#if !CAPNP_LITE
#if CAPNP_NEED_REDUNDANT_CONSTEXPR_DECL
constexpr ::capnp::Kind UELog::WarnParams::_capnpPrivate::kind;
constexpr ::capnp::_::RawSchema const* UELog::WarnParams::_capnpPrivate::schema;
#endif  // !CAPNP_NEED_REDUNDANT_CONSTEXPR_DECL
#endif  // !CAPNP_LITE

// UELog::WarnResults
#if CAPNP_NEED_REDUNDANT_CONSTEXPR_DECL
constexpr uint16_t UELog::WarnResults::_capnpPrivate::dataWordSize;
constexpr uint16_t UELog::WarnResults::_capnpPrivate::pointerCount;
#endif  // !CAPNP_NEED_REDUNDANT_CONSTEXPR_DECL
#if !CAPNP_LITE
#if CAPNP_NEED_REDUNDANT_CONSTEXPR_DECL
constexpr ::capnp::Kind UELog::WarnResults::_capnpPrivate::kind;
constexpr ::capnp::_::RawSchema const* UELog::WarnResults::_capnpPrivate::schema;
#endif  // !CAPNP_NEED_REDUNDANT_CONSTEXPR_DECL
#endif  // !CAPNP_LITE

// UELog::ErrorParams
#if CAPNP_NEED_REDUNDANT_CONSTEXPR_DECL
constexpr uint16_t UELog::ErrorParams::_capnpPrivate::dataWordSize;
constexpr uint16_t UELog::ErrorParams::_capnpPrivate::pointerCount;
#endif  // !CAPNP_NEED_REDUNDANT_CONSTEXPR_DECL
#if !CAPNP_LITE
#if CAPNP_NEED_REDUNDANT_CONSTEXPR_DECL
constexpr ::capnp::Kind UELog::ErrorParams::_capnpPrivate::kind;
constexpr ::capnp::_::RawSchema const* UELog::ErrorParams::_capnpPrivate::schema;
#endif  // !CAPNP_NEED_REDUNDANT_CONSTEXPR_DECL
#endif  // !CAPNP_LITE

// UELog::ErrorResults
#if CAPNP_NEED_REDUNDANT_CONSTEXPR_DECL
constexpr uint16_t UELog::ErrorResults::_capnpPrivate::dataWordSize;
constexpr uint16_t UELog::ErrorResults::_capnpPrivate::pointerCount;
#endif  // !CAPNP_NEED_REDUNDANT_CONSTEXPR_DECL
#if !CAPNP_LITE
#if CAPNP_NEED_REDUNDANT_CONSTEXPR_DECL
constexpr ::capnp::Kind UELog::ErrorResults::_capnpPrivate::kind;
constexpr ::capnp::_::RawSchema const* UELog::ErrorResults::_capnpPrivate::schema;
#endif  // !CAPNP_NEED_REDUNDANT_CONSTEXPR_DECL
#endif  // !CAPNP_LITE

// UELog::FatalParams
#if CAPNP_NEED_REDUNDANT_CONSTEXPR_DECL
constexpr uint16_t UELog::FatalParams::_capnpPrivate::dataWordSize;
constexpr uint16_t UELog::FatalParams::_capnpPrivate::pointerCount;
#endif  // !CAPNP_NEED_REDUNDANT_CONSTEXPR_DECL
#if !CAPNP_LITE
#if CAPNP_NEED_REDUNDANT_CONSTEXPR_DECL
constexpr ::capnp::Kind UELog::FatalParams::_capnpPrivate::kind;
constexpr ::capnp::_::RawSchema const* UELog::FatalParams::_capnpPrivate::schema;
#endif  // !CAPNP_NEED_REDUNDANT_CONSTEXPR_DECL
#endif  // !CAPNP_LITE

// UELog::FatalResults
#if CAPNP_NEED_REDUNDANT_CONSTEXPR_DECL
constexpr uint16_t UELog::FatalResults::_capnpPrivate::dataWordSize;
constexpr uint16_t UELog::FatalResults::_capnpPrivate::pointerCount;
#endif  // !CAPNP_NEED_REDUNDANT_CONSTEXPR_DECL
#if !CAPNP_LITE
#if CAPNP_NEED_REDUNDANT_CONSTEXPR_DECL
constexpr ::capnp::Kind UELog::FatalResults::_capnpPrivate::kind;
constexpr ::capnp::_::RawSchema const* UELog::FatalResults::_capnpPrivate::schema;
#endif  // !CAPNP_NEED_REDUNDANT_CONSTEXPR_DECL
#endif  // !CAPNP_LITE



